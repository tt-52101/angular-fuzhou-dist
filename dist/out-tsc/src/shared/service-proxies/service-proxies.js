"use strict";
/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.2.5.0 (NJsonSchema v9.13.37.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs/add/operator/finally");
var operators_1 = require("rxjs/operators");
var rxjs_1 = require("rxjs");
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
var moment = require("moment");
exports.API_BASE_URL = new core_1.InjectionToken('API_BASE_URL');
var AccountServiceProxy = /** @class */ (function () {
    function AccountServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 收款
     * @param accounts (optional) 账单Id集合
     * @return Success
     */
    AccountServiceProxy.prototype.collectAccounts = function (accounts) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Account/CollectAccounts?";
        if (accounts !== undefined)
            accounts && accounts.forEach(function (item) { url_ += "accounts=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCollectAccounts(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCollectAccounts(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processCollectAccounts = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 取消收款
     * @param accounts (optional) 账单Id集合
     * @return Success
     */
    AccountServiceProxy.prototype.rCollectAccounts = function (accounts) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Account/RCollectAccounts?";
        if (accounts !== undefined)
            accounts && accounts.forEach(function (item) { url_ += "accounts=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRCollectAccounts(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRCollectAccounts(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processRCollectAccounts = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 取消结账
     * @param accounts (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.rSettleAccount = function (accounts) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Account/RSettleAccount?";
        if (accounts !== undefined)
            accounts && accounts.forEach(function (item) { url_ += "accounts=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRSettleAccount(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRSettleAccount(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processRSettleAccount = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 结账
     * @param activitys (optional) 订单Id集合
     * @return Success
     */
    AccountServiceProxy.prototype.settleAccount = function (activitys) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Account/SettleAccount?";
        if (activitys !== undefined)
            activitys && activitys.forEach(function (item) { url_ += "activitys=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSettleAccount(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSettleAccount(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processSettleAccount = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.activateEmail = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/ActivateEmail";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processActivateEmail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processActivateEmail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processActivateEmail = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    AccountServiceProxy.prototype.backToImpersonator = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/BackToImpersonator";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBackToImpersonator(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBackToImpersonator(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processBackToImpersonator = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    AccountServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.impersonate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/Impersonate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processImpersonate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processImpersonate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processImpersonate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ImpersonateOutput.fromJS(resultData200) : new ImpersonateOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.isTenantAvailable = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/IsTenantAvailable";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processIsTenantAvailable(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processIsTenantAvailable(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processIsTenantAvailable = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? IsTenantAvailableOutput.fromJS(resultData200) : new IsTenantAvailableOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.register = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/Register";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRegister(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRegister(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processRegister = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RegisterOutput.fromJS(resultData200) : new RegisterOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 重置密码
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.resetPassword = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/ResetPasswordAsync";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processResetPassword(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processResetPassword(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processResetPassword = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ResetPasswordOutput.fromJS(resultData200) : new ResetPasswordOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.resolveTenantId = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/ResolveTenantId";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processResolveTenantId(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processResolveTenantId(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processResolveTenantId = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.sendEmailActivationLink = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/SendEmailActivationLink";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSendEmailActivationLink(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSendEmailActivationLink(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processSendEmailActivationLink = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.sendPasswordResetCode = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/SendPasswordResetCode";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSendPasswordResetCode(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSendPasswordResetCode(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processSendPasswordResetCode = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    AccountServiceProxy.prototype.switchToLinkedAccount = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Account/SwitchToLinkedAccount";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSwitchToLinkedAccount(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSwitchToLinkedAccount(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountServiceProxy.prototype.processSwitchToLinkedAccount = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SwitchToLinkedAccountOutput.fromJS(resultData200) : new SwitchToLinkedAccountOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    AccountServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], AccountServiceProxy);
    return AccountServiceProxy;
}());
exports.AccountServiceProxy = AccountServiceProxy;
var ActivityServiceProxy = /** @class */ (function () {
    function ActivityServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Web客户端使用，直接将订单创建到activity表中
     * @param createActivityModel (optional) {
        "sourceId": "54D99CD6-D807-4783-70AA-08D798BCBD02",
        "scheduleId": "829D2F50-D4F8-4D0C-0C2F-08D798BCBD32",
        "payMethodId": "6253E959-5DFD-4CBA-0A7C-08D798BCBC89",
        "activityDetails": [
            {
                "ticketPriceId": "2744AC36-68C4-45E0-1F19-08D798BCBD8A",
                "customerId": "",
            }
        ]
    }
     * @return Success
     */
    ActivityServiceProxy.prototype.createActivity = function (createActivityModel) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Activity/CreateActivity";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(createActivityModel);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateActivity(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateActivity(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processCreateActivity = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.getBoat = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Activity/GetBoat?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetBoat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetBoat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetBoat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? Boat.fromJS(resultData200) : new Boat();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 查询剩余该航班票数
     * @param scheduleId (optional) 航班Id
     * @return Success
     */
    ActivityServiceProxy.prototype.getExistenTicket = function (scheduleId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Activity/GetExistenTicket?";
        if (scheduleId !== undefined)
            url_ += "scheduleId=" + encodeURIComponent("" + scheduleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetExistenTicket(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetExistenTicket(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetExistenTicket = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * Web客户端使用，执行退票操作
     * @param list (optional) 票据Idlist
     * @param rDiscount (optional) 退票折扣
     * @param remark (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.refundTicket = function (list, rDiscount, remark) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Activity/RefundTicket?";
        if (list !== undefined)
            list && list.forEach(function (item) { url_ += "list=" + encodeURIComponent("" + item) + "&"; });
        if (rDiscount !== undefined)
            url_ += "rDiscount=" + encodeURIComponent("" + rDiscount) + "&";
        if (remark !== undefined)
            url_ += "remark=" + encodeURIComponent("" + remark) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRefundTicket(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRefundTicket(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processRefundTicket = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 设置预留票数
     * @param scheduleId (optional) 航班Id
     * @param reserveQuantity (optional) 预留数
     * @return Success
     */
    ActivityServiceProxy.prototype.setReserveQuantity = function (scheduleId, reserveQuantity) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Activity/SetReserveQuantity?";
        if (scheduleId !== undefined)
            url_ += "scheduleId=" + encodeURIComponent("" + scheduleId) + "&";
        if (reserveQuantity !== undefined)
            url_ += "reserveQuantity=" + encodeURIComponent("" + reserveQuantity) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSetReserveQuantity(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSetReserveQuantity(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processSetReserveQuantity = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 合计退票费用
     * @param list (optional)
     * @param rDiscount (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.sumRefund = function (list, rDiscount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Activity/SumRefund?";
        if (list !== undefined)
            list && list.forEach(function (item) { url_ += "list=" + encodeURIComponent("" + item) + "&"; });
        if (rDiscount !== undefined)
            url_ += "rDiscount=" + encodeURIComponent("" + rDiscount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSumRefund(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSumRefund(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processSumRefund = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 批量删除Activity的方法
     * @param input (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Activity的公共方法
     * @param input (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Activity信息的方法
     * @param id (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 销售员售票统计
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param certificatesNum (optional) 购票人证件号
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.getActivity = function (queryData, certificatesNum, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/GetActivity?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (certificatesNum !== undefined)
            url_ += "certificatesNum=" + encodeURIComponent("" + certificatesNum) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetActivity(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetActivity(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetActivity = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfActivityListDto.fromJS(resultData200) : new PagedResultDtoOfActivityListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取ActivityListDto信息
     * @param id (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityListDto.fromJS(resultData200) : new ActivityListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Activity
     * @param id (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetActivityForEditOutput.fromJS(resultData200) : new GetActivityForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ActivityServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Activity的分页列表信息
     * @param input (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfActivityListDto.fromJS(resultData200) : new PagedResultDtoOfActivityListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ActivityServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Activity/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                        var item = resultData200_2[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ActivityServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ActivityServiceProxy);
    return ActivityServiceProxy;
}());
exports.ActivityServiceProxy = ActivityServiceProxy;
var ActivityTempServiceProxy = /** @class */ (function () {
    function ActivityTempServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param activityTempId (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.cancelActivityTemp = function (activityTempId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/ActivityTemp/CancelActivityTemp?";
        if (activityTempId !== undefined)
            url_ += "activityTempId=" + encodeURIComponent("" + activityTempId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCancelActivityTemp(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCancelActivityTemp(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processCancelActivityTemp = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 提交预留订单
     * @param activityTempId (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.commitActivityTemp = function (activityTempId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/ActivityTemp/CommitActivityTemp?";
        if (activityTempId !== undefined)
            url_ += "activityTempId=" + encodeURIComponent("" + activityTempId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCommitActivityTemp(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCommitActivityTemp(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processCommitActivityTemp = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * Web客户端使用，直接将订单创建到activityTemp表中
     * @param createActivityModel (optional) {
        "sourceId": "54D99CD6-D807-4783-70AA-08D798BCBD02",
        "scheduleId": "829D2F50-D4F8-4D0C-0C2F-08D798BCBD32",
        "payMethodId": "6253E959-5DFD-4CBA-0A7C-08D798BCBC89",
        "activityDetails": [
            {
                "ticketPriceId": "2744AC36-68C4-45E0-1F19-08D798BCBD8A",
                "customerId": "",
            }
        ]
    }
     * @return Success
     */
    ActivityTempServiceProxy.prototype.createActivityTemp = function (createActivityModel) {
        var _this = this;
        var url_ = this.baseUrl + "/api/ActivityTemp/CreateActivityTemp";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(createActivityModel);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateActivityTemp(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateActivityTemp(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processCreateActivityTemp = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 批量删除ActivityTemp的方法
     * @param input (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改ActivityTemp的公共方法
     * @param input (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除ActivityTemp信息的方法
     * @param id (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取ActivityTempListDto信息
     * @param id (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityTempListDto.fromJS(resultData200) : new ActivityTempListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 ActivityTemp
     * @param id (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetActivityTempForEditOutput.fromJS(resultData200) : new GetActivityTempForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ActivityTempServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取ActivityTemp的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfActivityTempListDto.fromJS(resultData200) : new PagedResultDtoOfActivityTempListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ActivityTempServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTemp/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                        var item = resultData200_3[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ActivityTempServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ActivityTempServiceProxy);
    return ActivityTempServiceProxy;
}());
exports.ActivityTempServiceProxy = ActivityTempServiceProxy;
var CheckTicketServiceProxy = /** @class */ (function () {
    function CheckTicketServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 卡验票
     * @param gateNumber (optional) 设备号
     * @param jqmpass (optional) 卡号
     * @param rdindex (optional) 串口号
     * @return Success
     */
    CheckTicketServiceProxy.prototype.cardOpen = function (gateNumber, jqmpass, rdindex) {
        var _this = this;
        var url_ = this.baseUrl + "/api/CheckTicket/CardOpen?";
        if (gateNumber !== undefined)
            url_ += "gateNumber=" + encodeURIComponent("" + gateNumber) + "&";
        if (jqmpass !== undefined)
            url_ += "jqmpass=" + encodeURIComponent("" + jqmpass) + "&";
        if (rdindex !== undefined)
            url_ += "rdindex=" + encodeURIComponent("" + rdindex) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCardOpen(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCardOpen(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckTicketServiceProxy.prototype.processCardOpen = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CheckResult.fromJS(resultData200) : new CheckResult();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 二维码验票
     * @param gateNumber (optional)
     * @param jqmpass (optional)
     * @param rdindex (optional)
     * @return Success
     */
    CheckTicketServiceProxy.prototype.scancodeopen = function (gateNumber, jqmpass, rdindex) {
        var _this = this;
        var url_ = this.baseUrl + "/api/CheckTicket/Scancodeopen?";
        if (gateNumber !== undefined)
            url_ += "gateNumber=" + encodeURIComponent("" + gateNumber) + "&";
        if (jqmpass !== undefined)
            url_ += "jqmpass=" + encodeURIComponent("" + jqmpass) + "&";
        if (rdindex !== undefined)
            url_ += "rdindex=" + encodeURIComponent("" + rdindex) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processScancodeopen(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processScancodeopen(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckTicketServiceProxy.prototype.processScancodeopen = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CheckResult.fromJS(resultData200) : new CheckResult();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    CheckTicketServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], CheckTicketServiceProxy);
    return CheckTicketServiceProxy;
}());
exports.CheckTicketServiceProxy = CheckTicketServiceProxy;
var HistoryServiceProxy = /** @class */ (function () {
    function HistoryServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 过闸统计
     * @param queryData (optional) DeviceId 设备类型，Device.DeviceName 设备名称, CreatorUserId 操作员ID，CreationTime 检票时间
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param ticketId (optional) 票型ID
     * @param scheduleId (optional) 航班ID
     * @return Success
     */
    HistoryServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount, ticketId, scheduleId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/CheckTicket/History/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        if (scheduleId !== undefined)
            url_ += "scheduleId=" + encodeURIComponent("" + scheduleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HistoryServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfGateHistoryResultDto.fromJS(resultData200) : new PagedResultDtoOfGateHistoryResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    HistoryServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], HistoryServiceProxy);
    return HistoryServiceProxy;
}());
exports.HistoryServiceProxy = HistoryServiceProxy;
var RecordServiceProxy = /** @class */ (function () {
    function RecordServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 获取过闸记录的查询条件下拉框值
     * @return Success
     */
    RecordServiceProxy.prototype.filters = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/CheckTicket/Record/Filters";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processFilters(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processFilters(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RecordServiceProxy.prototype.processFilters = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GateRecordFilters.fromJS(resultData200) : new GateRecordFilters();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 过闸记录
     * @param queryData (optional) DeviceId 设备类型，DeviceName 设备名称，TicketId 票型，
    TicketNo 票码，CheckerId 操作员Id，StatusCode 检票状态，
    CreationTime 检票时间
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    RecordServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/CheckTicket/Record/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RecordServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfGateRecordResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfGateRecordResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    RecordServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], RecordServiceProxy);
    return RecordServiceProxy;
}());
exports.RecordServiceProxy = RecordServiceProxy;
var FileServiceProxy = /** @class */ (function () {
    function FileServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @return Success
     */
    FileServiceProxy.prototype.downloadFilePathFile = function (fileName, fileType, fileToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/File/DownloadFilePathFile?";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined and cannot be null.");
        else
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        if (fileType === undefined || fileType === null)
            throw new Error("The parameter 'fileType' must be defined and cannot be null.");
        else
            url_ += "fileType=" + encodeURIComponent("" + fileType) + "&";
        if (fileToken === undefined || fileToken === null)
            throw new Error("The parameter 'fileToken' must be defined and cannot be null.");
        else
            url_ += "fileToken=" + encodeURIComponent("" + fileToken) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDownloadFilePathFile(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDownloadFilePathFile(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    FileServiceProxy.prototype.processDownloadFilePathFile = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    FileServiceProxy.prototype.downloadTempFile = function (fileName, fileType, fileToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/File/DownloadTempFile?";
        if (fileName === undefined || fileName === null)
            throw new Error("The parameter 'fileName' must be defined and cannot be null.");
        else
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        if (fileType === undefined || fileType === null)
            throw new Error("The parameter 'fileType' must be defined and cannot be null.");
        else
            url_ += "fileType=" + encodeURIComponent("" + fileType) + "&";
        if (fileToken === undefined || fileToken === null)
            throw new Error("The parameter 'fileToken' must be defined and cannot be null.");
        else
            url_ += "fileToken=" + encodeURIComponent("" + fileToken) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDownloadTempFile(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDownloadTempFile(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    FileServiceProxy.prototype.processDownloadTempFile = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 上传图片
     * @param file (optional)
     * @return Success
     */
    FileServiceProxy.prototype.uploadImage = function (file) {
        var _this = this;
        var url_ = this.baseUrl + "/api/File/UploadImageAsync";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUploadImage(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUploadImage(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    FileServiceProxy.prototype.processUploadImage = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PictureResultDto.fromJS(resultData200) : new PictureResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    FileServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], FileServiceProxy);
    return FileServiceProxy;
}());
exports.FileServiceProxy = FileServiceProxy;
var AccountDetailServiceProxy = /** @class */ (function () {
    function AccountDetailServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除AccountDetail的方法
     * @param input (optional)
     * @return Success
     */
    AccountDetailServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改AccountDetail的公共方法
     * @param input (optional)
     * @return Success
     */
    AccountDetailServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除AccountDetail信息的方法
     * @param id (optional)
     * @return Success
     */
    AccountDetailServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取AccountDetailListDto信息
     * @param id (optional)
     * @return Success
     */
    AccountDetailServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AccountDetailListDto.fromJS(resultData200) : new AccountDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 AccountDetail
     * @param id (optional)
     * @return Success
     */
    AccountDetailServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetAccountDetailForEditOutput.fromJS(resultData200) : new GetAccountDetailForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    AccountDetailServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取AccountDetail的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    AccountDetailServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfAccountDetailListDto.fromJS(resultData200) : new PagedResultDtoOfAccountDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    AccountDetailServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AccountDetail/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AccountDetailServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                        var item = resultData200_4[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    AccountDetailServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], AccountDetailServiceProxy);
    return AccountDetailServiceProxy;
}());
exports.AccountDetailServiceProxy = AccountDetailServiceProxy;
var ActivityDetailServiceProxy = /** @class */ (function () {
    function ActivityDetailServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除ActivityDetail的方法
     * @param input (optional)
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改ActivityDetail的公共方法
     * @param input (optional)
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除ActivityDetail信息的方法
     * @param id (optional)
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取ActivityDetailListDto信息
     * @param id (optional)
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityDetailListDto.fromJS(resultData200) : new ActivityDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 ActivityDetail
     * @param id (optional)
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetActivityDetailForEditOutput.fromJS(resultData200) : new GetActivityDetailForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取ActivityDetail的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfActivityDetailListDto.fromJS(resultData200) : new PagedResultDtoOfActivityDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ActivityDetailServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityDetail/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityDetailServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                        var item = resultData200_5[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ActivityDetailServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ActivityDetailServiceProxy);
    return ActivityDetailServiceProxy;
}());
exports.ActivityDetailServiceProxy = ActivityDetailServiceProxy;
var ActivityTempDetailServiceProxy = /** @class */ (function () {
    function ActivityTempDetailServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除ActivityTempDetail的方法
     * @param input (optional)
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改ActivityTempDetail的公共方法
     * @param input (optional)
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除ActivityTempDetail信息的方法
     * @param id (optional)
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取ActivityTempDetailListDto信息
     * @param id (optional)
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityTempDetailListDto.fromJS(resultData200) : new ActivityTempDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 ActivityTempDetail
     * @param id (optional)
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetActivityTempDetailForEditOutput.fromJS(resultData200) : new GetActivityTempDetailForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取ActivityTempDetail的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfActivityTempDetailListDto.fromJS(resultData200) : new PagedResultDtoOfActivityTempDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ActivityTempDetailServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ActivityTempDetail/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ActivityTempDetailServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_6 = resultData200; _i < resultData200_6.length; _i++) {
                        var item = resultData200_6[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ActivityTempDetailServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ActivityTempDetailServiceProxy);
    return ActivityTempDetailServiceProxy;
}());
exports.ActivityTempDetailServiceProxy = ActivityTempDetailServiceProxy;
var AuditLogServiceProxy = /** @class */ (function () {
    function AuditLogServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param userName (optional) 用户名
     * @param serviceName (optional) 服务名称
     * @param methodName (optional) 方法名称
     * @param browserInfo (optional) 浏览器信息
     * @param hasException (optional) 是否包含异常
     * @param minExecutionDuration (optional)
     * @param maxExecutionDuration (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    AuditLogServiceProxy.prototype.getAuditLogsToExcel = function (startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetAuditLogsToExcelAsync?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (serviceName !== undefined)
            url_ += "serviceName=" + encodeURIComponent("" + serviceName) + "&";
        if (methodName !== undefined)
            url_ += "methodName=" + encodeURIComponent("" + methodName) + "&";
        if (browserInfo !== undefined)
            url_ += "browserInfo=" + encodeURIComponent("" + browserInfo) + "&";
        if (hasException !== undefined)
            url_ += "hasException=" + encodeURIComponent("" + hasException) + "&";
        if (minExecutionDuration !== undefined)
            url_ += "minExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
        if (maxExecutionDuration !== undefined)
            url_ += "maxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAuditLogsToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAuditLogsToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetAuditLogsToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param startDate (optional)
     * @param endDate (optional)
     * @param userName (optional)
     * @param entityTypeFullName (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    AuditLogServiceProxy.prototype.getEntityChanges = function (startDate, endDate, userName, entityTypeFullName, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChanges?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (entityTypeFullName !== undefined)
            url_ += "entityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetEntityChanges(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetEntityChanges(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetEntityChanges = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfEntityChangeListDto.fromJS(resultData200) : new PagedResultDtoOfEntityChangeListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param startDate (optional)
     * @param endDate (optional)
     * @param userName (optional)
     * @param entityTypeFullName (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    AuditLogServiceProxy.prototype.getEntityChangesToExcel = function (startDate, endDate, userName, entityTypeFullName, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityChangesToExcel?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (entityTypeFullName !== undefined)
            url_ += "entityTypeFullName=" + encodeURIComponent("" + entityTypeFullName) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetEntityChangesToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetEntityChangesToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetEntityChangesToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    AuditLogServiceProxy.prototype.getEntityHistoryObjectTypes = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetEntityHistoryObjectTypes";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetEntityHistoryObjectTypes(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetEntityHistoryObjectTypes(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetEntityHistoryObjectTypes = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_7 = resultData200; _i < resultData200_7.length; _i++) {
                        var item = resultData200_7[_i];
                        result200.push(NameValueDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    AuditLogServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param userName (optional) 用户名
     * @param serviceName (optional) 服务名称
     * @param methodName (optional) 方法名称
     * @param browserInfo (optional) 浏览器信息
     * @param hasException (optional) 是否包含异常
     * @param minExecutionDuration (optional)
     * @param maxExecutionDuration (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    AuditLogServiceProxy.prototype.getPagedAuditLogs = function (startDate, endDate, userName, serviceName, methodName, browserInfo, hasException, minExecutionDuration, maxExecutionDuration, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetPagedAuditLogs?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (serviceName !== undefined)
            url_ += "serviceName=" + encodeURIComponent("" + serviceName) + "&";
        if (methodName !== undefined)
            url_ += "methodName=" + encodeURIComponent("" + methodName) + "&";
        if (browserInfo !== undefined)
            url_ += "browserInfo=" + encodeURIComponent("" + browserInfo) + "&";
        if (hasException !== undefined)
            url_ += "hasException=" + encodeURIComponent("" + hasException) + "&";
        if (minExecutionDuration !== undefined)
            url_ += "minExecutionDuration=" + encodeURIComponent("" + minExecutionDuration) + "&";
        if (maxExecutionDuration !== undefined)
            url_ += "maxExecutionDuration=" + encodeURIComponent("" + maxExecutionDuration) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedAuditLogs(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedAuditLogs(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetPagedAuditLogs = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfAuditLogListDto.fromJS(resultData200) : new PagedResultDtoOfAuditLogListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 登录日志查询
     * @param startDate (optional) 开始时间
     * @param endDate (optional) 结束时间
     * @param userName (optional) 登录用户名或邮箱
     * @param sourceName (optional) 登录端
     * @param sourceCode (optional) 登录端编码
     * @param clientIpAddress (optional) IP地址
     * @param hasException (optional) 是否包含异常
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    AuditLogServiceProxy.prototype.getPagedLoginLogs = function (startDate, endDate, userName, sourceName, sourceCode, clientIpAddress, hasException, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetPagedLoginLogs?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (userName !== undefined)
            url_ += "userName=" + encodeURIComponent("" + userName) + "&";
        if (sourceName !== undefined)
            url_ += "sourceName=" + encodeURIComponent("" + sourceName) + "&";
        if (sourceCode !== undefined)
            url_ += "sourceCode=" + encodeURIComponent("" + sourceCode) + "&";
        if (clientIpAddress !== undefined)
            url_ += "clientIpAddress=" + encodeURIComponent("" + clientIpAddress) + "&";
        if (hasException !== undefined)
            url_ += "hasException=" + encodeURIComponent("" + hasException) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedLoginLogs(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedLoginLogs(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetPagedLoginLogs = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfLoginLogModel.fromJS(resultData200) : new PagedResultDtoOfLoginLogModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    AuditLogServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/AuditLog/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    AuditLogServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_8 = resultData200; _i < resultData200_8.length; _i++) {
                        var item = resultData200_8[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    AuditLogServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], AuditLogServiceProxy);
    return AuditLogServiceProxy;
}());
exports.AuditLogServiceProxy = AuditLogServiceProxy;
var BoatServiceProxy = /** @class */ (function () {
    function BoatServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Boat的方法
     * @param input (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Boat的公共方法
     * @param input (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Boat信息的方法
     * @param id (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取BoatListDto信息
     * @param id (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? BoatListDto.fromJS(resultData200) : new BoatListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Boat
     * @param id (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetBoatForEditOutput.fromJS(resultData200) : new GetBoatForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    BoatServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Boat的分页列表信息
     * @param input (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfBoatListDto.fromJS(resultData200) : new PagedResultDtoOfBoatListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_9 = resultData200; _i < resultData200_9.length; _i++) {
                        var item = resultData200_9[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 从Excel表导入数据
     * @param file (optional)
     * @return Success
     */
    BoatServiceProxy.prototype.importBoat = function (file) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Boat/ImportBoat";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processImportBoat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processImportBoat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BoatServiceProxy.prototype.processImportBoat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExcelResultDto.fromJS(resultData200) : new ExcelResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    BoatServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], BoatServiceProxy);
    return BoatServiceProxy;
}());
exports.BoatServiceProxy = BoatServiceProxy;
var BooksServiceProxy = /** @class */ (function () {
    function BooksServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Book的方法
     * @param input (optional)
     * @return Success
     */
    BooksServiceProxy.prototype.batchDeleteBook = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/BatchDeleteBook";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDeleteBook(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDeleteBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processBatchDeleteBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Book的公共方法
     * @param input (optional)
     * @return Success
     */
    BooksServiceProxy.prototype.createOrUpdateBook = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/CreateOrUpdateBook";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdateBook(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdateBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processCreateOrUpdateBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Book信息的方法
     * @param id (optional)
     * @return Success
     */
    BooksServiceProxy.prototype.deleteBook = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/DeleteBook?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteBook(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processDeleteBook = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取BookListDto信息
     * @param id (optional)
     * @return Success
     */
    BooksServiceProxy.prototype.getBookById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/GetBookById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetBookById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetBookById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processGetBookById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? BookListDto.fromJS(resultData200) : new BookListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Book
     * @param id (optional)
     * @return Success
     */
    BooksServiceProxy.prototype.getBookForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/GetBookForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetBookForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetBookForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processGetBookForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetBookForEditOutput.fromJS(resultData200) : new GetBookForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    BooksServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Book的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    BooksServiceProxy.prototype.getPagedBook = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/GetPagedBook?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedBook(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedBook(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processGetPagedBook = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfBookListDto.fromJS(resultData200) : new PagedResultDtoOfBookListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    BooksServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Books/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BooksServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_10 = resultData200; _i < resultData200_10.length; _i++) {
                        var item = resultData200_10[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    BooksServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], BooksServiceProxy);
    return BooksServiceProxy;
}());
exports.BooksServiceProxy = BooksServiceProxy;
var BranchServiceProxy = /** @class */ (function () {
    function BranchServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Branch的方法
     * @param input (optional)
     * @return Success
     */
    BranchServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Branch的公共方法
     * @param input (optional)
     * @return Success
     */
    BranchServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Branch信息的方法
     * @param id (optional)
     * @return Success
     */
    BranchServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取BranchListDto信息
     * @param id (optional)
     * @return Success
     */
    BranchServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? BranchListDto.fromJS(resultData200) : new BranchListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Branch
     * @param id (optional)
     * @return Success
     */
    BranchServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetBranchForEditOutput.fromJS(resultData200) : new GetBranchForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    BranchServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Branch的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    BranchServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfBranchListDto.fromJS(resultData200) : new PagedResultDtoOfBranchListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    BranchServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_11 = resultData200; _i < resultData200_11.length; _i++) {
                        var item = resultData200_11[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 导出Branch为excel表。
     * @return Success
     */
    BranchServiceProxy.prototype.getToExcel = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Branch/GetToExcel";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchServiceProxy.prototype.processGetToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    BranchServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], BranchServiceProxy);
    return BranchServiceProxy;
}());
exports.BranchServiceProxy = BranchServiceProxy;
var BranchListExcelExporterServiceProxy = /** @class */ (function () {
    function BranchListExcelExporterServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param branchListDtos (optional)
     * @return Success
     */
    BranchListExcelExporterServiceProxy.prototype.exportToExcel = function (branchListDtos) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchListExcelExporter/ExportToExcel";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(branchListDtos);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processExportToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processExportToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchListExcelExporterServiceProxy.prototype.processExportToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    BranchListExcelExporterServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchListExcelExporter/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchListExcelExporterServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    BranchListExcelExporterServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchListExcelExporter/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchListExcelExporterServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_12 = resultData200; _i < resultData200_12.length; _i++) {
                        var item = resultData200_12[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    BranchListExcelExporterServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], BranchListExcelExporterServiceProxy);
    return BranchListExcelExporterServiceProxy;
}());
exports.BranchListExcelExporterServiceProxy = BranchListExcelExporterServiceProxy;
var BranchUserServiceProxy = /** @class */ (function () {
    function BranchUserServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除BranchUser的方法
     * @param input (optional)
     * @return Success
     */
    BranchUserServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改BranchUser的公共方法
     * @param input (optional)
     * @return Success
     */
    BranchUserServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除BranchUser信息的方法
     * @param id (optional)
     * @return Success
     */
    BranchUserServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取BranchUserListDto信息
     * @param id (optional)
     * @return Success
     */
    BranchUserServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? BranchUserListDto.fromJS(resultData200) : new BranchUserListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 BranchUser
     * @param id (optional)
     * @return Success
     */
    BranchUserServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetBranchUserForEditOutput.fromJS(resultData200) : new GetBranchUserForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    BranchUserServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取BranchUser的分页列表信息
     * @param queryData (optional) User.XX,Branch.XX
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    BranchUserServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfBranchUserListDto.fromJS(resultData200) : new PagedResultDtoOfBranchUserListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    BranchUserServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/BranchUser/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    BranchUserServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_13 = resultData200; _i < resultData200_13.length; _i++) {
                        var item = resultData200_13[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    BranchUserServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], BranchUserServiceProxy);
    return BranchUserServiceProxy;
}());
exports.BranchUserServiceProxy = BranchUserServiceProxy;
var CheckRecordServiceProxy = /** @class */ (function () {
    function CheckRecordServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除CheckRecord的方法
     * @param input (optional)
     * @return Success
     */
    CheckRecordServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改CheckRecord的公共方法
     * @param input (optional)
     * @return Success
     */
    CheckRecordServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除CheckRecord信息的方法
     * @param id (optional)
     * @return Success
     */
    CheckRecordServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取CheckRecordListDto信息
     * @param id (optional)
     * @return Success
     */
    CheckRecordServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CheckRecordListDto.fromJS(resultData200) : new CheckRecordListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 CheckRecord
     * @param id (optional)
     * @return Success
     */
    CheckRecordServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetCheckRecordForEditOutput.fromJS(resultData200) : new GetCheckRecordForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    CheckRecordServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取CheckRecord的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    CheckRecordServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfCheckRecordListDto.fromJS(resultData200) : new PagedResultDtoOfCheckRecordListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    CheckRecordServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CheckRecord/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CheckRecordServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_14 = resultData200; _i < resultData200_14.length; _i++) {
                        var item = resultData200_14[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    CheckRecordServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], CheckRecordServiceProxy);
    return CheckRecordServiceProxy;
}());
exports.CheckRecordServiceProxy = CheckRecordServiceProxy;
var ClientVersionServiceProxy = /** @class */ (function () {
    function ClientVersionServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除ClientVersion的方法
     * @param input (optional)
     * @return Success
     */
    ClientVersionServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改ClientVersion的公共方法
     * @param input (optional)
     * @return Success
     */
    ClientVersionServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除ClientVersion信息的方法
     * @param id (optional)
     * @return Success
     */
    ClientVersionServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取ClientVersionListDto信息
     * @param id (optional)
     * @return Success
     */
    ClientVersionServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ClientVersionListDto.fromJS(resultData200) : new ClientVersionListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 ClientVersion
     * @param id (optional)
     * @return Success
     */
    ClientVersionServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetClientVersionForEditOutput.fromJS(resultData200) : new GetClientVersionForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ClientVersionServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取ClientVersion的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    ClientVersionServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfClientVersionListDto.fromJS(resultData200) : new PagedResultDtoOfClientVersionListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ClientVersionServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ClientVersion/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ClientVersionServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_15 = resultData200; _i < resultData200_15.length; _i++) {
                        var item = resultData200_15[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ClientVersionServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ClientVersionServiceProxy);
    return ClientVersionServiceProxy;
}());
exports.ClientVersionServiceProxy = ClientVersionServiceProxy;
var CommonCustomerServiceProxy = /** @class */ (function () {
    function CommonCustomerServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除CommonCustomer的方法
     * @param input (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 创建常用游客
     * @param input (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.createCommonCustomer = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/CreateCommonCustomer";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateCommonCustomer(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateCommonCustomer(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processCreateCommonCustomer = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改的公共方法
     * @param input (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除信息
     * @param id (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取CommonCustomerListDto信息
     * @param id (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CommonCustomerListDto.fromJS(resultData200) : new CommonCustomerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑
     * @param id (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetCommonCustomerForEditOutput.fromJS(resultData200) : new GetCommonCustomerForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取的分页列表信息
     * @param openId (optional) 主游客openId
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.getPaged = function (openId, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/GetPaged?";
        if (openId !== undefined)
            url_ += "openId=" + encodeURIComponent("" + openId) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfCommonCustomerListDto.fromJS(resultData200) : new PagedResultDtoOfCommonCustomerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_16 = resultData200; _i < resultData200_16.length; _i++) {
                        var item = resultData200_16[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 导出为excel文件
     * @return Success
     */
    CommonCustomerServiceProxy.prototype.getToExcelFile = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonCustomer/GetToExcelFile";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetToExcelFile(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetToExcelFile(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonCustomerServiceProxy.prototype.processGetToExcelFile = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    CommonCustomerServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], CommonCustomerServiceProxy);
    return CommonCustomerServiceProxy;
}());
exports.CommonCustomerServiceProxy = CommonCustomerServiceProxy;
var CommonLookupServiceProxy = /** @class */ (function () {
    function CommonLookupServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param input (optional)
     * @return Success
     */
    CommonLookupServiceProxy.prototype.findUsers = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonLookup/FindUsers";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processFindUsers(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processFindUsers(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonLookupServiceProxy.prototype.processFindUsers = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    CommonLookupServiceProxy.prototype.getDefaultEditionName = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonLookup/GetDefaultEditionName";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetDefaultEditionName(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetDefaultEditionName(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonLookupServiceProxy.prototype.processGetDefaultEditionName = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetDefaultEditionNameOutput.fromJS(resultData200) : new GetDefaultEditionNameOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param onlyFreeItems (optional)
     * @return Success
     */
    CommonLookupServiceProxy.prototype.getEditionsForCombobox = function (onlyFreeItems) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonLookup/GetEditionsForCombobox?";
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetEditionsForCombobox(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetEditionsForCombobox(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonLookupServiceProxy.prototype.processGetEditionsForCombobox = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS(resultData200) : new ListResultDtoOfSubscribableEditionComboboxItemDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    CommonLookupServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonLookup/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonLookupServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    CommonLookupServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonLookup/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonLookupServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_17 = resultData200; _i < resultData200_17.length; _i++) {
                        var item = resultData200_17[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    CommonLookupServiceProxy.prototype.getValidateCodeTypesForCombobox = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CommonLookup/GetValidateCodeTypesForCombobox";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetValidateCodeTypesForCombobox(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetValidateCodeTypesForCombobox(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CommonLookupServiceProxy.prototype.processGetValidateCodeTypesForCombobox = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfComboboxItemDtoTOfInt32.fromJS(resultData200) : new ListResultDtoOfComboboxItemDtoTOfInt32();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    CommonLookupServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], CommonLookupServiceProxy);
    return CommonLookupServiceProxy;
}());
exports.CommonLookupServiceProxy = CommonLookupServiceProxy;
var CustomerServiceProxy = /** @class */ (function () {
    function CustomerServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Customer的方法
     * @param input (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Customer的公共方法
     * @param input (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 官网注册
     * @param input (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.createUser = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/CreateUserAsync";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processCreateUser = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Customer信息的方法
     * @param id (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据证件ID查询客户，如果客户存在，则返回客户信息
     * @param identity (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.exists = function (identity) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/Exists?";
        if (identity !== undefined)
            url_ += "identity=" + encodeURIComponent("" + identity) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processExists(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processExists(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processExists = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CustomerExistsDto.fromJS(resultData200) : new CustomerExistsDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取CustomerListDto信息
     * @param id (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CustomerListDto.fromJS(resultData200) : new CustomerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定Openid获取CustomerListDto信息
     * @param openId (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.getByOpenId = function (openId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/GetByOpenId?";
        if (openId !== undefined)
            url_ += "openId=" + encodeURIComponent("" + openId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetByOpenId(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetByOpenId(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processGetByOpenId = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CustomerListDto.fromJS(resultData200) : new CustomerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Customer
     * @param id (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetCustomerForEditOutput.fromJS(resultData200) : new GetCustomerForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    CustomerServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Customer的分页列表信息
     * @param input (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfCustomerListDto.fromJS(resultData200) : new PagedResultDtoOfCustomerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_18 = resultData200; _i < resultData200_18.length; _i++) {
                        var item = resultData200_18[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 导出Customer为excel表,等待开发。
     * @return Success
     */
    CustomerServiceProxy.prototype.getToExcel = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/GetToExcel";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processGetToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 上传客户照片
     * @param file (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.userPicture = function (file) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/UserPicture";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUserPicture(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUserPicture(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processUserPicture = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? UploadUserPictureResultDto.fromJS(resultData200) : new UploadUserPictureResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 上传客户照片
     * @param userPictureDto (optional)
     * @return Success
     */
    CustomerServiceProxy.prototype.userPictureBase64 = function (userPictureDto) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Customer/UserPictureBase64";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(userPictureDto);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUserPictureBase64(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUserPictureBase64(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomerServiceProxy.prototype.processUserPictureBase64 = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? UploadUserPictureResultDto.fromJS(resultData200) : new UploadUserPictureResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    CustomerServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], CustomerServiceProxy);
    return CustomerServiceProxy;
}());
exports.CustomerServiceProxy = CustomerServiceProxy;
var CustomListExcelExporterServiceProxy = /** @class */ (function () {
    function CustomListExcelExporterServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param customerListDtos (optional)
     * @return Success
     */
    CustomListExcelExporterServiceProxy.prototype.exportToExcel = function (customerListDtos) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CustomListExcelExporter/ExportToExcel";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(customerListDtos);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processExportToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processExportToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomListExcelExporterServiceProxy.prototype.processExportToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    CustomListExcelExporterServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CustomListExcelExporter/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomListExcelExporterServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    CustomListExcelExporterServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/CustomListExcelExporter/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    CustomListExcelExporterServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_19 = resultData200; _i < resultData200_19.length; _i++) {
                        var item = resultData200_19[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    CustomListExcelExporterServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], CustomListExcelExporterServiceProxy);
    return CustomListExcelExporterServiceProxy;
}());
exports.CustomListExcelExporterServiceProxy = CustomListExcelExporterServiceProxy;
var DateDictionaryServiceProxy = /** @class */ (function () {
    function DateDictionaryServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除DateDictionary的方法
     * @param input (optional)
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改DateDictionary的公共方法
     * @param input (optional)
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除DateDictionary信息的方法
     * @param id (optional)
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取DateDictionaryListDto信息
     * @param id (optional)
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DateDictionaryListDto.fromJS(resultData200) : new DateDictionaryListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 DateDictionary
     * @param id (optional)
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetDateDictionaryForEditOutput.fromJS(resultData200) : new GetDateDictionaryForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取DateDictionary的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfDateDictionaryListDto.fromJS(resultData200) : new PagedResultDtoOfDateDictionaryListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    DateDictionaryServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/DateDictionary/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DateDictionaryServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_20 = resultData200; _i < resultData200_20.length; _i++) {
                        var item = resultData200_20[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    DateDictionaryServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], DateDictionaryServiceProxy);
    return DateDictionaryServiceProxy;
}());
exports.DateDictionaryServiceProxy = DateDictionaryServiceProxy;
var DeviceServiceProxy = /** @class */ (function () {
    function DeviceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Device的方法
     * @param input (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Device的公共方法
     * @param input (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Device信息的方法
     * @param id (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取DeviceListDto信息
     * @param id (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DeviceListDto.fromJS(resultData200) : new DeviceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Device
     * @param id (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetDeviceForEditOutput.fromJS(resultData200) : new GetDeviceForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    DeviceServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Device的分页列表信息--Post方法
     * @param input (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfDeviceListDto.fromJS(resultData200) : new PagedResultDtoOfDeviceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Device的分页列表信息--Get方法
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.getPagedForGet = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/GetPagedForGet?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedForGet(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedForGet(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processGetPagedForGet = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfDeviceListDto.fromJS(resultData200) : new PagedResultDtoOfDeviceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_21 = resultData200; _i < resultData200_21.length; _i++) {
                        var item = resultData200_21[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 客户端每分钟发送一次心跳包
     * @param gateNumber (optional)
     * @return Success
     */
    DeviceServiceProxy.prototype.heartBeat = function (gateNumber) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Device/HeartBeat?";
        if (gateNumber !== undefined)
            url_ += "gateNumber=" + encodeURIComponent("" + gateNumber) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processHeartBeat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processHeartBeat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    DeviceServiceProxy.prototype.processHeartBeat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? HeartBeatResult.fromJS(resultData200) : new HeartBeatResult();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    DeviceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], DeviceServiceProxy);
    return DeviceServiceProxy;
}());
exports.DeviceServiceProxy = DeviceServiceProxy;
var EditionServiceProxy = /** @class */ (function () {
    function EditionServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param input (optional)
     * @return Success
     */
    EditionServiceProxy.prototype.createOrUpdateEdition = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/CreateOrUpdateEdition";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdateEdition(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdateEdition(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processCreateOrUpdateEdition = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    EditionServiceProxy.prototype.deleteEdition = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/DeleteEdition?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteEdition(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteEdition(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processDeleteEdition = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param selectedEditionId (optional)
     * @param addAllItem (optional)
     * @param onlyFreeItems (optional)
     * @return Success
     */
    EditionServiceProxy.prototype.getEditionComboboxItems = function (selectedEditionId, addAllItem, onlyFreeItems) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/GetEditionComboboxItems?";
        if (selectedEditionId !== undefined)
            url_ += "selectedEditionId=" + encodeURIComponent("" + selectedEditionId) + "&";
        if (addAllItem !== undefined)
            url_ += "addAllItem=" + encodeURIComponent("" + addAllItem) + "&";
        if (onlyFreeItems !== undefined)
            url_ += "onlyFreeItems=" + encodeURIComponent("" + onlyFreeItems) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetEditionComboboxItems(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetEditionComboboxItems(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processGetEditionComboboxItems = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_22 = resultData200; _i < resultData200_22.length; _i++) {
                        var item = resultData200_22[_i];
                        result200.push(SubscribableEditionComboboxItemDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    EditionServiceProxy.prototype.getEditionForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/GetEditionForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetEditionForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetEditionForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processGetEditionForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetEditionEditOutput.fromJS(resultData200) : new GetEditionEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    EditionServiceProxy.prototype.getEditions = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/GetEditions";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetEditions(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetEditions(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processGetEditions = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfEditionListDto.fromJS(resultData200) : new ListResultDtoOfEditionListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    EditionServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    EditionServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_23 = resultData200; _i < resultData200_23.length; _i++) {
                        var item = resultData200_23[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param editionId (optional)
     * @return Success
     */
    EditionServiceProxy.prototype.getTenantCount = function (editionId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/GetTenantCount?";
        if (editionId !== undefined)
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetTenantCount(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetTenantCount(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processGetTenantCount = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    EditionServiceProxy.prototype.moveTenantsToAnotherEdition = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Edition/MoveTenantsToAnotherEdition";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processMoveTenantsToAnotherEdition(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processMoveTenantsToAnotherEdition(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EditionServiceProxy.prototype.processMoveTenantsToAnotherEdition = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    EditionServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], EditionServiceProxy);
    return EditionServiceProxy;
}());
exports.EditionServiceProxy = EditionServiceProxy;
var EnumsServiceProxy = /** @class */ (function () {
    function EnumsServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    EnumsServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Enums/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EnumsServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    EnumsServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Enums/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EnumsServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_24 = resultData200; _i < resultData200_24.length; _i++) {
                        var item = resultData200_24[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    EnumsServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], EnumsServiceProxy);
    return EnumsServiceProxy;
}());
exports.EnumsServiceProxy = EnumsServiceProxy;
var EpplusExcelExporterBaseServiceProxy = /** @class */ (function () {
    function EpplusExcelExporterBaseServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    EpplusExcelExporterBaseServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/EpplusExcelExporterBase/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EpplusExcelExporterBaseServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    EpplusExcelExporterBaseServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/EpplusExcelExporterBase/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    EpplusExcelExporterBaseServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_25 = resultData200; _i < resultData200_25.length; _i++) {
                        var item = resultData200_25[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    EpplusExcelExporterBaseServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], EpplusExcelExporterBaseServiceProxy);
    return EpplusExcelExporterBaseServiceProxy;
}());
exports.EpplusExcelExporterBaseServiceProxy = EpplusExcelExporterBaseServiceProxy;
var GateRecordServiceProxy = /** @class */ (function () {
    function GateRecordServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除GateRecord的方法
     * @param input (optional)
     * @return Success
     */
    GateRecordServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改GateRecord的公共方法
     * @param input (optional)
     * @return Success
     */
    GateRecordServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除GateRecord信息的方法
     * @param id (optional)
     * @return Success
     */
    GateRecordServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取GateRecordListDto信息
     * @param id (optional)
     * @return Success
     */
    GateRecordServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GateRecordListDto.fromJS(resultData200) : new GateRecordListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 GateRecord
     * @param id (optional)
     * @return Success
     */
    GateRecordServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetGateRecordForEditOutput.fromJS(resultData200) : new GetGateRecordForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    GateRecordServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取GateRecord的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    GateRecordServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfGateRecordListDto.fromJS(resultData200) : new PagedResultDtoOfGateRecordListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    GateRecordServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/GateRecord/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    GateRecordServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_26 = resultData200; _i < resultData200_26.length; _i++) {
                        var item = resultData200_26[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    GateRecordServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], GateRecordServiceProxy);
    return GateRecordServiceProxy;
}());
exports.GateRecordServiceProxy = GateRecordServiceProxy;
var HangfireServiceServiceProxy = /** @class */ (function () {
    function HangfireServiceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 加入队列
     * @param input (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.addEnqueueJob = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/AddEnqueueJob";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processAddEnqueueJob(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processAddEnqueueJob(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processAddEnqueueJob = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除普通作业
     * @param jobId (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.deleteJob = function (jobId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/DeleteJob?";
        if (jobId !== undefined)
            jobId && jobId.forEach(function (item) { url_ += "jobId=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteJob(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteJob(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processDeleteJob = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除周期性作业
     * @param jobId (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.deleteRecurringJob = function (jobId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/DeleteRecurringJob?";
        if (jobId !== undefined)
            jobId && jobId.forEach(function (item) { url_ += "jobId=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteRecurringJob(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteRecurringJob(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processDeleteRecurringJob = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取所有作业
     * @param jobState (optional)
     * @param queueName (optional)
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getAllJobs = function (jobState, queueName, filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetAllJobs?";
        if (jobState !== undefined)
            url_ += "jobState=" + encodeURIComponent("" + jobState) + "&";
        if (queueName !== undefined)
            url_ += "queueName=" + encodeURIComponent("" + queueName) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllJobs(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllJobs(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetAllJobs = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfHangFireStorageJob.fromJS(resultData200) : new PagedResultDtoOfHangFireStorageJob();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取所有周期性作业
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param filterText (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getAllRecurringJob = function (sorting, maxResultCount, skipCount, filterText) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetAllRecurringJob?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllRecurringJob(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllRecurringJob(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetAllRecurringJob = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RecurringResultList.fromJS(resultData200) : new RecurringResultList();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Dashboard仪表盘-数据
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getDashboardData = function (searchTimeType) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetDashboardData?";
        if (searchTimeType === undefined || searchTimeType === null)
            throw new Error("The parameter 'searchTimeType' must be defined and cannot be null.");
        else
            url_ += "searchTimeType=" + encodeURIComponent("" + searchTimeType) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetDashboardData(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetDashboardData(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetDashboardData = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DashboardIndexDetailDto.fromJS(resultData200) : new DashboardIndexDetailDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取统计数据
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getDashboardStatistics = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetDashboardStatistics";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetDashboardStatistics(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetDashboardStatistics(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetDashboardStatistics = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatisticsInfoDto.fromJS(resultData200) : new StatisticsInfoDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 查看作业详情信息
     * @param id (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getJobDetail = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetJobDetail?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetJobDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetJobDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetJobDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? HangfireJobDetailDto.fromJS(resultData200) : new HangfireJobDetailDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_27 = resultData200; _i < resultData200_27.length; _i++) {
                        var item = resultData200_27[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取重试的作业数据
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param filterText (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getRetriesJob = function (sorting, maxResultCount, skipCount, filterText) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetRetriesJob?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetRetriesJob(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetRetriesJob(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetRetriesJob = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RetriesResultList.fromJS(resultData200) : new RetriesResultList();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取所有服务
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.getServer = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/GetServer";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetServer(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetServer(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processGetServer = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ServerResultList.fromJS(resultData200) : new ServerResultList();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 重新加入队列
     * @param input (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.requeue = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/Requeue";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRequeue(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRequeue(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processRequeue = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 执行作业
     * @param input (optional)
     * @return Success
     */
    HangfireServiceServiceProxy.prototype.runRecurringJob = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HangfireService/RunRecurringJob";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRunRecurringJob(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRunRecurringJob(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HangfireServiceServiceProxy.prototype.processRunRecurringJob = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    HangfireServiceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], HangfireServiceServiceProxy);
    return HangfireServiceServiceProxy;
}());
exports.HangfireServiceServiceProxy = HangfireServiceServiceProxy;
var HostCachingServiceProxy = /** @class */ (function () {
    function HostCachingServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @return Success
     */
    HostCachingServiceProxy.prototype.clearAllCaches = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostCaching/ClearAllCaches";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processClearAllCaches(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processClearAllCaches(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostCachingServiceProxy.prototype.processClearAllCaches = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    HostCachingServiceProxy.prototype.clearCache = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostCaching/ClearCache";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processClearCache(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processClearCache(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostCachingServiceProxy.prototype.processClearCache = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    HostCachingServiceProxy.prototype.getAllCaches = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostCaching/GetAllCaches";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllCaches(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllCaches(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostCachingServiceProxy.prototype.processGetAllCaches = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfHostCacheDto.fromJS(resultData200) : new ListResultDtoOfHostCacheDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    HostCachingServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostCaching/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostCachingServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    HostCachingServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostCaching/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostCachingServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_28 = resultData200; _i < resultData200_28.length; _i++) {
                        var item = resultData200_28[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    HostCachingServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], HostCachingServiceProxy);
    return HostCachingServiceProxy;
}());
exports.HostCachingServiceProxy = HostCachingServiceProxy;
var HostSettingsServiceProxy = /** @class */ (function () {
    function HostSettingsServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @return Success
     */
    HostSettingsServiceProxy.prototype.getAllSettings = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllSettings(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllSettings(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostSettingsServiceProxy.prototype.processGetAllSettings = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? HostSettingsEditDto.fromJS(resultData200) : new HostSettingsEditDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    HostSettingsServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostSettings/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostSettingsServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    HostSettingsServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostSettings/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostSettingsServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_29 = resultData200; _i < resultData200_29.length; _i++) {
                        var item = resultData200_29[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    HostSettingsServiceProxy.prototype.sendTestEmail = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSendTestEmail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSendTestEmail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostSettingsServiceProxy.prototype.processSendTestEmail = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    HostSettingsServiceProxy.prototype.updateAllSettings = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/HostSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateAllSettings(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateAllSettings(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    HostSettingsServiceProxy.prototype.processUpdateAllSettings = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    HostSettingsServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], HostSettingsServiceProxy);
    return HostSettingsServiceProxy;
}());
exports.HostSettingsServiceProxy = HostSettingsServiceProxy;
var InvalidUserExporterServiceProxy = /** @class */ (function () {
    function InvalidUserExporterServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param userListDtos (optional)
     * @return Success
     */
    InvalidUserExporterServiceProxy.prototype.exportToFile = function (userListDtos) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/InvalidUserExporter/ExportToFile";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(userListDtos);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processExportToFile(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processExportToFile(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    InvalidUserExporterServiceProxy.prototype.processExportToFile = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    InvalidUserExporterServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/InvalidUserExporter/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    InvalidUserExporterServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    InvalidUserExporterServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/InvalidUserExporter/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    InvalidUserExporterServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_30 = resultData200; _i < resultData200_30.length; _i++) {
                        var item = resultData200_30[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    InvalidUserExporterServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], InvalidUserExporterServiceProxy);
    return InvalidUserExporterServiceProxy;
}());
exports.InvalidUserExporterServiceProxy = InvalidUserExporterServiceProxy;
var LanguageServiceProxy = /** @class */ (function () {
    function LanguageServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除
     * @param ids (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.batchDelete = function (ids) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(ids);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.createOrUpdateLanguage = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/CreateOrUpdateLanguage";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdateLanguage(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdateLanguage(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processCreateOrUpdateLanguage = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.deleteLanguage = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/DeleteLanguage?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteLanguage(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteLanguage(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processDeleteLanguage = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.getLanguageForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/GetLanguageForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetLanguageForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetLanguageForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processGetLanguageForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetLanguageForEditOutput.fromJS(resultData200) : new GetLanguageForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    LanguageServiceProxy.prototype.getLanguages = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/GetLanguages";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetLanguages(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetLanguages(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processGetLanguages = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetLanguagesOutput.fromJS(resultData200) : new GetLanguagesOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param sourceName 语言名称
     * @param baseLanguageName (optional) 原语言名称
     * @param targetLanguageName 目标语言名称
     * @param targetValueFilter (optional) 目标值过滤
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.getLanguageTexts = function (sourceName, baseLanguageName, targetLanguageName, targetValueFilter, filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/GetLanguageTexts?";
        if (sourceName === undefined || sourceName === null)
            throw new Error("The parameter 'sourceName' must be defined and cannot be null.");
        else
            url_ += "sourceName=" + encodeURIComponent("" + sourceName) + "&";
        if (baseLanguageName !== undefined)
            url_ += "baseLanguageName=" + encodeURIComponent("" + baseLanguageName) + "&";
        if (targetLanguageName === undefined || targetLanguageName === null)
            throw new Error("The parameter 'targetLanguageName' must be defined and cannot be null.");
        else
            url_ += "targetLanguageName=" + encodeURIComponent("" + targetLanguageName) + "&";
        if (targetValueFilter !== undefined)
            url_ += "targetValueFilter=" + encodeURIComponent("" + targetValueFilter) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetLanguageTexts(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetLanguageTexts(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processGetLanguageTexts = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfLanguageTextListDto.fromJS(resultData200) : new PagedResultDtoOfLanguageTextListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    LanguageServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_31 = resultData200; _i < resultData200_31.length; _i++) {
                        var item = resultData200_31[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.setDefaultLanguage = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/SetDefaultLanguage";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSetDefaultLanguage(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSetDefaultLanguage(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processSetDefaultLanguage = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 修改语言的文本内容
     * @param input (optional)
     * @return Success
     */
    LanguageServiceProxy.prototype.updateLanguageText = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Language/UpdateLanguageText";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateLanguageText(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateLanguageText(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    LanguageServiceProxy.prototype.processUpdateLanguageText = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    LanguageServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], LanguageServiceProxy);
    return LanguageServiceProxy;
}());
exports.LanguageServiceProxy = LanguageServiceProxy;
var MenuServiceProxy = /** @class */ (function () {
    function MenuServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Menu的方法
     * @param input (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Menu的公共方法
     * @param input (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Menu信息的方法
     * @param id (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取MenuListDto信息
     * @param id (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? MenuListDto.fromJS(resultData200) : new MenuListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Menu
     * @param id (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetMenuForEditOutput.fromJS(resultData200) : new GetMenuForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 查询菜单下拉树
     * @return Success
     */
    MenuServiceProxy.prototype.getMenuDropDown = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetMenuDropDown";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuDropDown(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuDropDown(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetMenuDropDown = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_32 = resultData200; _i < resultData200_32.length; _i++) {
                        var item = resultData200_32[_i];
                        result200.push(MenuDropDownDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    MenuServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 查询菜单树
     * @return Success
     */
    MenuServiceProxy.prototype.getMenuTree = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetMenuTree";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuTree(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuTree(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetMenuTree = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_33 = resultData200; _i < resultData200_33.length; _i++) {
                        var item = resultData200_33[_i];
                        result200.push(MenuTreeDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Menu的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfMenuListDto.fromJS(resultData200) : new PagedResultDtoOfMenuListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Menu的分页列表信息--Get方法
     * @param queryData (optional) MenuName,MenuCode,NavigateUrl,ParentId,IsEnabled
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.getPagedForGet = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetPagedForGet?";
        if (queryData !== undefined)
            url_ += "queryData=" + encodeURIComponent("" + queryData) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedForGet(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedForGet(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetPagedForGet = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfMenuListDto.fromJS(resultData200) : new PagedResultDtoOfMenuListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    MenuServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Menu/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    MenuServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_34 = resultData200; _i < resultData200_34.length; _i++) {
                        var item = resultData200_34[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    MenuServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], MenuServiceProxy);
    return MenuServiceProxy;
}());
exports.MenuServiceProxy = MenuServiceProxy;
var NotificationServiceProxy = /** @class */ (function () {
    function NotificationServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 删除通知
     * @param id (optional)
     * @return Success
     */
    NotificationServiceProxy.prototype.deleteNotification = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/DeleteNotification?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteNotification(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteNotification(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processDeleteNotification = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    NotificationServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    NotificationServiceProxy.prototype.getNotificationSettings = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/GetNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetNotificationSettings(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetNotificationSettings(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processGetNotificationSettings = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetNotificationSettingsOutput.fromJS(resultData200) : new GetNotificationSettingsOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param state (optional) 是否阅读枚举 0是未读 1是已经阅读
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    NotificationServiceProxy.prototype.getPagedUserNotifications = function (state, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/GetPagedUserNotificationsAsync?";
        if (state !== undefined)
            url_ += "state=" + encodeURIComponent("" + state) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedUserNotifications(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedUserNotifications(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processGetPagedUserNotifications = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetNotificationsOutput.fromJS(resultData200) : new GetNotificationsOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    NotificationServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_35 = resultData200; _i < resultData200_35.length; _i++) {
                        var item = resultData200_35[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    NotificationServiceProxy.prototype.makeAllUserNotificationsAsRead = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/MakeAllUserNotificationsAsRead";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processMakeAllUserNotificationsAsRead(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processMakeAllUserNotificationsAsRead(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processMakeAllUserNotificationsAsRead = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    NotificationServiceProxy.prototype.makeNotificationAsRead = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/MakeNotificationAsRead";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processMakeNotificationAsRead(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processMakeNotificationAsRead(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processMakeNotificationAsRead = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 更新消息设置
     * @param input (optional)
     * @return Success
     */
    NotificationServiceProxy.prototype.updateNotificationSettings = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Notification/UpdateNotificationSettings";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateNotificationSettings(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateNotificationSettings(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    NotificationServiceProxy.prototype.processUpdateNotificationSettings = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    NotificationServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], NotificationServiceProxy);
    return NotificationServiceProxy;
}());
exports.NotificationServiceProxy = NotificationServiceProxy;
var OrganizationUnitServiceProxy = /** @class */ (function () {
    function OrganizationUnitServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 添加角色 组织关联
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.addRoles = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddRoles";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processAddRoles(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processAddRoles(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processAddRoles = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.addUsers = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/AddUsers";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processAddUsers(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processAddUsers(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processAddUsers = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 批量从组织中移除角色
     * @param roleIds (optional)
     * @param organizationUnitId (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.batchRemoveRoleFromOrganizationUnit = function (roleIds, organizationUnitId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/BatchRemoveRoleFromOrganizationUnit?";
        if (organizationUnitId !== undefined)
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(roleIds);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchRemoveRoleFromOrganizationUnit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchRemoveRoleFromOrganizationUnit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processBatchRemoveRoleFromOrganizationUnit = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 批量从组织中移除用户
     * @param userIds (optional) 用户Id列表
     * @param organizationUnitId (optional) 组织机构Id
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.batchRemoveUserFromOrganizationUnit = function (userIds, organizationUnitId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/BatchRemoveUserFromOrganizationUnit?";
        if (organizationUnitId !== undefined)
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(userIds);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchRemoveUserFromOrganizationUnit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchRemoveUserFromOrganizationUnit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processBatchRemoveUserFromOrganizationUnit = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.create = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processCreate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? OrganizationUnitListDto.fromJS(resultData200) : new OrganizationUnitListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.findRoles = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindRoles";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processFindRoles(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processFindRoles(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processFindRoles = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.findUsers = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/FindUsers";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processFindUsers(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processFindUsers(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processFindUsers = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfNameValueDto.fromJS(resultData200) : new PagedResultDtoOfNameValueDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.getAllOrganizationUnitList = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetAllOrganizationUnitList";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllOrganizationUnitList(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllOrganizationUnitList(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processGetAllOrganizationUnitList = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfOrganizationUnitListDto.fromJS(resultData200) : new ListResultDtoOfOrganizationUnitListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取角色列表
     * @param id (optional)
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.getPagedOrganizationUnitRoles = function (id, filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetPagedOrganizationUnitRolesAsync?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedOrganizationUnitRoles(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedOrganizationUnitRoles(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processGetPagedOrganizationUnitRoles = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfOrganizationUnitRoleListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitRoleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.getPagedOrganizationUnitUsers = function (id, filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetPagedOrganizationUnitUsers?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedOrganizationUnitUsers(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedOrganizationUnitUsers(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processGetPagedOrganizationUnitUsers = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfOrganizationUnitUserListDto.fromJS(resultData200) : new PagedResultDtoOfOrganizationUnitUserListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_36 = resultData200; _i < resultData200_36.length; _i++) {
                        var item = resultData200_36[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.isInOrganizationUnit = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/IsInOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processIsInOrganizationUnit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processIsInOrganizationUnit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processIsInOrganizationUnit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.move = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Move";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processMove(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processMove(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processMove = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? OrganizationUnitListDto.fromJS(resultData200) : new OrganizationUnitListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除 角色 组织关联
     * @param roleId (optional)
     * @param organizationUnitId (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.removeRole = function (roleId, organizationUnitId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveRole?";
        if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        if (organizationUnitId !== undefined)
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRemoveRole(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRemoveRole(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processRemoveRole = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param userId (optional)
     * @param organizationUnitId (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.removeUser = function (userId, organizationUnitId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RemoveUser?";
        if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        if (organizationUnitId !== undefined)
            url_ += "organizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRemoveUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRemoveUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processRemoveUser = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 判断角色是否在当前组织
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.rolesIsInOrganizationUnit = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/RolesIsInOrganizationUnit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRolesIsInOrganizationUnit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRolesIsInOrganizationUnit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processRolesIsInOrganizationUnit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    OrganizationUnitServiceProxy.prototype.update = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/OrganizationUnit/Update";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrganizationUnitServiceProxy.prototype.processUpdate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? OrganizationUnitListDto.fromJS(resultData200) : new OrganizationUnitListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    OrganizationUnitServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], OrganizationUnitServiceProxy);
    return OrganizationUnitServiceProxy;
}());
exports.OrganizationUnitServiceProxy = OrganizationUnitServiceProxy;
var PayMethodServiceProxy = /** @class */ (function () {
    function PayMethodServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除PayMethod的方法
     * @param input (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改PayMethod的公共方法
     * @param input (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除PayMethod信息的方法
     * @param id (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取PayMethodListDto信息
     * @param id (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PayMethodListDto.fromJS(resultData200) : new PayMethodListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 PayMethod
     * @param id (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetPayMethodForEditOutput.fromJS(resultData200) : new GetPayMethodForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    PayMethodServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取PayMethod的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfPayMethodListDto.fromJS(resultData200) : new PagedResultDtoOfPayMethodListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PayMethod/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_37 = resultData200; _i < resultData200_37.length; _i++) {
                        var item = resultData200_37[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 支付方式统计接口
     * @param queryData (optional) PayMethodId, CreationTime
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param routeId (optional)
     * @param boatId (optional)
     * @param ticketId (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount, routeId, boatId, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/PayMethod/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (routeId !== undefined)
            url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
        if (boatId !== undefined)
            url_ += "boatId=" + encodeURIComponent("" + boatId) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfGetPayMethodResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfGetPayMethodResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 支付方式统计接口——详细
     * @param paymethodId (optional)
     * @return Success
     */
    PayMethodServiceProxy.prototype.payMethodStatDetail = function (paymethodId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/PayMethod/PayMethodStatDetail?";
        if (paymethodId !== undefined)
            url_ += "paymethodId=" + encodeURIComponent("" + paymethodId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processPayMethodStatDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processPayMethodStatDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PayMethodServiceProxy.prototype.processPayMethodStatDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_38 = resultData200; _i < resultData200_38.length; _i++) {
                        var item = resultData200_38[_i];
                        result200.push(AccountDetailDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    PayMethodServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], PayMethodServiceProxy);
    return PayMethodServiceProxy;
}());
exports.PayMethodServiceProxy = PayMethodServiceProxy;
var PermissionServiceProxy = /** @class */ (function () {
    function PermissionServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @return Success
     */
    PermissionServiceProxy.prototype.getAllPermissions = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissions";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllPermissions(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllPermissions(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PermissionServiceProxy.prototype.processGetAllPermissions = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfFlatPermissionWithLevelDto.fromJS(resultData200) : new ListResultDtoOfFlatPermissionWithLevelDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    PermissionServiceProxy.prototype.getAllPermissionsTree = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Permission/GetAllPermissionsTree";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllPermissionsTree(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllPermissionsTree(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PermissionServiceProxy.prototype.processGetAllPermissionsTree = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfTreePermissionDto.fromJS(resultData200) : new ListResultDtoOfTreePermissionDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    PermissionServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Permission/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PermissionServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    PermissionServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Permission/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PermissionServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_39 = resultData200; _i < resultData200_39.length; _i++) {
                        var item = resultData200_39[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    PermissionServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], PermissionServiceProxy);
    return PermissionServiceProxy;
}());
exports.PermissionServiceProxy = PermissionServiceProxy;
var PowerServiceProxy = /** @class */ (function () {
    function PowerServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量增加权限
     * @param menuId (optional) 菜单Id
     * @param powerCodeList (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.batchCreate = function (menuId, powerCodeList) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/BatchCreate?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(powerCodeList);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchCreate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchCreate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processBatchCreate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 批量删除Power的方法
     * @param input (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Power的公共方法
     * @param input (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Power信息的方法
     * @param id (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取PowerListDto信息
     * @param id (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PowerListDto.fromJS(resultData200) : new PowerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Power
     * @param id (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetPowerForEditOutput.fromJS(resultData200) : new GetPowerForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    PowerServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Power的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfPowerListDto.fromJS(resultData200) : new PagedResultDtoOfPowerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    PowerServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Power/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_40 = resultData200; _i < resultData200_40.length; _i++) {
                        var item = resultData200_40[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    PowerServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], PowerServiceProxy);
    return PowerServiceProxy;
}());
exports.PowerServiceProxy = PowerServiceProxy;
var PowerRoleServiceProxy = /** @class */ (function () {
    function PowerRoleServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 根据角色ID修改权限
     * @param roleId (optional) 角色ID
     * @param powerIdList (optional) 权限ID列表
     * @return Success
     */
    PowerRoleServiceProxy.prototype.batchAddOrUpdate = function (roleId, powerIdList) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/BatchAddOrUpdate?";
        if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(powerIdList);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchAddOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchAddOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processBatchAddOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 批量删除PowerRole的方法
     * @param input (optional)
     * @return Success
     */
    PowerRoleServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改PowerRole的公共方法
     * @param input (optional)
     * @return Success
     */
    PowerRoleServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除PowerRole信息的方法
     * @param id (optional)
     * @return Success
     */
    PowerRoleServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取PowerRoleListDto信息
     * @param id (optional)
     * @return Success
     */
    PowerRoleServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PowerRoleListDto.fromJS(resultData200) : new PowerRoleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 PowerRole
     * @param id (optional)
     * @return Success
     */
    PowerRoleServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetPowerRoleForEditOutput.fromJS(resultData200) : new GetPowerRoleForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    PowerRoleServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取PowerRole的分页列表信息
     * @param queryData (optional) User.XX,Branch.XX
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    PowerRoleServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfPowerRoleListDto.fromJS(resultData200) : new PagedResultDtoOfPowerRoleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    PowerRoleServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_41 = resultData200; _i < resultData200_41.length; _i++) {
                        var item = resultData200_41[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据角色ID查询权限信息
    IsCheck表示是否勾选
     * @param roleId (optional) 角色ID
     * @return Success
     */
    PowerRoleServiceProxy.prototype.getPowerRoleListById = function (roleId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PowerRole/GetPowerRoleListById?";
        if (roleId !== undefined)
            url_ += "roleId=" + encodeURIComponent("" + roleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerRoleListById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerRoleListById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PowerRoleServiceProxy.prototype.processGetPowerRoleListById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfPowerListDto.fromJS(resultData200) : new PagedResultDtoOfPowerListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    PowerRoleServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], PowerRoleServiceProxy);
    return PowerRoleServiceProxy;
}());
exports.PowerRoleServiceProxy = PowerRoleServiceProxy;
var PriceAuditServiceProxy = /** @class */ (function () {
    function PriceAuditServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除PriceAudit的方法
     * @param input (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改PriceAudit的公共方法
     * @param input (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除PriceAudit信息的方法
     * @param id (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取PriceAuditListDto信息
     * @param id (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PriceAuditListDto.fromJS(resultData200) : new PriceAuditListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 PriceAudit
     * @param id (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetPriceAuditForEditOutput.fromJS(resultData200) : new GetPriceAuditForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    PriceAuditServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取PriceAudit的分页列表信息——票总票价审核
     * @param input (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfPriceAuditListDto.fromJS(resultData200) : new PagedResultDtoOfPriceAuditListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_42 = resultData200; _i < resultData200_42.length; _i++) {
                        var item = resultData200_42[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 驳回重改
     * @param input (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.updateRejecteAudit = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/UpdateRejecteAudit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateRejecteAudit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateRejecteAudit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processUpdateRejecteAudit = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 审核成功
     * @param input (optional)
     * @return Success
     */
    PriceAuditServiceProxy.prototype.updateThroughAudit = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/PriceAudit/UpdateThroughAudit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateThroughAudit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateThroughAudit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    PriceAuditServiceProxy.prototype.processUpdateThroughAudit = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    PriceAuditServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], PriceAuditServiceProxy);
    return PriceAuditServiceProxy;
}());
exports.PriceAuditServiceProxy = PriceAuditServiceProxy;
var ProfileServiceProxy = /** @class */ (function () {
    function ProfileServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param input (optional)
     * @return Success
     */
    ProfileServiceProxy.prototype.changeLanguage = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/ChangeLanguage";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processChangeLanguage(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processChangeLanguage(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processChangeLanguage = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    ProfileServiceProxy.prototype.changePassword = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processChangePassword(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processChangePassword(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processChangePassword = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除用户头像
     * @param profilePictureId (optional) 头像ID
     * @return Success
     */
    ProfileServiceProxy.prototype.deleteProfilePictureById = function (profilePictureId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/DeleteProfilePictureById?";
        if (profilePictureId !== undefined)
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteProfilePictureById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteProfilePictureById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processDeleteProfilePictureById = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取当前的个人信息
     * @return Success
     */
    ProfileServiceProxy.prototype.getCurrentUserProfileForEdit = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/GetCurrentUserProfileForEdit";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetCurrentUserProfileForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetCurrentUserProfileForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processGetCurrentUserProfileForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? CurrentUserProfileEditDto.fromJS(resultData200) : new CurrentUserProfileEditDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ProfileServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ProfileServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_43 = resultData200; _i < resultData200_43.length; _i++) {
                        var item = resultData200_43[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param profilePictureId (optional)
     * @return Success
     */
    ProfileServiceProxy.prototype.getProfilePictureById = function (profilePictureId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/GetProfilePictureByIdAsync?";
        if (profilePictureId !== undefined)
            url_ += "profilePictureId=" + encodeURIComponent("" + profilePictureId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetProfilePictureById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetProfilePictureById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processGetProfilePictureById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetProfilePictureOutputDto.fromJS(resultData200) : new GetProfilePictureOutputDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    ProfileServiceProxy.prototype.updateCurrentUserProfile = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/UpdateCurrentUserProfile";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateCurrentUserProfile(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateCurrentUserProfile(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processUpdateCurrentUserProfile = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    ProfileServiceProxy.prototype.updateProfilePicture = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Profile/UpdateProfilePictureAsync";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateProfilePicture(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateProfilePicture(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ProfileServiceProxy.prototype.processUpdateProfilePicture = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ProfileServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ProfileServiceProxy);
    return ProfileServiceProxy;
}());
exports.ProfileServiceProxy = ProfileServiceProxy;
var RechargeRecordServiceProxy = /** @class */ (function () {
    function RechargeRecordServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除RechargeRecord的方法
     * @param input (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改RechargeRecord的公共方法
     * @param input (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除RechargeRecord信息的方法
     * @param id (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取RechargeRecordListDto信息
     * @param id (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RechargeRecordListDto.fromJS(resultData200) : new RechargeRecordListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 RechargeRecord
     * @param id (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetRechargeRecordForEditOutput.fromJS(resultData200) : new GetRechargeRecordForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取RechargeRecord的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfRechargeRecordListDto.fromJS(resultData200) : new PagedResultDtoOfRechargeRecordListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取RechargeRecord的分页列表信息--Post方法
     * @param input (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.getPagedForPost = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/GetPagedForPost";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedForPost(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedForPost(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processGetPagedForPost = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfRechargeRecordListDto.fromJS(resultData200) : new PagedResultDtoOfRechargeRecordListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    RechargeRecordServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/RechargeRecord/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RechargeRecordServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_44 = resultData200; _i < resultData200_44.length; _i++) {
                        var item = resultData200_44[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    RechargeRecordServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], RechargeRecordServiceProxy);
    return RechargeRecordServiceProxy;
}());
exports.RechargeRecordServiceProxy = RechargeRecordServiceProxy;
var RoleServiceProxy = /** @class */ (function () {
    function RoleServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除角色
     * @param ids (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.batchDelete = function (ids) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/BatchDeleteAsync";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(ids);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 服务于前端RoleComboxComponent 组件信息，
     * @param permission (optional) 权限名称
     * @return Success
     */
    RoleServiceProxy.prototype.getAll = function (permission) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/GetAll?";
        if (permission !== undefined)
            url_ += "permission=" + encodeURIComponent("" + permission) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAll(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAll(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfRoleListDto.fromJS(resultData200) : new ListResultDtoOfRoleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    RoleServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param permissionNames (optional) 权限名称
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.getPaged = function (permissionNames, filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/GetPaged?";
        if (permissionNames !== undefined)
            permissionNames && permissionNames.forEach(function (item) { url_ += "permissionNames=" + encodeURIComponent("" + item) + "&"; });
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfRoleListDto.fromJS(resultData200) : new PagedResultDtoOfRoleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_45 = resultData200; _i < resultData200_45.length; _i++) {
                        var item = resultData200_45[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.getRoleForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/GetRoleForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetRoleForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetRoleForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processGetRoleForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetRoleForEditOutput.fromJS(resultData200) : new GetRoleForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    RoleServiceProxy.prototype.updatePermissions = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Role/UpdatePermissions";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdatePermissions(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdatePermissions(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RoleServiceProxy.prototype.processUpdatePermissions = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    RoleServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], RoleServiceProxy);
    return RoleServiceProxy;
}());
exports.RoleServiceProxy = RoleServiceProxy;
var RouteServiceProxy = /** @class */ (function () {
    function RouteServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Route的方法
     * @param input (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Route的公共方法
     * @param input (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Route信息的方法
     * @param id (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取RouteListDto信息
     * @param id (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RouteListDto.fromJS(resultData200) : new RouteListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Route
     * @param id (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetRouteForEditOutput.fromJS(resultData200) : new GetRouteForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    RouteServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Route的分页列表信息
     * @param input (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfRouteListDto.fromJS(resultData200) : new PagedResultDtoOfRouteListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_46 = resultData200; _i < resultData200_46.length; _i++) {
                        var item = resultData200_46[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 导出Route为excel表,等待开发。
     * @param file (optional)
     * @return Success
     */
    RouteServiceProxy.prototype.importRoute = function (file) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Route/ImportRoute";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processImportRoute(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processImportRoute(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    RouteServiceProxy.prototype.processImportRoute = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExcelResultDto.fromJS(resultData200) : new ExcelResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    RouteServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], RouteServiceProxy);
    return RouteServiceProxy;
}());
exports.RouteServiceProxy = RouteServiceProxy;
var ScenicSpotServiceProxy = /** @class */ (function () {
    function ScenicSpotServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除ScenicSpot的方法
     * @param input (optional)
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改ScenicSpot的公共方法
     * @param input (optional)
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除ScenicSpot信息的方法
     * @param id (optional)
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取ScenicSpotListDto信息
     * @param id (optional)
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ScenicSpotListDto.fromJS(resultData200) : new ScenicSpotListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 ScenicSpot
     * @param id (optional)
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetScenicSpotForEditOutput.fromJS(resultData200) : new GetScenicSpotForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取ScenicSpot的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfScenicSpotListDto.fromJS(resultData200) : new PagedResultDtoOfScenicSpotListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ScenicSpotServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/ScenicSpot/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScenicSpotServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_47 = resultData200; _i < resultData200_47.length; _i++) {
                        var item = resultData200_47[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ScenicSpotServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ScenicSpotServiceProxy);
    return ScenicSpotServiceProxy;
}());
exports.ScenicSpotServiceProxy = ScenicSpotServiceProxy;
var ScheduleServiceProxy = /** @class */ (function () {
    function ScheduleServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Schedule的方法
     * @param input (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Schedule的公共方法
     * @param input (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Schedule信息的方法
     * @param id (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取ScheduleListDto信息
     * @param id (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ScheduleListDto.fromJS(resultData200) : new ScheduleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Schedule
     * @param id (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetScheduleForEditOutput.fromJS(resultData200) : new GetScheduleForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    ScheduleServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Schedule的分页列表信息
     * @param input (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfScheduleListDto.fromJS(resultData200) : new PagedResultDtoOfScheduleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Schedule的分页列表信息--Post方法
     * @param input (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.getPagedForPost = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/GetPagedForPost";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedForPost(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedForPost(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processGetPagedForPost = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfScheduleListDto.fromJS(resultData200) : new PagedResultDtoOfScheduleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_48 = resultData200; _i < resultData200_48.length; _i++) {
                        var item = resultData200_48[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 从Excel表导入数据
     * @param file (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.importSchedule = function (file) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/ImportSchedule";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processImportSchedule(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processImportSchedule(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processImportSchedule = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExcelResultDto.fromJS(resultData200) : new ExcelResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 驳回重改
     * @param input (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.updateRejecteAudit = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/UpdateRejecteAudit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateRejecteAudit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateRejecteAudit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processUpdateRejecteAudit = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 审核成功
     * @param input (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.updateThroughAudit = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Schedule/UpdateThroughAudit";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateThroughAudit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateThroughAudit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processUpdateThroughAudit = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 航线统计
     * @param queryData (optional) CreationTime
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param routeId (optional)
     * @param boatId (optional)
     * @param ticketId (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount, routeId, boatId, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Schedule/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (routeId !== undefined)
            url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
        if (boatId !== undefined)
            url_ += "boatId=" + encodeURIComponent("" + boatId) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfScheduleResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfScheduleResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 航线统计——详情
     * @param routeId (optional)
     * @return Success
     */
    ScheduleServiceProxy.prototype.scheduleDetailStat = function (routeId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Schedule/ScheduleDetailStat?";
        if (routeId !== undefined)
            url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processScheduleDetailStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processScheduleDetailStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleServiceProxy.prototype.processScheduleDetailStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfScheduleDetailResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfScheduleDetailResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ScheduleServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ScheduleServiceProxy);
    return ScheduleServiceProxy;
}());
exports.ScheduleServiceProxy = ScheduleServiceProxy;
var SessionServiceProxy = /** @class */ (function () {
    function SessionServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @return Success
     */
    SessionServiceProxy.prototype.getCurrentLoginInformations = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetCurrentLoginInformations(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetCurrentLoginInformations(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SessionServiceProxy.prototype.processGetCurrentLoginInformations = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    SessionServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Session/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SessionServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    SessionServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Session/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SessionServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_49 = resultData200; _i < resultData200_49.length; _i++) {
                        var item = resultData200_49[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    SessionServiceProxy.prototype.getUserConfigurations = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Session/GetUserConfigurations";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetUserConfigurations(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetUserConfigurations(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SessionServiceProxy.prototype.processGetUserConfigurations = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AbpUserConfigurationDto.fromJS(resultData200) : new AbpUserConfigurationDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    SessionServiceProxy.prototype.updateUserSignInToken = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Session/UpdateUserSignInToken";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateUserSignInToken(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateUserSignInToken(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SessionServiceProxy.prototype.processUpdateUserSignInToken = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? UpdateUserSignInTokenOutput.fromJS(resultData200) : new UpdateUserSignInTokenOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    SessionServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], SessionServiceProxy);
    return SessionServiceProxy;
}());
exports.SessionServiceProxy = SessionServiceProxy;
var SettingsAppServiceBaseServiceProxy = /** @class */ (function () {
    function SettingsAppServiceBaseServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    SettingsAppServiceBaseServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/SettingsAppServiceBase/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SettingsAppServiceBaseServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    SettingsAppServiceBaseServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/SettingsAppServiceBase/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SettingsAppServiceBaseServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_50 = resultData200; _i < resultData200_50.length; _i++) {
                        var item = resultData200_50[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    SettingsAppServiceBaseServiceProxy.prototype.sendTestEmail = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/SettingsAppServiceBase/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSendTestEmail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSendTestEmail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SettingsAppServiceBaseServiceProxy.prototype.processSendTestEmail = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    SettingsAppServiceBaseServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], SettingsAppServiceBaseServiceProxy);
    return SettingsAppServiceBaseServiceProxy;
}());
exports.SettingsAppServiceBaseServiceProxy = SettingsAppServiceBaseServiceProxy;
var SourceServiceProxy = /** @class */ (function () {
    function SourceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Source的方法
     * @param input (optional)
     * @return Success
     */
    SourceServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Source的公共方法
     * @param input (optional)
     * @return Success
     */
    SourceServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Source信息的方法
     * @param id (optional)
     * @return Success
     */
    SourceServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取SourceListDto信息
     * @param id (optional)
     * @return Success
     */
    SourceServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SourceListDto.fromJS(resultData200) : new SourceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Source
     * @param id (optional)
     * @return Success
     */
    SourceServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetSourceForEditOutput.fromJS(resultData200) : new GetSourceForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    SourceServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Source的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    SourceServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfSourceListDto.fromJS(resultData200) : new PagedResultDtoOfSourceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    SourceServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Source/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SourceServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_51 = resultData200; _i < resultData200_51.length; _i++) {
                        var item = resultData200_51[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    SourceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], SourceServiceProxy);
    return SourceServiceProxy;
}());
exports.SourceServiceProxy = SourceServiceProxy;
var TenantServiceProxy = /** @class */ (function () {
    function TenantServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param input (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.create = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/Create";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processCreate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TenantEditDto.fromJS(resultData200) : new TenantEditDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TenantServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param subscriptionStart (optional)
     * @param subscriptionEnd (optional)
     * @param creationDateStart (optional)
     * @param creationDateEnd (optional)
     * @param editionId (optional)
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.getPaged = function (subscriptionStart, subscriptionEnd, creationDateStart, creationDateEnd, editionId, filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetPaged?";
        if (subscriptionStart !== undefined)
            url_ += "subscriptionStart=" + encodeURIComponent(subscriptionStart ? "" + subscriptionStart.toJSON() : "") + "&";
        if (subscriptionEnd !== undefined)
            url_ += "subscriptionEnd=" + encodeURIComponent(subscriptionEnd ? "" + subscriptionEnd.toJSON() : "") + "&";
        if (creationDateStart !== undefined)
            url_ += "creationDateStart=" + encodeURIComponent(creationDateStart ? "" + creationDateStart.toJSON() : "") + "&";
        if (creationDateEnd !== undefined)
            url_ += "creationDateEnd=" + encodeURIComponent(creationDateEnd ? "" + creationDateEnd.toJSON() : "") + "&";
        if (editionId !== undefined)
            url_ += "editionId=" + encodeURIComponent("" + editionId) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTenantListDto.fromJS(resultData200) : new PagedResultDtoOfTenantListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_52 = resultData200; _i < resultData200_52.length; _i++) {
                        var item = resultData200_52[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.getTenantFeaturesForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantFeaturesForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetTenantFeaturesForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetTenantFeaturesForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processGetTenantFeaturesForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTenantFeaturesEditOutput.fromJS(resultData200) : new GetTenantFeaturesEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.resetTenantSpecificFeatures = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/ResetTenantSpecificFeatures";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processResetTenantSpecificFeatures(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processResetTenantSpecificFeatures(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processResetTenantSpecificFeatures = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.unlockTenantAdmin = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/UnlockTenantAdmin";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUnlockTenantAdmin(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUnlockTenantAdmin(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processUnlockTenantAdmin = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.update = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/Update";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    TenantServiceProxy.prototype.updateTenantFeatures = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Tenant/UpdateTenantFeatures";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateTenantFeatures(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateTenantFeatures(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantServiceProxy.prototype.processUpdateTenantFeatures = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TenantServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TenantServiceProxy);
    return TenantServiceProxy;
}());
exports.TenantServiceProxy = TenantServiceProxy;
var TenantRegistrationServiceProxy = /** @class */ (function () {
    function TenantRegistrationServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TenantRegistrationServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantRegistrationServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TenantRegistrationServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantRegistration/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantRegistrationServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_53 = resultData200; _i < resultData200_53.length; _i++) {
                        var item = resultData200_53[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 注册租户信息
     * @param input (optional)
     * @return Success
     */
    TenantRegistrationServiceProxy.prototype.registerTenant = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantRegistration/RegisterTenantAsync";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRegisterTenant(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRegisterTenant(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantRegistrationServiceProxy.prototype.processRegisterTenant = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RegisterTenantResultDto.fromJS(resultData200) : new RegisterTenantResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TenantRegistrationServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TenantRegistrationServiceProxy);
    return TenantRegistrationServiceProxy;
}());
exports.TenantRegistrationServiceProxy = TenantRegistrationServiceProxy;
var TenantSettingsServiceProxy = /** @class */ (function () {
    function TenantSettingsServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @return Success
     */
    TenantSettingsServiceProxy.prototype.clearCustomCss = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearCustomCss";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processClearCustomCss(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processClearCustomCss(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantSettingsServiceProxy.prototype.processClearCustomCss = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    TenantSettingsServiceProxy.prototype.clearLogo = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantSettings/ClearLogo";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processClearLogo(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processClearLogo(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantSettingsServiceProxy.prototype.processClearLogo = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取所有设置
     * @return Success
     */
    TenantSettingsServiceProxy.prototype.getAllSettings = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantSettings/GetAllSettings";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetAllSettings(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetAllSettings(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantSettingsServiceProxy.prototype.processGetAllSettings = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TenantSettingsEditDto.fromJS(resultData200) : new TenantSettingsEditDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TenantSettingsServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantSettings/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantSettingsServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TenantSettingsServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantSettings/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantSettingsServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_54 = resultData200; _i < resultData200_54.length; _i++) {
                        var item = resultData200_54[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    TenantSettingsServiceProxy.prototype.sendTestEmail = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantSettings/SendTestEmail";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSendTestEmail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSendTestEmail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantSettingsServiceProxy.prototype.processSendTestEmail = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 更新所有设置
     * @param input (optional)
     * @return Success
     */
    TenantSettingsServiceProxy.prototype.updateAllSettings = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TenantSettings/UpdateAllSettings";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdateAllSettings(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdateAllSettings(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TenantSettingsServiceProxy.prototype.processUpdateAllSettings = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TenantSettingsServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TenantSettingsServiceProxy);
    return TenantSettingsServiceProxy;
}());
exports.TenantSettingsServiceProxy = TenantSettingsServiceProxy;
var TicketServiceProxy = /** @class */ (function () {
    function TicketServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Ticket的方法
     * @param input (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Ticket的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Ticket信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketListDto.fromJS(resultData200) : new TicketListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Ticket
     * @param id (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketForEditOutput.fromJS(resultData200) : new GetTicketForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Ticket的分页列表信息
     * @param input (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketListDto.fromJS(resultData200) : new PagedResultDtoOfTicketListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.getPagedForSchedule = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/GetPagedForSchedule?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedForSchedule(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedForSchedule(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processGetPagedForSchedule = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketListDto.fromJS(resultData200) : new PagedResultDtoOfTicketListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_55 = resultData200; _i < resultData200_55.length; _i++) {
                        var item = resultData200_55[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 音频上传
     * @param file (optional)
     * @return Success
     */
    TicketServiceProxy.prototype.uploadAudio = function (file) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Ticket/UploadAudioAsync";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUploadAudio(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUploadAudio(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketServiceProxy.prototype.processUploadAudio = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? UploadAudioDto.fromJS(resultData200) : new UploadAudioDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketServiceProxy);
    return TicketServiceProxy;
}());
exports.TicketServiceProxy = TicketServiceProxy;
var TicketAccountServiceProxy = /** @class */ (function () {
    function TicketAccountServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Account的方法
     * @param input (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Account的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Account信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取AccountListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AccountListDto.fromJS(resultData200) : new AccountListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据Account ID 获取账单明细
     * @param accountId (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.getDetail = function (accountId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/GetDetail?";
        if (accountId !== undefined)
            url_ += "accountId=" + encodeURIComponent("" + accountId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processGetDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_56 = resultData200; _i < resultData200_56.length; _i++) {
                        var item = resultData200_56[_i];
                        result200.push(AccountDetailDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Account
     * @param id (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetAccountForEditOutput.fromJS(resultData200) : new GetAccountForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketAccountServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketAccount的分页列表信息
     * @param input (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfAccountListDto.fromJS(resultData200) : new PagedResultDtoOfAccountListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketAccount/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_57 = resultData200; _i < resultData200_57.length; _i++) {
                        var item = resultData200_57[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param activityId (optional)
     * @return Success
     */
    TicketAccountServiceProxy.prototype.ticketDetail = function (activityId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TicketAccount/TicketAccount/TicketDetail?";
        if (activityId !== undefined)
            url_ += "activityId=" + encodeURIComponent("" + activityId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processTicketDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processTicketDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketAccountServiceProxy.prototype.processTicketDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_58 = resultData200; _i < resultData200_58.length; _i++) {
                        var item = resultData200_58[_i];
                        result200.push(TicketDetailListDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketAccountServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketAccountServiceProxy);
    return TicketAccountServiceProxy;
}());
exports.TicketAccountServiceProxy = TicketAccountServiceProxy;
var TicketDetailServiceProxy = /** @class */ (function () {
    function TicketDetailServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketDetail的方法
     * @param input (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketDetail的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketDetail信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketDetailListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketDetailListDto.fromJS(resultData200) : new TicketDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketDetail
     * @param id (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketDetailForEditOutput.fromJS(resultData200) : new GetTicketDetailForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketDetailServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketDetail的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketDetailListDto.fromJS(resultData200) : new PagedResultDtoOfTicketDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_59 = resultData200; _i < resultData200_59.length; _i++) {
                        var item = resultData200_59[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 打印票据
     * @param ticketDetailIds (optional)
     * @return Success
     */
    TicketDetailServiceProxy.prototype.printTicketDetail = function (ticketDetailIds) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetail/PrintTicketDetail";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(ticketDetailIds);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processPrintTicketDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processPrintTicketDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailServiceProxy.prototype.processPrintTicketDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivityResultModel.fromJS(resultData200) : new ActivityResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketDetailServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketDetailServiceProxy);
    return TicketDetailServiceProxy;
}());
exports.TicketDetailServiceProxy = TicketDetailServiceProxy;
var TicketDetailHistoryServiceProxy = /** @class */ (function () {
    function TicketDetailHistoryServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketDetailHistory的方法
     * @param input (optional)
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketDetailHistory的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketDetailHistory信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketDetailHistoryListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketDetailHistoryListDto.fromJS(resultData200) : new TicketDetailHistoryListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketDetailHistory
     * @param id (optional)
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketDetailHistoryForEditOutput.fromJS(resultData200) : new GetTicketDetailHistoryForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketDetailHistory的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketDetailHistoryListDto.fromJS(resultData200) : new PagedResultDtoOfTicketDetailHistoryListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketDetailHistoryServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketDetailHistory/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketDetailHistoryServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_60 = resultData200; _i < resultData200_60.length; _i++) {
                        var item = resultData200_60[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketDetailHistoryServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketDetailHistoryServiceProxy);
    return TicketDetailHistoryServiceProxy;
}());
exports.TicketDetailHistoryServiceProxy = TicketDetailHistoryServiceProxy;
var TicketIntroduceServiceProxy = /** @class */ (function () {
    function TicketIntroduceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketIntroduce的方法
     * @param input (optional)
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketIntroduce的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketIntroduce信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketIntroduceListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketIntroduceListDto.fromJS(resultData200) : new TicketIntroduceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketIntroduce
     * @param id (optional)
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketIntroduceForEditOutput.fromJS(resultData200) : new GetTicketIntroduceForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketIntroduce的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketIntroduceListDto.fromJS(resultData200) : new PagedResultDtoOfTicketIntroduceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketIntroduceServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketIntroduce/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketIntroduceServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_61 = resultData200; _i < resultData200_61.length; _i++) {
                        var item = resultData200_61[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketIntroduceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketIntroduceServiceProxy);
    return TicketIntroduceServiceProxy;
}());
exports.TicketIntroduceServiceProxy = TicketIntroduceServiceProxy;
var TicketPriceServiceProxy = /** @class */ (function () {
    function TicketPriceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketPrice的方法
     * @param input (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketPrice的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketPrice信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketPriceListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketPriceListDto.fromJS(resultData200) : new TicketPriceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketPrice
     * @param id (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketPriceForEditOutput.fromJS(resultData200) : new GetTicketPriceForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketPriceServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketPrice的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketPriceListDto.fromJS(resultData200) : new PagedResultDtoOfTicketPriceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 航班审核
     * @param input (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.getPagedForSchedule = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/GetPagedForSchedule";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedForSchedule(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedForSchedule(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processGetPagedForSchedule = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketPriceListDto.fromJS(resultData200) : new PagedResultDtoOfTicketPriceListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketPriceServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_62 = resultData200; _i < resultData200_62.length; _i++) {
                        var item = resultData200_62[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 设置票型价格的启用状态
     * @param ticketPriceId (optional) 票型价格Id
     * @param isEnabled (optional) 启用状态
     * @return Success
     */
    TicketPriceServiceProxy.prototype.setPriceEnable = function (ticketPriceId, isEnabled) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketPrice/SetPriceEnable?";
        if (ticketPriceId !== undefined)
            url_ += "ticketPriceId=" + encodeURIComponent("" + ticketPriceId) + "&";
        if (isEnabled !== undefined)
            url_ += "isEnabled=" + encodeURIComponent("" + isEnabled) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSetPriceEnable(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSetPriceEnable(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketPriceServiceProxy.prototype.processSetPriceEnable = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketPriceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketPriceServiceProxy);
    return TicketPriceServiceProxy;
}());
exports.TicketPriceServiceProxy = TicketPriceServiceProxy;
var TicketRoleServiceProxy = /** @class */ (function () {
    function TicketRoleServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketRole的方法
     * @param input (optional)
     * @return Success
     */
    TicketRoleServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketRoleServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除信息
     * @param id (optional)
     * @return Success
     */
    TicketRoleServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketRoleListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketRoleServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketRoleListDto.fromJS(resultData200) : new TicketRoleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑
     * @param id (optional)
     * @return Success
     */
    TicketRoleServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketRoleForEditOutput.fromJS(resultData200) : new GetTicketRoleForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketRoleServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketRoleServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketRoleListDto.fromJS(resultData200) : new PagedResultDtoOfTicketRoleListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketRoleServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_63 = resultData200; _i < resultData200_63.length; _i++) {
                        var item = resultData200_63[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 导出为excel文件
     * @return Success
     */
    TicketRoleServiceProxy.prototype.getToExcelFile = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketRole/GetToExcelFile";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetToExcelFile(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetToExcelFile(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketRoleServiceProxy.prototype.processGetToExcelFile = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketRoleServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketRoleServiceProxy);
    return TicketRoleServiceProxy;
}());
exports.TicketRoleServiceProxy = TicketRoleServiceProxy;
var TicketScheduleEnableServiceProxy = /** @class */ (function () {
    function TicketScheduleEnableServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketScheduleEnable的方法
     * @param input (optional)
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketScheduleEnable的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketScheduleEnable信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketScheduleEnableListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketScheduleEnableListDto.fromJS(resultData200) : new TicketScheduleEnableListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketScheduleEnable
     * @param id (optional)
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketScheduleEnableForEditOutput.fromJS(resultData200) : new GetTicketScheduleEnableForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketScheduleEnable的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketScheduleEnableListDto.fromJS(resultData200) : new PagedResultDtoOfTicketScheduleEnableListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketScheduleEnableServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketScheduleEnable/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketScheduleEnableServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_64 = resultData200; _i < resultData200_64.length; _i++) {
                        var item = resultData200_64[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketScheduleEnableServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketScheduleEnableServiceProxy);
    return TicketScheduleEnableServiceProxy;
}());
exports.TicketScheduleEnableServiceProxy = TicketScheduleEnableServiceProxy;
var TicketStationServiceProxy = /** @class */ (function () {
    function TicketStationServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketStation的方法
     * @param input (optional)
     * @return Success
     */
    TicketStationServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketStation的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketStationServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketStation信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketStationServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketStationListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketStationServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketStationListDto.fromJS(resultData200) : new TicketStationListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketStation
     * @param id (optional)
     * @return Success
     */
    TicketStationServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketStationForEditOutput.fromJS(resultData200) : new GetTicketStationForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketStationServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketStation的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketStationServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketStationListDto.fromJS(resultData200) : new PagedResultDtoOfTicketStationListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketStationServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStation/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_65 = resultData200; _i < resultData200_65.length; _i++) {
                        var item = resultData200_65[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketStationServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketStationServiceProxy);
    return TicketStationServiceProxy;
}());
exports.TicketStationServiceProxy = TicketStationServiceProxy;
var TicketStationEnableServiceProxy = /** @class */ (function () {
    function TicketStationEnableServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketStationEnable的方法
     * @param input (optional)
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketStationEnable的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketStationEnable信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketStationEnableListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketStationEnableListDto.fromJS(resultData200) : new TicketStationEnableListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketStationEnable
     * @param id (optional)
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketStationEnableForEditOutput.fromJS(resultData200) : new GetTicketStationEnableForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketStationEnable的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketStationEnableListDto.fromJS(resultData200) : new PagedResultDtoOfTicketStationEnableListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketStationEnableServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketStationEnable/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketStationEnableServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_66 = resultData200; _i < resultData200_66.length; _i++) {
                        var item = resultData200_66[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketStationEnableServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketStationEnableServiceProxy);
    return TicketStationEnableServiceProxy;
}());
exports.TicketStationEnableServiceProxy = TicketStationEnableServiceProxy;
var TicketUserEnableServiceProxy = /** @class */ (function () {
    function TicketUserEnableServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TicketUserEnable的方法
     * @param input (optional)
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TicketUserEnable的公共方法
     * @param input (optional)
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TicketUserEnable信息的方法
     * @param id (optional)
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TicketUserEnableListDto信息
     * @param id (optional)
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TicketUserEnableListDto.fromJS(resultData200) : new TicketUserEnableListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TicketUserEnable
     * @param id (optional)
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTicketUserEnableForEditOutput.fromJS(resultData200) : new GetTicketUserEnableForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TicketUserEnable的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTicketUserEnableListDto.fromJS(resultData200) : new PagedResultDtoOfTicketUserEnableListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TicketUserEnableServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TicketUserEnable/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TicketUserEnableServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_67 = resultData200; _i < resultData200_67.length; _i++) {
                        var item = resultData200_67[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TicketUserEnableServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TicketUserEnableServiceProxy);
    return TicketUserEnableServiceProxy;
}());
exports.TicketUserEnableServiceProxy = TicketUserEnableServiceProxy;
var TimingServiceProxy = /** @class */ (function () {
    function TimingServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TimingServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Timing/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TimingServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TimingServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Timing/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TimingServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_68 = resultData200; _i < resultData200_68.length; _i++) {
                        var item = resultData200_68[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param selectedTimezoneId (optional)
     * @return Success
     */
    TimingServiceProxy.prototype.getTimezoneComboboxItems = function (selectedTimezoneId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Timing/GetTimezoneComboboxItems?";
        if (selectedTimezoneId !== undefined)
            url_ += "selectedTimezoneId=" + encodeURIComponent("" + selectedTimezoneId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetTimezoneComboboxItems(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetTimezoneComboboxItems(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TimingServiceProxy.prototype.processGetTimezoneComboboxItems = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_69 = resultData200; _i < resultData200_69.length; _i++) {
                        var item = resultData200_69[_i];
                        result200.push(ComboboxItemDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    TimingServiceProxy.prototype.getTimezones = function (defaultTimezoneScope) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Timing/GetTimezones?";
        if (defaultTimezoneScope === undefined || defaultTimezoneScope === null)
            throw new Error("The parameter 'defaultTimezoneScope' must be defined and cannot be null.");
        else
            url_ += "defaultTimezoneScope=" + encodeURIComponent("" + defaultTimezoneScope) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetTimezones(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetTimezones(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TimingServiceProxy.prototype.processGetTimezones = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfNameValueDto.fromJS(resultData200) : new ListResultDtoOfNameValueDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TimingServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TimingServiceProxy);
    return TimingServiceProxy;
}());
exports.TimingServiceProxy = TimingServiceProxy;
var TravelAgencyServiceProxy = /** @class */ (function () {
    function TravelAgencyServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TravelAgency的方法
     * @param input (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TravelAgency的公共方法
     * @param input (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TravelAgency信息的方法
     * @param id (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TravelAgencyListDto信息
     * @param id (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TravelAgencyListDto.fromJS(resultData200) : new TravelAgencyListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TravelAgency
     * @param id (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTravelAgencyForEditOutput.fromJS(resultData200) : new GetTravelAgencyForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TravelAgency的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTravelAgencyListDto.fromJS(resultData200) : new PagedResultDtoOfTravelAgencyListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TravelAgency的分页列表信息--Post方法
     * @param input (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.getPagedForPost = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/GetPagedForPost";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedForPost(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedForPost(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processGetPagedForPost = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTravelAgencyListDto.fromJS(resultData200) : new PagedResultDtoOfTravelAgencyListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelAgency/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_70 = resultData200; _i < resultData200_70.length; _i++) {
                        var item = resultData200_70[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 旅行社售票统计
     * @param queryData (optional) TravelAgencyId, CreationTime
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param routeId (optional)
     * @param boatId (optional)
     * @param ticketId (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount, routeId, boatId, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/TravelAgency/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (routeId !== undefined)
            url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
        if (boatId !== undefined)
            url_ += "boatId=" + encodeURIComponent("" + boatId) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfTravelAgencyResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfTravelAgencyResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 旅行社售票统计——详细
     * @param travelAgencyId (optional)
     * @return Success
     */
    TravelAgencyServiceProxy.prototype.orderSourceStatDetail = function (travelAgencyId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/TravelAgency/OrderSourceStatDetail?";
        if (travelAgencyId !== undefined)
            url_ += "travelAgencyId=" + encodeURIComponent("" + travelAgencyId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processOrderSourceStatDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processOrderSourceStatDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelAgencyServiceProxy.prototype.processOrderSourceStatDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_71 = resultData200; _i < resultData200_71.length; _i++) {
                        var item = resultData200_71[_i];
                        result200.push(AccountDetailDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TravelAgencyServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TravelAgencyServiceProxy);
    return TravelAgencyServiceProxy;
}());
exports.TravelAgencyServiceProxy = TravelAgencyServiceProxy;
var TravelTicketDetailServiceProxy = /** @class */ (function () {
    function TravelTicketDetailServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除TravelTicketDetail的方法
     * @param input (optional)
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改TravelTicketDetail的公共方法
     * @param input (optional)
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除TravelTicketDetail信息的方法
     * @param id (optional)
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取TravelTicketDetailListDto信息
     * @param id (optional)
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? TravelTicketDetailListDto.fromJS(resultData200) : new TravelTicketDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 TravelTicketDetail
     * @param id (optional)
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetTravelTicketDetailForEditOutput.fromJS(resultData200) : new GetTravelTicketDetailForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取TravelTicketDetail的分页列表信息
     * @param queryData (optional) DeviceCode,DeviceName,Port
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfTravelTicketDetailListDto.fromJS(resultData200) : new PagedResultDtoOfTravelTicketDetailListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    TravelTicketDetailServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/TravelTicketDetail/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TravelTicketDetailServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_72 = resultData200; _i < resultData200_72.length; _i++) {
                        var item = resultData200_72[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TravelTicketDetailServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TravelTicketDetailServiceProxy);
    return TravelTicketDetailServiceProxy;
}());
exports.TravelTicketDetailServiceProxy = TravelTicketDetailServiceProxy;
var UserServiceProxy = /** @class */ (function () {
    function UserServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除用户
     * @param ids (optional) 用户Id列表
     * @return Success
     */
    UserServiceProxy.prototype.batchDelete = function (ids) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(ids);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    UserServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    UserServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 修改用户信息
     * @param id (optional)
     * @return Success
     */
    UserServiceProxy.prototype.getForEditTree = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetForEditTree?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEditTree(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEditTree(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetForEditTree = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetUserForEditTreeOutput.fromJS(resultData200) : new GetUserForEditTreeOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    UserServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 分页获取所有用户
     * @param permission (optional) 权限
     * @param role (optional) 检索角色Id列表
     * @param isEmailConfirmed (optional) 是否已验证邮箱
     * @param isActive (optional) 是否已激活
     * @param onlyLockedUsers (optional) 仅被锁定的用户
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    UserServiceProxy.prototype.getPaged = function (permission, role, isEmailConfirmed, isActive, onlyLockedUsers, filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetPaged?";
        if (permission !== undefined)
            permission && permission.forEach(function (item) { url_ += "permission=" + encodeURIComponent("" + item) + "&"; });
        if (role !== undefined)
            role && role.forEach(function (item) { url_ += "role=" + encodeURIComponent("" + item) + "&"; });
        if (isEmailConfirmed !== undefined)
            url_ += "isEmailConfirmed=" + encodeURIComponent("" + isEmailConfirmed) + "&";
        if (isActive !== undefined)
            url_ += "isActive=" + encodeURIComponent("" + isActive) + "&";
        if (onlyLockedUsers !== undefined)
            url_ += "onlyLockedUsers=" + encodeURIComponent("" + onlyLockedUsers) + "&";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfUserListDto.fromJS(resultData200) : new PagedResultDtoOfUserListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 用户的权限编辑
     * @param id (optional)
     * @return Success
     */
    UserServiceProxy.prototype.getPermissionsTreeForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetPermissionsTreeForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPermissionsTreeForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPermissionsTreeForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetPermissionsTreeForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetUserPermissionsTreeForEditOutput.fromJS(resultData200) : new GetUserPermissionsTreeForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    UserServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_73 = resultData200; _i < resultData200_73.length; _i++) {
                        var item = resultData200_73[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    UserServiceProxy.prototype.getUserForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetUserForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetUserForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetUserForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetUserForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetUserForEditOutput.fromJS(resultData200) : new GetUserForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param id (optional)
     * @return Success
     */
    UserServiceProxy.prototype.getUserPermissionsForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetUserPermissionsForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetUserPermissionsForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetUserPermissionsForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetUserPermissionsForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetUserPermissionsForEditOutput.fromJS(resultData200) : new GetUserPermissionsForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取用户导出信息
     * @return Success
     */
    UserServiceProxy.prototype.getUsersToExcel = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/GetUsersToExcel";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetUsersToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetUsersToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processGetUsersToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    UserServiceProxy.prototype.resetPassword = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/ResetPassword";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processResetPassword(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processResetPassword(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processResetPassword = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    UserServiceProxy.prototype.resetSpecificPermissions = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/ResetSpecificPermissions";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processResetSpecificPermissions(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processResetSpecificPermissions(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processResetSpecificPermissions = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    UserServiceProxy.prototype.unlock = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/Unlock";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUnlock(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUnlock(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processUnlock = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    UserServiceProxy.prototype.updatePermissions = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/User/UpdatePermissions";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("put", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUpdatePermissions(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUpdatePermissions(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserServiceProxy.prototype.processUpdatePermissions = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    UserServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], UserServiceProxy);
    return UserServiceProxy;
}());
exports.UserServiceProxy = UserServiceProxy;
var UserLinkServiceProxy = /** @class */ (function () {
    function UserLinkServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param sorting (optional)
     * @return Success
     */
    UserLinkServiceProxy.prototype.getLinkedUsers = function (maxResultCount, skipCount, sorting) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLink/GetLinkedUsers?";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetLinkedUsers(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetLinkedUsers(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLinkServiceProxy.prototype.processGetLinkedUsers = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfLinkedUserDto.fromJS(resultData200) : new PagedResultDtoOfLinkedUserDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    UserLinkServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLink/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLinkServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    UserLinkServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLink/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLinkServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_74 = resultData200; _i < resultData200_74.length; _i++) {
                        var item = resultData200_74[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    UserLinkServiceProxy.prototype.getRecentlyUsedLinkedUsers = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLink/GetRecentlyUsedLinkedUsers";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetRecentlyUsedLinkedUsers(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetRecentlyUsedLinkedUsers(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLinkServiceProxy.prototype.processGetRecentlyUsedLinkedUsers = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfLinkedUserDto.fromJS(resultData200) : new ListResultDtoOfLinkedUserDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    UserLinkServiceProxy.prototype.linkToUser = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLink/LinkToUser";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processLinkToUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processLinkToUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLinkServiceProxy.prototype.processLinkToUser = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    UserLinkServiceProxy.prototype.unlinkUser = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLink/UnlinkUser";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processUnlinkUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processUnlinkUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLinkServiceProxy.prototype.processUnlinkUser = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    UserLinkServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], UserLinkServiceProxy);
    return UserLinkServiceProxy;
}());
exports.UserLinkServiceProxy = UserLinkServiceProxy;
var UserListExcelExporterServiceProxy = /** @class */ (function () {
    function UserListExcelExporterServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param userListDtos (optional)
     * @return Success
     */
    UserListExcelExporterServiceProxy.prototype.exportToExcel = function (userListDtos) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserListExcelExporter/ExportToExcel";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(userListDtos);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processExportToExcel(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processExportToExcel(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserListExcelExporterServiceProxy.prototype.processExportToExcel = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    UserListExcelExporterServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserListExcelExporter/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserListExcelExporterServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    UserListExcelExporterServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserListExcelExporter/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserListExcelExporterServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_75 = resultData200; _i < resultData200_75.length; _i++) {
                        var item = resultData200_75[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    UserListExcelExporterServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], UserListExcelExporterServiceProxy);
    return UserListExcelExporterServiceProxy;
}());
exports.UserListExcelExporterServiceProxy = UserListExcelExporterServiceProxy;
var UserLoginServiceProxy = /** @class */ (function () {
    function UserLoginServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    UserLoginServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLogin/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLoginServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    UserLoginServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLogin/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLoginServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_76 = resultData200; _i < resultData200_76.length; _i++) {
                        var item = resultData200_76[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    UserLoginServiceProxy.prototype.getRecentUserLoginAttempts = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/UserLogin/GetRecentUserLoginAttempts";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetRecentUserLoginAttempts(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetRecentUserLoginAttempts(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    UserLoginServiceProxy.prototype.processGetRecentUserLoginAttempts = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ListResultDtoOfUserLoginAttemptDto.fromJS(resultData200) : new ListResultDtoOfUserLoginAttemptDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    UserLoginServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], UserLoginServiceProxy);
    return UserLoginServiceProxy;
}());
exports.UserLoginServiceProxy = UserLoginServiceProxy;
var VerifiableSetServiceProxy = /** @class */ (function () {
    function VerifiableSetServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除VerifiableSet的方法
     * @param input (optional)
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改VerifiableSet的公共方法
     * @param input (optional)
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除VerifiableSet信息的方法
     * @param id (optional)
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取VerifiableSetListDto信息
     * @param id (optional)
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? VerifiableSetListDto.fromJS(resultData200) : new VerifiableSetListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 VerifiableSet
     * @param id (optional)
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetVerifiableSetForEditOutput.fromJS(resultData200) : new GetVerifiableSetForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取VerifiableSet的分页列表信息
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.getPaged = function (sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/GetPaged?";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfVerifiableSetListDto.fromJS(resultData200) : new PagedResultDtoOfVerifiableSetListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    VerifiableSetServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/VerifiableSet/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerifiableSetServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_77 = resultData200; _i < resultData200_77.length; _i++) {
                        var item = resultData200_77[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    VerifiableSetServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], VerifiableSetServiceProxy);
    return VerifiableSetServiceProxy;
}());
exports.VerifiableSetServiceProxy = VerifiableSetServiceProxy;
var WebSiteLogServiceProxy = /** @class */ (function () {
    function WebSiteLogServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 下载日志文件压缩包
     * @return Success
     */
    WebSiteLogServiceProxy.prototype.downloadWebLogs = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WebSiteLog/DownloadWebLogs";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDownloadWebLogs(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDownloadWebLogs(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WebSiteLogServiceProxy.prototype.processDownloadWebLogs = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? FileDto.fromJS(resultData200) : new FileDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取最新的网站日志信息
     * @return Success
     */
    WebSiteLogServiceProxy.prototype.getLatestWebLogs = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WebSiteLog/GetLatestWebLogs";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetLatestWebLogs(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetLatestWebLogs(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WebSiteLogServiceProxy.prototype.processGetLatestWebLogs = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetLatestWebLogsOutput.fromJS(resultData200) : new GetLatestWebLogsOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    WebSiteLogServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WebSiteLog/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WebSiteLogServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    WebSiteLogServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WebSiteLog/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WebSiteLogServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_78 = resultData200; _i < resultData200_78.length; _i++) {
                        var item = resultData200_78[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    WebSiteLogServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], WebSiteLogServiceProxy);
    return WebSiteLogServiceProxy;
}());
exports.WebSiteLogServiceProxy = WebSiteLogServiceProxy;
var WechatAppConfigServiceProxy = /** @class */ (function () {
    function WechatAppConfigServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除WechatAppConfig的方法
     * @param input (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改WechatAppConfig的公共方法
     * @param input (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除WechatAppConfig信息的方法
     * @param id (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取WechatAppConfigListDto信息
     * @param id (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? WechatAppConfigListDto.fromJS(resultData200) : new WechatAppConfigListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 WechatAppConfig
     * @param id (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetWechatAppConfigForEditOutput.fromJS(resultData200) : new GetWechatAppConfigForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取WechatAppConfig的分页列表信息
     * @param filterText (optional)
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.getPaged = function (filterText, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetPaged?";
        if (filterText !== undefined)
            url_ += "filterText=" + encodeURIComponent("" + filterText) + "&";
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfWechatAppConfigListDto.fromJS(resultData200) : new PagedResultDtoOfWechatAppConfigListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_79 = resultData200; _i < resultData200_79.length; _i++) {
                        var item = resultData200_79[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 将wechat app注入到容器,如果已注入则刷新注入
     * @param appId (optional)
     * @return Success
     */
    WechatAppConfigServiceProxy.prototype.registerWechatApp = function (appId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatAppConfig/RegisterWechatApp?";
        if (appId !== undefined)
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRegisterWechatApp(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRegisterWechatApp(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatAppConfigServiceProxy.prototype.processRegisterWechatApp = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    WechatAppConfigServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], WechatAppConfigServiceProxy);
    return WechatAppConfigServiceProxy;
}());
exports.WechatAppConfigServiceProxy = WechatAppConfigServiceProxy;
var WechatMediaServiceProxy = /** @class */ (function () {
    function WechatMediaServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @return Success
     */
    WechatMediaServiceProxy.prototype.createOtherrMaterial = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMedia/CreateOtherrMaterial";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOtherrMaterial(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOtherrMaterial(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMediaServiceProxy.prototype.processCreateOtherrMaterial = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param appId (optional)
     * @param mediaId (optional)
     * @return Success
     */
    WechatMediaServiceProxy.prototype.delete = function (appId, mediaId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMedia/Delete?";
        if (appId !== undefined)
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        if (mediaId !== undefined)
            url_ += "mediaId=" + encodeURIComponent("" + mediaId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMediaServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    WechatMediaServiceProxy.prototype.getImageTextMaterialPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMedia/GetImageTextMaterialPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetImageTextMaterialPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetImageTextMaterialPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMediaServiceProxy.prototype.processGetImageTextMaterialPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfMediaList_News_Item.fromJS(resultData200) : new PagedResultDtoOfMediaList_News_Item();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    WechatMediaServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMedia/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMediaServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param input (optional)
     * @return Success
     */
    WechatMediaServiceProxy.prototype.getOtherMaterialPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMedia/GetOtherMaterialPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetOtherMaterialPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetOtherMaterialPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMediaServiceProxy.prototype.processGetOtherMaterialPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfMediaList_Others_Item.fromJS(resultData200) : new PagedResultDtoOfMediaList_Others_Item();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    WechatMediaServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMedia/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMediaServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_80 = resultData200; _i < resultData200_80.length; _i++) {
                        var item = resultData200_80[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    WechatMediaServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], WechatMediaServiceProxy);
    return WechatMediaServiceProxy;
}());
exports.WechatMediaServiceProxy = WechatMediaServiceProxy;
var WechatMenuAppSeviceServiceProxy = /** @class */ (function () {
    function WechatMenuAppSeviceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param input (optional)
     * @return Success
     */
    WechatMenuAppSeviceServiceProxy.prototype.createOrWechatEditMenu = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/CreateOrWechatEditMenu";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrWechatEditMenu(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrWechatEditMenu(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMenuAppSeviceServiceProxy.prototype.processCreateOrWechatEditMenu = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param appId (optional)
     * @param menuConditionalId (optional)
     * @return Success
     */
    WechatMenuAppSeviceServiceProxy.prototype.deleteMenuConditional = function (appId, menuConditionalId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/DeleteMenuConditional?";
        if (appId !== undefined)
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        if (menuConditionalId !== undefined)
            url_ += "menuConditionalId=" + encodeURIComponent("" + menuConditionalId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDeleteMenuConditional(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDeleteMenuConditional(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMenuAppSeviceServiceProxy.prototype.processDeleteMenuConditional = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    WechatMenuAppSeviceServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMenuAppSeviceServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param appId (optional)
     * @return Success
     */
    WechatMenuAppSeviceServiceProxy.prototype.getMenuForEdit = function (appId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/GetMenuForEdit?";
        if (appId !== undefined)
            url_ += "appId=" + encodeURIComponent("" + appId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMenuAppSeviceServiceProxy.prototype.processGetMenuForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetWechatMenuForEditOutput.fromJS(resultData200) : new GetWechatMenuForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    WechatMenuAppSeviceServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/WechatMenuAppSevice/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatMenuAppSeviceServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_81 = resultData200; _i < resultData200_81.length; _i++) {
                        var item = resultData200_81[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    WechatMenuAppSeviceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], WechatMenuAppSeviceServiceProxy);
    return WechatMenuAppSeviceServiceProxy;
}());
exports.WechatMenuAppSeviceServiceProxy = WechatMenuAppSeviceServiceProxy;
var WharfServiceProxy = /** @class */ (function () {
    function WharfServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 批量删除Wharf的方法
     * @param input (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.batchDelete = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/BatchDelete";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBatchDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBatchDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processBatchDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 添加或者修改Wharf的公共方法
     * @param input (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.createOrUpdate = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/CreateOrUpdate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processCreateOrUpdate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processCreateOrUpdate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processCreateOrUpdate = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 删除Wharf信息的方法
     * @param id (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.delete = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/Delete?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("delete", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDelete(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDelete(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processDelete = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 通过指定id获取WharfListDto信息
     * @param id (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.getById = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/GetById?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetById(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetById(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processGetById = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? WharfListDto.fromJS(resultData200) : new WharfListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取编辑 Wharf
     * @param id (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.getForEdit = function (id) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/GetForEdit?";
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetForEdit(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetForEdit(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processGetForEdit = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? GetWharfForEditOutput.fromJS(resultData200) : new GetWharfForEditOutput();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 根据用户权限生成菜单查询条件
     * @return Success
     */
    WharfServiceProxy.prototype.getMenuExpressionByUser = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/GetMenuExpressionByUser";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetMenuExpressionByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetMenuExpressionByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processGetMenuExpressionByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExpressionOfFuncOfMenuAndBoolean.fromJS(resultData200) : new ExpressionOfFuncOfMenuAndBoolean();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取Wharf的分页列表信息
     * @param input (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.getPaged = function (input) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/GetPaged";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(input);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfWharfListDto.fromJS(resultData200) : new PagedResultDtoOfWharfListDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param menuId (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.getPowerCodeByUser = function (menuId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/GetPowerCodeByUser?";
        if (menuId !== undefined)
            url_ += "menuId=" + encodeURIComponent("" + menuId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPowerCodeByUser(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPowerCodeByUser(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processGetPowerCodeByUser = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_82 = resultData200; _i < resultData200_82.length; _i++) {
                        var item = resultData200_82[_i];
                        result200.push(item);
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 从Excel表导入数据
     * @param file (optional)
     * @return Success
     */
    WharfServiceProxy.prototype.importWharf = function (file) {
        var _this = this;
        var url_ = this.baseUrl + "/api/services/app/Wharf/ImportWharf";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processImportWharf(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processImportWharf(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WharfServiceProxy.prototype.processImportWharf = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExcelResultDto.fromJS(resultData200) : new ExcelResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    WharfServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], WharfServiceProxy);
    return WharfServiceProxy;
}());
exports.WharfServiceProxy = WharfServiceProxy;
var OperServiceProxy = /** @class */ (function () {
    function OperServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 游船列表
     * @return Success
     */
    OperServiceProxy.prototype.boatInfo = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Oper/BoatInfo";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processBoatInfo(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processBoatInfo(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OperServiceProxy.prototype.processBoatInfo = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_83 = resultData200; _i < resultData200_83.length; _i++) {
                        var item = resultData200_83[_i];
                        result200.push(BoatRunningStatusDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 营收状态
     * @param date (optional)
     * @return Success
     */
    OperServiceProxy.prototype.revenueAnal = function (date, type) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Oper/RevenueAnal?";
        if (date !== undefined)
            url_ += "date=" + encodeURIComponent("" + date) + "&";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processRevenueAnal(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processRevenueAnal(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OperServiceProxy.prototype.processRevenueAnal = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? RevenueAnalyticsResultDto.fromJS(resultData200) : new RevenueAnalyticsResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 可售航班信息
     * @param startDate (optional)
     * @param endDate (optional)
     * @return Success
     */
    OperServiceProxy.prototype.scheduleInfo = function (startDate, endDate) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Oper/ScheduleInfo?";
        if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent("" + startDate) + "&";
        if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent("" + endDate) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processScheduleInfo(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processScheduleInfo(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OperServiceProxy.prototype.processScheduleInfo = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_84 = resultData200; _i < resultData200_84.length; _i++) {
                        var item = resultData200_84[_i];
                        result200.push(ScheduleAnalResultDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 票型比例
     * @return Success
     */
    OperServiceProxy.prototype.ticketRates = function (type) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Oper/TicketRates?";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined and cannot be null.");
        else
            url_ += "type=" + encodeURIComponent("" + type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processTicketRates(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processTicketRates(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OperServiceProxy.prototype.processTicketRates = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_85 = resultData200; _i < resultData200_85.length; _i++) {
                        var item = resultData200_85[_i];
                        result200.push(TicketRatesResult.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    OperServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], OperServiceProxy);
    return OperServiceProxy;
}());
exports.OperServiceProxy = OperServiceProxy;
var OrderSourceServiceProxy = /** @class */ (function () {
    function OrderSourceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 订单来源统计
     * @param queryData (optional) SourceId, CreationTime
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param routeId (optional)
     * @param boatId (optional)
     * @param ticketId (optional)
     * @return Success
     */
    OrderSourceServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount, routeId, boatId, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/OrderSource/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (routeId !== undefined)
            url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
        if (boatId !== undefined)
            url_ += "boatId=" + encodeURIComponent("" + boatId) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrderSourceServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfGetOrderSourceResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfGetOrderSourceResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 订单来源统计——详细
     * @param orderSourceId (optional)
     * @return Success
     */
    OrderSourceServiceProxy.prototype.orderSourceStatDetail = function (orderSourceId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/OrderSource/OrderSourceStatDetail?";
        if (orderSourceId !== undefined)
            url_ += "orderSourceId=" + encodeURIComponent("" + orderSourceId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processOrderSourceStatDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processOrderSourceStatDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OrderSourceServiceProxy.prototype.processOrderSourceStatDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_86 = resultData200; _i < resultData200_86.length; _i++) {
                        var item = resultData200_86[_i];
                        result200.push(AccountDetailDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    OrderSourceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], OrderSourceServiceProxy);
    return OrderSourceServiceProxy;
}());
exports.OrderSourceServiceProxy = OrderSourceServiceProxy;
var OtaServiceProxy = /** @class */ (function () {
    function OtaServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Ota统计
     * @param queryData (optional) SourceId, CreationTime
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param routeId (optional)
     * @param boatId (optional)
     * @param ticketId (optional)
     * @return Success
     */
    OtaServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount, routeId, boatId, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Ota/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (routeId !== undefined)
            url_ += "routeId=" + encodeURIComponent("" + routeId) + "&";
        if (boatId !== undefined)
            url_ += "boatId=" + encodeURIComponent("" + boatId) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OtaServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfGetOrderSourceResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfGetOrderSourceResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * OTA售票统计——详细
     * @param otaId (optional)
     * @return Success
     */
    OtaServiceProxy.prototype.orderSourceStatDetail = function (otaId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/Ota/OrderSourceStatDetail?";
        if (otaId !== undefined)
            url_ += "otaId=" + encodeURIComponent("" + otaId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processOrderSourceStatDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processOrderSourceStatDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    OtaServiceProxy.prototype.processOrderSourceStatDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_87 = resultData200; _i < resultData200_87.length; _i++) {
                        var item = resultData200_87[_i];
                        result200.push(AccountDetailDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    OtaServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], OtaServiceProxy);
    return OtaServiceProxy;
}());
exports.OtaServiceProxy = OtaServiceProxy;
var ScheduleCheckServiceProxy = /** @class */ (function () {
    function ScheduleCheckServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 航班检票统计
     * @param queryData (optional) ScheduleCode 航班班次， RouteId 航线Id， BoatId 游船Id， StartTime 航行日期，
    Route.StartWharfId 检票地点ID
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @return Success
     */
    ScheduleCheckServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/ScheduleCheck/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleCheckServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfScheduleCheckResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfScheduleCheckResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 航班检票统计——详细
     * @param scheduleId (optional)
     * @return Success
     */
    ScheduleCheckServiceProxy.prototype.scheduleDetailStat = function (scheduleId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/ScheduleCheck/ScheduleDetailStat?";
        if (scheduleId !== undefined)
            url_ += "scheduleId=" + encodeURIComponent("" + scheduleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processScheduleDetailStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processScheduleDetailStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleCheckServiceProxy.prototype.processScheduleDetailStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfScheduleCheckDetailDto.fromJS(resultData200) : new PagedResultDtoOfScheduleCheckDetailDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ScheduleCheckServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ScheduleCheckServiceProxy);
    return ScheduleCheckServiceProxy;
}());
exports.ScheduleCheckServiceProxy = ScheduleCheckServiceProxy;
var ScheduleTicketServiceProxy = /** @class */ (function () {
    function ScheduleTicketServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 航班售票统计
     * @param queryData (optional) ScheduleCode 航班班次， RouteId 航线Id， BoatId 游船Id， StartTime 航行日期
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param ticketId (optional)
     * @return Success
     */
    ScheduleTicketServiceProxy.prototype.getPagedStat = function (queryData, sorting, maxResultCount, skipCount, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/ScheduleTicket/GetPagedStat?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPagedStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPagedStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleTicketServiceProxy.prototype.processGetPagedStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfScheduleTicketResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfScheduleTicketResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 航班售票详情
     * @param scheduleId (optional)
     * @return Success
     */
    ScheduleTicketServiceProxy.prototype.scheduleDetailStat = function (scheduleId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/ScheduleTicket/ScheduleDetailStat?";
        if (scheduleId !== undefined)
            url_ += "scheduleId=" + encodeURIComponent("" + scheduleId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processScheduleDetailStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processScheduleDetailStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    ScheduleTicketServiceProxy.prototype.processScheduleDetailStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PagedResultDtoOfScheduleTicketDetailResultDto.fromJS(resultData200) : new PagedResultDtoOfScheduleTicketDetailResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    ScheduleTicketServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], ScheduleTicketServiceProxy);
    return ScheduleTicketServiceProxy;
}());
exports.ScheduleTicketServiceProxy = ScheduleTicketServiceProxy;
var SellerDailyServiceProxy = /** @class */ (function () {
    function SellerDailyServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 销售员日结统计——详细
     * @param userId (optional)
     * @return Success
     */
    SellerDailyServiceProxy.prototype.detail = function (userId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/SellerDaily/Detail?";
        if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SellerDailyServiceProxy.prototype.processDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_88 = resultData200; _i < resultData200_88.length; _i++) {
                        var item = resultData200_88[_i];
                        result200.push(AccountDetailDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 销售员日结统计
     * @param queryData (optional) ScheduleId, CreatorId,CreationTime
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param boatId (optional)
     * @param ticketId (optional)
     * @return Success
     */
    SellerDailyServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount, boatId, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/SellerDaily/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (boatId !== undefined)
            url_ += "boatId=" + encodeURIComponent("" + boatId) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SellerDailyServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfSellerDailyResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfSellerDailyResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    SellerDailyServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], SellerDailyServiceProxy);
    return SellerDailyServiceProxy;
}());
exports.SellerDailyServiceProxy = SellerDailyServiceProxy;
var SellerTicketServiceProxy = /** @class */ (function () {
    function SellerTicketServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 售票员售票统计
     * @param queryData (optional) ScheduleId, CreatorId,CreationTime
     * @param sorting (optional)
     * @param maxResultCount (optional)
     * @param skipCount (optional)
     * @param boatId (optional)
     * @param ticketId (optional)
     * @return Success
     */
    SellerTicketServiceProxy.prototype.getPaged = function (queryData, sorting, maxResultCount, skipCount, boatId, ticketId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/SellerTicket/GetPaged?";
        if (queryData !== undefined)
            queryData && queryData.forEach(function (item, index) {
                for (var attr in item)
                    if (item.hasOwnProperty(attr)) {
                        url_ += "queryData[" + index + "]." + attr + "=" + encodeURIComponent("" + item[attr]) + "&";
                    }
            });
        if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (boatId !== undefined)
            url_ += "boatId=" + encodeURIComponent("" + boatId) + "&";
        if (ticketId !== undefined)
            url_ += "ticketId=" + encodeURIComponent("" + ticketId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetPaged(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetPaged(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SellerTicketServiceProxy.prototype.processGetPaged = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfSellerTicketResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfSellerTicketResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 销售员售票统计——详情
     * @param userId (optional)
     * @return Success
     */
    SellerTicketServiceProxy.prototype.sellerTicketDetailStat = function (userId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Stats/SellerTicket/SellerTicketDetailStat?";
        if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processSellerTicketDetailStat(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processSellerTicketDetailStat(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    SellerTicketServiceProxy.prototype.processSellerTicketDetailStat = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? StatsPagedResultDtoOfScheduleTicketDetailResultDto.fromJS(resultData200) : new StatsPagedResultDtoOfScheduleTicketDetailResultDto();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    SellerTicketServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], SellerTicketServiceProxy);
    return SellerTicketServiceProxy;
}());
exports.SellerTicketServiceProxy = SellerTicketServiceProxy;
var FinanceServiceProxy = /** @class */ (function () {
    function FinanceServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 账单明细
     * @param accountId (optional)
     * @return Success
     */
    FinanceServiceProxy.prototype.detail = function (accountId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TicketAccount/Finance/Detail?";
        if (accountId !== undefined)
            url_ += "accountId=" + encodeURIComponent("" + accountId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processDetail(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processDetail(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    FinanceServiceProxy.prototype.processDetail = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_89 = resultData200; _i < resultData200_89.length; _i++) {
                        var item = resultData200_89[_i];
                        result200.push(AccountDetailDto.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    FinanceServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], FinanceServiceProxy);
    return FinanceServiceProxy;
}());
exports.FinanceServiceProxy = FinanceServiceProxy;
var TokenAuthServiceProxy = /** @class */ (function () {
    function TokenAuthServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * @param model (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.activateAccount = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/ActivateAccount";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(model);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processActivateAccount(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processActivateAccount(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processActivateAccount = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ActivateAccountResultModel.fromJS(resultData200) : new ActivateAccountResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param model (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.authenticate = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(model);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processAuthenticate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processAuthenticate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processAuthenticate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param model (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.externalAuthenticate = function (model) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/ExternalAuthenticate";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(model);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processExternalAuthenticate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processExternalAuthenticate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processExternalAuthenticate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ExternalAuthenticateResultModel.fromJS(resultData200) : new ExternalAuthenticateResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 生成验证码
     * @param name (optional)
     * @param tid (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.generateVerification = function (name, tid) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/GenerateVerification?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (tid !== undefined)
            url_ += "tid=" + encodeURIComponent("" + tid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGenerateVerification(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGenerateVerification(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processGenerateVerification = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @return Success
     */
    TokenAuthServiceProxy.prototype.getExternalAuthenticationProviders = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/GetExternalAuthenticationProviders";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetExternalAuthenticationProviders(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetExternalAuthenticationProviders(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processGetExternalAuthenticationProviders = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_90 = resultData200; _i < resultData200_90.length; _i++) {
                        var item = resultData200_90[_i];
                        result200.push(ExternalLoginProviderInfoModel.fromJS(item));
                    }
                }
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param impersonationToken (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.impersonatedAuthenticate = function (impersonationToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/ImpersonatedAuthenticate?";
        if (impersonationToken !== undefined)
            url_ += "impersonationToken=" + encodeURIComponent("" + impersonationToken) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processImpersonatedAuthenticate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processImpersonatedAuthenticate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processImpersonatedAuthenticate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? ImpersonatedAuthenticateResultModel.fromJS(resultData200) : new ImpersonatedAuthenticateResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * @param switchAccountToken (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.linkedAccountAuthenticate = function (switchAccountToken) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/LinkedAccountAuthenticate?";
        if (switchAccountToken !== undefined)
            url_ += "switchAccountToken=" + encodeURIComponent("" + switchAccountToken) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processLinkedAccountAuthenticate(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processLinkedAccountAuthenticate(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processLinkedAccountAuthenticate = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? SwitchedAccountAuthenticateResultModel.fromJS(resultData200) : new SwitchedAccountAuthenticateResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 官网登录接口，以后需要填写游客信息（用户名密码，手机号验证码）才能登录，现在直接登录
     * @param login (optional)
     * @return Success
     */
    TokenAuthServiceProxy.prototype.webtLogin = function (login) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/WebtLogin";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(login);
        var options_ = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processWebtLogin(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processWebtLogin(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processWebtLogin = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 微信登录接口，以后需要填写游客信息（用户名密码，手机号验证码）才能登录，现在直接登录
     * @param openId (optional) 现在可以不填写
     * @return Success
     */
    TokenAuthServiceProxy.prototype.wechatLogin = function (openId) {
        var _this = this;
        var url_ = this.baseUrl + "/api/TokenAuth/WechatLogin?";
        if (openId !== undefined)
            url_ += "openId=" + encodeURIComponent("" + openId) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("post", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processWechatLogin(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processWechatLogin(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    TokenAuthServiceProxy.prototype.processWechatLogin = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    TokenAuthServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], TokenAuthServiceProxy);
    return TokenAuthServiceProxy;
}());
exports.TokenAuthServiceProxy = TokenAuthServiceProxy;
var VerificationServiceProxy = /** @class */ (function () {
    function VerificationServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 生成验证码
     * @param name (optional) 验证码key
     * @param t (optional) 验证码类型
     * @param tid (optional) 租户Id(可空)
     * @return Success
     */
    VerificationServiceProxy.prototype.generateCaptcha = function (name, t, tid) {
        var _this = this;
        var url_ = this.baseUrl + "/api/Verification/GenerateCaptcha?";
        if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (t !== undefined)
            url_ += "t=" + encodeURIComponent("" + t) + "&";
        if (tid !== undefined)
            url_ += "tid=" + encodeURIComponent("" + tid) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({})
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGenerateCaptcha(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGenerateCaptcha(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    VerificationServiceProxy.prototype.processGenerateCaptcha = function (response) {
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return rxjs_1.of(null);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    VerificationServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], VerificationServiceProxy);
    return VerificationServiceProxy;
}());
exports.VerificationServiceProxy = VerificationServiceProxy;
var WechatPayServiceProxy = /** @class */ (function () {
    function WechatPayServiceProxy(http, baseUrl) {
        this.jsonParseReviver = undefined;
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * 获取OpenId
     * @param code (optional)
     * @return Success
     */
    WechatPayServiceProxy.prototype.getOpenId = function (code) {
        var _this = this;
        var url_ = this.baseUrl + "/api/WechatPay/GetOpenId?";
        if (code !== undefined)
            url_ += "code=" + encodeURIComponent("" + code) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetOpenId(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetOpenId(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatPayServiceProxy.prototype.processGetOpenId = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AjaxResult.fromJS(resultData200) : new AjaxResult();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 获取凭证接口
     * @param appid (optional) 第三方用户唯一凭证
     * @param secret (optional) 第三方用户唯一凭证密钥，既appsecret
     * @param grant_type (optional) 获取access_token填写client_credential
     * @return Success
     */
    WechatPayServiceProxy.prototype.getToken = function (appid, secret, grant_type) {
        var _this = this;
        var url_ = this.baseUrl + "/api/WechatPay/GetToken?";
        if (appid !== undefined)
            url_ += "appid=" + encodeURIComponent("" + appid) + "&";
        if (secret !== undefined)
            url_ += "secret=" + encodeURIComponent("" + secret) + "&";
        if (grant_type !== undefined)
            url_ += "grant_type=" + encodeURIComponent("" + grant_type) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processGetToken(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processGetToken(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatPayServiceProxy.prototype.processGetToken = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AccessTokenResult.fromJS(resultData200) : new AccessTokenResult();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    /**
     * 支付回调URL，对应于Service.Config.TenPayV3Notify
     * @return Success
     */
    WechatPayServiceProxy.prototype.payNotifyUrl = function () {
        var _this = this;
        var url_ = this.baseUrl + "/api/WechatPay/PayNotifyUrl";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            observe: "response",
            responseType: "blob",
            headers: new http_1.HttpHeaders({
                "Accept": "application/json"
            })
        };
        return this.http.request("get", url_, options_).pipe(operators_1.mergeMap(function (response_) {
            return _this.processPayNotifyUrl(response_);
        })).pipe(operators_1.catchError(function (response_) {
            if (response_ instanceof http_1.HttpResponseBase) {
                try {
                    return _this.processPayNotifyUrl(response_);
                }
                catch (e) {
                    return rxjs_1.throwError(e);
                }
            }
            else
                return rxjs_1.throwError(response_);
        }));
    };
    WechatPayServiceProxy.prototype.processPayNotifyUrl = function (response) {
        var _this = this;
        var status = response.status;
        var responseBlob = response instanceof http_1.HttpResponse ? response.body :
            response.error instanceof Blob ? response.error : undefined;
        var _headers = {};
        if (response.headers) {
            for (var _i = 0, _a = response.headers.keys(); _i < _a.length; _i++) {
                var key = _a[_i];
                _headers[key] = response.headers.get(key);
            }
        }
        ;
        if (status === 200) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AjaxResult.fromJS(resultData200) : new AjaxResult();
                return rxjs_1.of(result200);
            }));
        }
        else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(operators_1.mergeMap(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return rxjs_1.of(null);
    };
    WechatPayServiceProxy = __decorate([
        core_1.Injectable(),
        __param(0, core_1.Inject(http_1.HttpClient)), __param(1, core_1.Optional()), __param(1, core_1.Inject(exports.API_BASE_URL)),
        __metadata("design:paramtypes", [http_1.HttpClient, String])
    ], WechatPayServiceProxy);
    return WechatPayServiceProxy;
}());
exports.WechatPayServiceProxy = WechatPayServiceProxy;
var ActivityResultModel = /** @class */ (function () {
    function ActivityResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityResultModel.prototype.init = function (data) {
        if (data) {
            this.resultCode = data["resultCode"];
            this.resultMessage = data["resultMessage"];
            this.detail = data["detail"];
            this.date = data["date"];
        }
    };
    ActivityResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityResultModel();
        result.init(data);
        return result;
    };
    ActivityResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["resultCode"] = this.resultCode;
        data["resultMessage"] = this.resultMessage;
        data["detail"] = this.detail;
        data["date"] = this.date;
        return data;
    };
    ActivityResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityResultModel();
        result.init(json);
        return result;
    };
    return ActivityResultModel;
}());
exports.ActivityResultModel = ActivityResultModel;
var CreateActivityModel = /** @class */ (function () {
    function CreateActivityModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateActivityModel.prototype.init = function (data) {
        if (data) {
            this.sourceId = data["sourceId"];
            this.payMethodId = data["payMethodId"];
            this.voucherNo = data["voucherNo"];
            this.orderType = data["orderType"];
            this.remark = data["remark"];
            this.createUserId = data["createUserId"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            if (data["activityDetails"] && data["activityDetails"].constructor === Array) {
                this.activityDetails = [];
                for (var _i = 0, _a = data["activityDetails"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.activityDetails.push(CreateActivityDetailModel.fromJS(item));
                }
            }
            this.travelAgencyId = data["travelAgencyId"];
        }
    };
    CreateActivityModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateActivityModel();
        result.init(data);
        return result;
    };
    CreateActivityModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["sourceId"] = this.sourceId;
        data["payMethodId"] = this.payMethodId;
        data["voucherNo"] = this.voucherNo;
        data["orderType"] = this.orderType;
        data["remark"] = this.remark;
        data["createUserId"] = this.createUserId;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        if (this.activityDetails && this.activityDetails.constructor === Array) {
            data["activityDetails"] = [];
            for (var _i = 0, _a = this.activityDetails; _i < _a.length; _i++) {
                var item = _a[_i];
                data["activityDetails"].push(item.toJSON());
            }
        }
        data["travelAgencyId"] = this.travelAgencyId;
        return data;
    };
    CreateActivityModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateActivityModel();
        result.init(json);
        return result;
    };
    return CreateActivityModel;
}());
exports.CreateActivityModel = CreateActivityModel;
var OrderTypeEnum;
(function (OrderTypeEnum) {
    OrderTypeEnum[OrderTypeEnum["OrderTypeCustomer"] = "OrderTypeCustomer"] = "OrderTypeCustomer";
    OrderTypeEnum[OrderTypeEnum["OrderTypeTravelAgency"] = "OrderTypeTravelAgency"] = "OrderTypeTravelAgency";
})(OrderTypeEnum = exports.OrderTypeEnum || (exports.OrderTypeEnum = {}));
var CreateActivityDetailModel = /** @class */ (function () {
    function CreateActivityDetailModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateActivityDetailModel.prototype.init = function (data) {
        if (data) {
            this.quantity = data["quantity"];
            this.ticketPriceId = data["ticketPriceId"];
            this.scheduleId = data["scheduleId"];
            this.customerId = data["customerId"];
        }
    };
    CreateActivityDetailModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateActivityDetailModel();
        result.init(data);
        return result;
    };
    CreateActivityDetailModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["quantity"] = this.quantity;
        data["ticketPriceId"] = this.ticketPriceId;
        data["scheduleId"] = this.scheduleId;
        data["customerId"] = this.customerId;
        return data;
    };
    CreateActivityDetailModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateActivityDetailModel();
        result.init(json);
        return result;
    };
    return CreateActivityDetailModel;
}());
exports.CreateActivityDetailModel = CreateActivityDetailModel;
var Boat = /** @class */ (function () {
    function Boat(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Boat.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.boatName = data["boatName"];
            this.boatCode = data["boatCode"];
            this.seatNumber = data["seatNumber"];
            this.runStatus = data["runStatus"];
            this.leader = data["leader"];
            this.leaderMobile = data["leaderMobile"];
            this.picture = data["picture"];
            this.auditStatus = data["auditStatus"];
            if (data["schedules"] && data["schedules"].constructor === Array) {
                this.schedules = [];
                for (var _i = 0, _a = data["schedules"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.schedules.push(Schedule.fromJS(item));
                }
            }
            this.routeId = data["routeId"];
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Boat.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Boat();
        result.init(data);
        return result;
    };
    Boat.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["boatName"] = this.boatName;
        data["boatCode"] = this.boatCode;
        data["seatNumber"] = this.seatNumber;
        data["runStatus"] = this.runStatus;
        data["leader"] = this.leader;
        data["leaderMobile"] = this.leaderMobile;
        data["picture"] = this.picture;
        data["auditStatus"] = this.auditStatus;
        if (this.schedules && this.schedules.constructor === Array) {
            data["schedules"] = [];
            for (var _i = 0, _a = this.schedules; _i < _a.length; _i++) {
                var item = _a[_i];
                data["schedules"].push(item.toJSON());
            }
        }
        data["routeId"] = this.routeId;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Boat.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Boat();
        result.init(json);
        return result;
    };
    return Boat;
}());
exports.Boat = Boat;
var RunStatusEnum;
(function (RunStatusEnum) {
    RunStatusEnum[RunStatusEnum["Running"] = "Running"] = "Running";
    RunStatusEnum[RunStatusEnum["Maintenance"] = "Maintenance"] = "Maintenance";
})(RunStatusEnum = exports.RunStatusEnum || (exports.RunStatusEnum = {}));
var AuditStatusEnum;
(function (AuditStatusEnum) {
    AuditStatusEnum[AuditStatusEnum["WaiteAudit"] = "WaiteAudit"] = "WaiteAudit";
    AuditStatusEnum[AuditStatusEnum["ThroughAudit"] = "ThroughAudit"] = "ThroughAudit";
    AuditStatusEnum[AuditStatusEnum["RejecteAudit"] = "RejecteAudit"] = "RejecteAudit";
})(AuditStatusEnum = exports.AuditStatusEnum || (exports.AuditStatusEnum = {}));
var Schedule = /** @class */ (function () {
    function Schedule(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Schedule.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.scheduleCode = data["scheduleCode"];
            this.routeId = data["routeId"];
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boatId = data["boatId"];
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            this.saleDate = data["saleDate"] ? moment(data["saleDate"].toString()) : undefined;
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : undefined;
            this.seatQuantity = data["seatQuantity"];
            this.surplusQuantity = data["surplusQuantity"];
            this.scheduleStatus = data["scheduleStatus"];
            this.auditStatus = data["auditStatus"];
            this.checkStartTime = data["checkStartTime"] ? moment(data["checkStartTime"].toString()) : undefined;
            this.checkEndTime = data["checkEndTime"] ? moment(data["checkEndTime"].toString()) : undefined;
            this.reserveQuantity = data["reserveQuantity"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Schedule.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Schedule();
        result.init(data);
        return result;
    };
    Schedule.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["scheduleCode"] = this.scheduleCode;
        data["routeId"] = this.routeId;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boatId"] = this.boatId;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        data["saleDate"] = this.saleDate ? this.saleDate.toISOString() : undefined;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        data["seatQuantity"] = this.seatQuantity;
        data["surplusQuantity"] = this.surplusQuantity;
        data["scheduleStatus"] = this.scheduleStatus;
        data["auditStatus"] = this.auditStatus;
        data["checkStartTime"] = this.checkStartTime ? this.checkStartTime.toISOString() : undefined;
        data["checkEndTime"] = this.checkEndTime ? this.checkEndTime.toISOString() : undefined;
        data["reserveQuantity"] = this.reserveQuantity;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Schedule.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Schedule();
        result.init(json);
        return result;
    };
    return Schedule;
}());
exports.Schedule = Schedule;
var Route = /** @class */ (function () {
    function Route(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Route.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.routeName = data["routeName"];
            this.lineCode = data["lineCode"];
            this.lineInfo = data["lineInfo"];
            this.lineImage = data["lineImage"];
            this.startPosition = data["startPosition"];
            this.startWharfId = data["startWharfId"];
            this.startWharf = data["startWharf"] ? Wharf.fromJS(data["startWharf"]) : undefined;
            this.endPosition = data["endPosition"];
            this.endWharfId = data["endWharfId"];
            this.endWharf = data["endWharf"] ? Wharf.fromJS(data["endWharf"]) : undefined;
            this.auditStatus = data["auditStatus"];
            if (data["schedules"] && data["schedules"].constructor === Array) {
                this.schedules = [];
                for (var _i = 0, _a = data["schedules"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.schedules.push(Schedule.fromJS(item));
                }
            }
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Route.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Route();
        result.init(data);
        return result;
    };
    Route.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["routeName"] = this.routeName;
        data["lineCode"] = this.lineCode;
        data["lineInfo"] = this.lineInfo;
        data["lineImage"] = this.lineImage;
        data["startPosition"] = this.startPosition;
        data["startWharfId"] = this.startWharfId;
        data["startWharf"] = this.startWharf ? this.startWharf.toJSON() : undefined;
        data["endPosition"] = this.endPosition;
        data["endWharfId"] = this.endWharfId;
        data["endWharf"] = this.endWharf ? this.endWharf.toJSON() : undefined;
        data["auditStatus"] = this.auditStatus;
        if (this.schedules && this.schedules.constructor === Array) {
            data["schedules"] = [];
            for (var _i = 0, _a = this.schedules; _i < _a.length; _i++) {
                var item = _a[_i];
                data["schedules"].push(item.toJSON());
            }
        }
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Route.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Route();
        result.init(json);
        return result;
    };
    return Route;
}());
exports.Route = Route;
var User = /** @class */ (function () {
    function User(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    User.prototype.init = function (data) {
        if (data) {
            this.signInToken = data["signInToken"];
            this.needToChangeThePassword = data["needToChangeThePassword"];
            this.signInTokenExpireTimeUtc = data["signInTokenExpireTimeUtc"] ? moment(data["signInTokenExpireTimeUtc"].toString()) : undefined;
            this.name = data["name"];
            this.profilePictureId = data["profilePictureId"];
            this.surname = data["surname"];
            this.normalizedUserName = data["normalizedUserName"];
            this.normalizedEmailAddress = data["normalizedEmailAddress"];
            this.concurrencyStamp = data["concurrencyStamp"];
            if (data["tokens"] && data["tokens"].constructor === Array) {
                this.tokens = [];
                for (var _i = 0, _a = data["tokens"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.tokens.push(UserToken.fromJS(item));
                }
            }
            this.deleterUser = data["deleterUser"] ? User.fromJS(data["deleterUser"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.lastModifierUser = data["lastModifierUser"] ? User.fromJS(data["lastModifierUser"]) : undefined;
            this.authenticationSource = data["authenticationSource"];
            this.userName = data["userName"];
            this.tenantId = data["tenantId"];
            this.emailAddress = data["emailAddress"];
            this.fullName = data["fullName"];
            this.password = data["password"];
            this.emailConfirmationCode = data["emailConfirmationCode"];
            this.passwordResetCode = data["passwordResetCode"];
            this.lockoutEndDateUtc = data["lockoutEndDateUtc"] ? moment(data["lockoutEndDateUtc"].toString()) : undefined;
            this.accessFailedCount = data["accessFailedCount"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
            this.phoneNumber = data["phoneNumber"];
            this.isPhoneNumberConfirmed = data["isPhoneNumberConfirmed"];
            this.securityStamp = data["securityStamp"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            if (data["logins"] && data["logins"].constructor === Array) {
                this.logins = [];
                for (var _b = 0, _c = data["logins"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.logins.push(UserLogin.fromJS(item));
                }
            }
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (var _d = 0, _e = data["roles"]; _d < _e.length; _d++) {
                    var item = _e[_d];
                    this.roles.push(UserRole.fromJS(item));
                }
            }
            if (data["claims"] && data["claims"].constructor === Array) {
                this.claims = [];
                for (var _f = 0, _g = data["claims"]; _f < _g.length; _f++) {
                    var item = _g[_f];
                    this.claims.push(UserClaim.fromJS(item));
                }
            }
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (var _h = 0, _j = data["permissions"]; _h < _j.length; _h++) {
                    var item = _j[_h];
                    this.permissions.push(UserPermissionSetting.fromJS(item));
                }
            }
            if (data["settings"] && data["settings"].constructor === Array) {
                this.settings = [];
                for (var _k = 0, _l = data["settings"]; _k < _l.length; _k++) {
                    var item = _l[_k];
                    this.settings.push(Setting.fromJS(item));
                }
            }
            this.isEmailConfirmed = data["isEmailConfirmed"];
            this.isActive = data["isActive"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    User.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new User();
        result.init(data);
        return result;
    };
    User.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["needToChangeThePassword"] = this.needToChangeThePassword;
        data["signInTokenExpireTimeUtc"] = this.signInTokenExpireTimeUtc ? this.signInTokenExpireTimeUtc.toISOString() : undefined;
        data["name"] = this.name;
        data["profilePictureId"] = this.profilePictureId;
        data["surname"] = this.surname;
        data["normalizedUserName"] = this.normalizedUserName;
        data["normalizedEmailAddress"] = this.normalizedEmailAddress;
        data["concurrencyStamp"] = this.concurrencyStamp;
        if (this.tokens && this.tokens.constructor === Array) {
            data["tokens"] = [];
            for (var _i = 0, _a = this.tokens; _i < _a.length; _i++) {
                var item = _a[_i];
                data["tokens"].push(item.toJSON());
            }
        }
        data["deleterUser"] = this.deleterUser ? this.deleterUser.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["lastModifierUser"] = this.lastModifierUser ? this.lastModifierUser.toJSON() : undefined;
        data["authenticationSource"] = this.authenticationSource;
        data["userName"] = this.userName;
        data["tenantId"] = this.tenantId;
        data["emailAddress"] = this.emailAddress;
        data["fullName"] = this.fullName;
        data["password"] = this.password;
        data["emailConfirmationCode"] = this.emailConfirmationCode;
        data["passwordResetCode"] = this.passwordResetCode;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : undefined;
        data["accessFailedCount"] = this.accessFailedCount;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["securityStamp"] = this.securityStamp;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        if (this.logins && this.logins.constructor === Array) {
            data["logins"] = [];
            for (var _b = 0, _c = this.logins; _b < _c.length; _b++) {
                var item = _c[_b];
                data["logins"].push(item.toJSON());
            }
        }
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (var _d = 0, _e = this.roles; _d < _e.length; _d++) {
                var item = _e[_d];
                data["roles"].push(item.toJSON());
            }
        }
        if (this.claims && this.claims.constructor === Array) {
            data["claims"] = [];
            for (var _f = 0, _g = this.claims; _f < _g.length; _f++) {
                var item = _g[_f];
                data["claims"].push(item.toJSON());
            }
        }
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (var _h = 0, _j = this.permissions; _h < _j.length; _h++) {
                var item = _j[_h];
                data["permissions"].push(item.toJSON());
            }
        }
        if (this.settings && this.settings.constructor === Array) {
            data["settings"] = [];
            for (var _k = 0, _l = this.settings; _k < _l.length; _k++) {
                var item = _l[_k];
                data["settings"].push(item.toJSON());
            }
        }
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    User.prototype.clone = function () {
        var json = this.toJSON();
        var result = new User();
        result.init(json);
        return result;
    };
    return User;
}());
exports.User = User;
var Branch = /** @class */ (function () {
    function Branch(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Branch.prototype.init = function (data) {
        if (data) {
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? Branch.fromJS(data["parent"]) : undefined;
            this.branchCode = data["branchCode"];
            this.branchName = data["branchName"];
            this.sort = data["sort"];
            this.level = data["level"];
            this.isEnabled = data["isEnabled"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Branch.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Branch();
        result.init(data);
        return result;
    };
    Branch.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["branchCode"] = this.branchCode;
        data["branchName"] = this.branchName;
        data["sort"] = this.sort;
        data["level"] = this.level;
        data["isEnabled"] = this.isEnabled;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Branch.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Branch();
        result.init(json);
        return result;
    };
    return Branch;
}());
exports.Branch = Branch;
var ScheduleStatusEnum;
(function (ScheduleStatusEnum) {
    ScheduleStatusEnum[ScheduleStatusEnum["WaitCheck"] = "WaitCheck"] = "WaitCheck";
    ScheduleStatusEnum[ScheduleStatusEnum["BeginCheck"] = "BeginCheck"] = "BeginCheck";
    ScheduleStatusEnum[ScheduleStatusEnum["ScheduleRunning"] = "ScheduleRunning"] = "ScheduleRunning";
    ScheduleStatusEnum[ScheduleStatusEnum["Ending"] = "Ending"] = "Ending";
})(ScheduleStatusEnum = exports.ScheduleStatusEnum || (exports.ScheduleStatusEnum = {}));
var Wharf = /** @class */ (function () {
    function Wharf(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Wharf.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.wharfName = data["wharfName"];
            this.wharfNo = data["wharfNo"];
            this.wharfLeader = data["wharfLeader"];
            this.leaderMobile = data["leaderMobile"];
            this.wharfPosition = data["wharfPosition"];
            this.isEenable = data["isEenable"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Wharf.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Wharf();
        result.init(data);
        return result;
    };
    Wharf.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["wharfName"] = this.wharfName;
        data["wharfNo"] = this.wharfNo;
        data["wharfLeader"] = this.wharfLeader;
        data["leaderMobile"] = this.leaderMobile;
        data["wharfPosition"] = this.wharfPosition;
        data["isEenable"] = this.isEenable;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Wharf.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Wharf();
        result.init(json);
        return result;
    };
    return Wharf;
}());
exports.Wharf = Wharf;
var UserToken = /** @class */ (function () {
    function UserToken(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserToken.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.loginProvider = data["loginProvider"];
            this.name = data["name"];
            this.value = data["value"];
            this.expireDate = data["expireDate"] ? moment(data["expireDate"].toString()) : undefined;
            this.id = data["id"];
        }
    };
    UserToken.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserToken();
        result.init(data);
        return result;
    };
    UserToken.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["loginProvider"] = this.loginProvider;
        data["name"] = this.name;
        data["value"] = this.value;
        data["expireDate"] = this.expireDate ? this.expireDate.toISOString() : undefined;
        data["id"] = this.id;
        return data;
    };
    UserToken.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserToken();
        result.init(json);
        return result;
    };
    return UserToken;
}());
exports.UserToken = UserToken;
var UserLogin = /** @class */ (function () {
    function UserLogin(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserLogin.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.loginProvider = data["loginProvider"];
            this.providerKey = data["providerKey"];
            this.id = data["id"];
        }
    };
    UserLogin.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserLogin();
        result.init(data);
        return result;
    };
    UserLogin.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["loginProvider"] = this.loginProvider;
        data["providerKey"] = this.providerKey;
        data["id"] = this.id;
        return data;
    };
    UserLogin.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserLogin();
        result.init(json);
        return result;
    };
    return UserLogin;
}());
exports.UserLogin = UserLogin;
var UserRole = /** @class */ (function () {
    function UserRole(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserRole.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.roleId = data["roleId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    UserRole.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserRole();
        result.init(data);
        return result;
    };
    UserRole.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["roleId"] = this.roleId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    UserRole.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserRole();
        result.init(json);
        return result;
    };
    return UserRole;
}());
exports.UserRole = UserRole;
var UserClaim = /** @class */ (function () {
    function UserClaim(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserClaim.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.claimType = data["claimType"];
            this.claimValue = data["claimValue"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    UserClaim.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserClaim();
        result.init(data);
        return result;
    };
    UserClaim.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    UserClaim.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserClaim();
        result.init(json);
        return result;
    };
    return UserClaim;
}());
exports.UserClaim = UserClaim;
var UserPermissionSetting = /** @class */ (function () {
    function UserPermissionSetting(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserPermissionSetting.prototype.init = function (data) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.isGranted = data["isGranted"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    UserPermissionSetting.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserPermissionSetting();
        result.init(data);
        return result;
    };
    UserPermissionSetting.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["isGranted"] = this.isGranted;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    UserPermissionSetting.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserPermissionSetting();
        result.init(json);
        return result;
    };
    return UserPermissionSetting;
}());
exports.UserPermissionSetting = UserPermissionSetting;
var Setting = /** @class */ (function () {
    function Setting(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Setting.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.name = data["name"];
            this.value = data["value"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Setting.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Setting();
        result.init(data);
        return result;
    };
    Setting.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["value"] = this.value;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Setting.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Setting();
        result.init(json);
        return result;
    };
    return Setting;
}());
exports.Setting = Setting;
var CheckResult = /** @class */ (function () {
    function CheckResult(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CheckResult.prototype.init = function (data) {
        if (data) {
            this.status = data["status"];
            this.msg = data["msg"];
            this.count = data["count"];
            this.audio = data["audio"];
            this.show_msg = data["show_msg"];
        }
    };
    CheckResult.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CheckResult();
        result.init(data);
        return result;
    };
    CheckResult.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["msg"] = this.msg;
        data["count"] = this.count;
        data["audio"] = this.audio;
        data["show_msg"] = this.show_msg;
        return data;
    };
    CheckResult.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CheckResult();
        result.init(json);
        return result;
    };
    return CheckResult;
}());
exports.CheckResult = CheckResult;
var QueryData = /** @class */ (function () {
    function QueryData(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    QueryData.prototype.init = function (data) {
        if (data) {
            this.field = data["field"];
            this.method = data["method"];
            this.value = data["value"];
            this.logic = data["logic"];
        }
    };
    QueryData.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new QueryData();
        result.init(data);
        return result;
    };
    QueryData.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["method"] = this.method;
        data["value"] = this.value;
        data["logic"] = this.logic;
        return data;
    };
    QueryData.prototype.clone = function () {
        var json = this.toJSON();
        var result = new QueryData();
        result.init(json);
        return result;
    };
    return QueryData;
}());
exports.QueryData = QueryData;
var PagedResultDtoOfGateHistoryResultDto = /** @class */ (function () {
    function PagedResultDtoOfGateHistoryResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfGateHistoryResultDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(GateHistoryResultDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfGateHistoryResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfGateHistoryResultDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfGateHistoryResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfGateHistoryResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfGateHistoryResultDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfGateHistoryResultDto;
}());
exports.PagedResultDtoOfGateHistoryResultDto = PagedResultDtoOfGateHistoryResultDto;
/** 过闸统计页面Dto */
var GateHistoryResultDto = /** @class */ (function () {
    function GateHistoryResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GateHistoryResultDto.prototype.init = function (data) {
        if (data) {
            this.deviceName = data["deviceName"];
            this.deviceId = data["deviceId"];
            if (data["verifyTypeDatas"] && data["verifyTypeDatas"].constructor === Array) {
                this.verifyTypeDatas = [];
                for (var _i = 0, _a = data["verifyTypeDatas"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.verifyTypeDatas.push(VerifyTypeDataItem.fromJS(item));
                }
            }
            this.total = data["total"];
        }
    };
    GateHistoryResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GateHistoryResultDto();
        result.init(data);
        return result;
    };
    GateHistoryResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["deviceName"] = this.deviceName;
        data["deviceId"] = this.deviceId;
        if (this.verifyTypeDatas && this.verifyTypeDatas.constructor === Array) {
            data["verifyTypeDatas"] = [];
            for (var _i = 0, _a = this.verifyTypeDatas; _i < _a.length; _i++) {
                var item = _a[_i];
                data["verifyTypeDatas"].push(item.toJSON());
            }
        }
        data["total"] = this.total;
        return data;
    };
    GateHistoryResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GateHistoryResultDto();
        result.init(json);
        return result;
    };
    return GateHistoryResultDto;
}());
exports.GateHistoryResultDto = GateHistoryResultDto;
var VerifyTypeDataItem = /** @class */ (function () {
    function VerifyTypeDataItem(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    VerifyTypeDataItem.prototype.init = function (data) {
        if (data) {
            this.typeName = data["typeName"];
            this.value = data["value"];
        }
    };
    VerifyTypeDataItem.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new VerifyTypeDataItem();
        result.init(data);
        return result;
    };
    VerifyTypeDataItem.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["typeName"] = this.typeName;
        data["value"] = this.value;
        return data;
    };
    VerifyTypeDataItem.prototype.clone = function () {
        var json = this.toJSON();
        var result = new VerifyTypeDataItem();
        result.init(json);
        return result;
    };
    return VerifyTypeDataItem;
}());
exports.VerifyTypeDataItem = VerifyTypeDataItem;
/** 过闸记录的查询条件 */
var GateRecordFilters = /** @class */ (function () {
    function GateRecordFilters(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GateRecordFilters.prototype.init = function (data) {
        if (data) {
            if (data["deviceTypes"] && data["deviceTypes"].constructor === Array) {
                this.deviceTypes = [];
                for (var _i = 0, _a = data["deviceTypes"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.deviceTypes.push(item);
                }
            }
            if (data["devices"] && data["devices"].constructor === Array) {
                this.devices = [];
                for (var _b = 0, _c = data["devices"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.devices.push(Device.fromJS(item));
                }
            }
            if (data["ticketTypes"] && data["ticketTypes"].constructor === Array) {
                this.ticketTypes = [];
                for (var _d = 0, _e = data["ticketTypes"]; _d < _e.length; _d++) {
                    var item = _e[_d];
                    this.ticketTypes.push(item);
                }
            }
            if (data["boats"] && data["boats"].constructor === Array) {
                this.boats = [];
                for (var _f = 0, _g = data["boats"]; _f < _g.length; _f++) {
                    var item = _g[_f];
                    this.boats.push(Boat.fromJS(item));
                }
            }
            if (data["operators"] && data["operators"].constructor === Array) {
                this.operators = [];
                for (var _h = 0, _j = data["operators"]; _h < _j.length; _h++) {
                    var item = _j[_h];
                    this.operators.push(User.fromJS(item));
                }
            }
            if (data["checkStatuses"] && data["checkStatuses"].constructor === Array) {
                this.checkStatuses = [];
                for (var _k = 0, _l = data["checkStatuses"]; _k < _l.length; _k++) {
                    var item = _l[_k];
                    this.checkStatuses.push(item);
                }
            }
        }
    };
    GateRecordFilters.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GateRecordFilters();
        result.init(data);
        return result;
    };
    GateRecordFilters.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.deviceTypes && this.deviceTypes.constructor === Array) {
            data["deviceTypes"] = [];
            for (var _i = 0, _a = this.deviceTypes; _i < _a.length; _i++) {
                var item = _a[_i];
                data["deviceTypes"].push(item);
            }
        }
        if (this.devices && this.devices.constructor === Array) {
            data["devices"] = [];
            for (var _b = 0, _c = this.devices; _b < _c.length; _b++) {
                var item = _c[_b];
                data["devices"].push(item.toJSON());
            }
        }
        if (this.ticketTypes && this.ticketTypes.constructor === Array) {
            data["ticketTypes"] = [];
            for (var _d = 0, _e = this.ticketTypes; _d < _e.length; _d++) {
                var item = _e[_d];
                data["ticketTypes"].push(item);
            }
        }
        if (this.boats && this.boats.constructor === Array) {
            data["boats"] = [];
            for (var _f = 0, _g = this.boats; _f < _g.length; _f++) {
                var item = _g[_f];
                data["boats"].push(item.toJSON());
            }
        }
        if (this.operators && this.operators.constructor === Array) {
            data["operators"] = [];
            for (var _h = 0, _j = this.operators; _h < _j.length; _h++) {
                var item = _j[_h];
                data["operators"].push(item.toJSON());
            }
        }
        if (this.checkStatuses && this.checkStatuses.constructor === Array) {
            data["checkStatuses"] = [];
            for (var _k = 0, _l = this.checkStatuses; _k < _l.length; _k++) {
                var item = _l[_k];
                data["checkStatuses"].push(item);
            }
        }
        return data;
    };
    GateRecordFilters.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GateRecordFilters();
        result.init(json);
        return result;
    };
    return GateRecordFilters;
}());
exports.GateRecordFilters = GateRecordFilters;
var DeviceTypeEnum;
(function (DeviceTypeEnum) {
    DeviceTypeEnum[DeviceTypeEnum["TicketMachine"] = "TicketMachine"] = "TicketMachine";
    DeviceTypeEnum[DeviceTypeEnum["GateMachine"] = "SelfhelpMachine"] = "GateMachine";
    DeviceTypeEnum[DeviceTypeEnum["FaceMachine"] = "GateMachine"] = "FaceMachine";
    DeviceTypeEnum[DeviceTypeEnum["SelfhelpMachine"] = "HandMachine"] = "SelfhelpMachine";
    DeviceTypeEnum[DeviceTypeEnum["HandMachine"] = "FaceMachine"] = "HandMachine";
})(DeviceTypeEnum = exports.DeviceTypeEnum || (exports.DeviceTypeEnum = {}));
var Device = /** @class */ (function () {
    function Device(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Device.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketStationId = data["ticketStationId"];
            this.deviceCode = data["deviceCode"];
            this.deviceName = data["deviceName"];
            this.ipAddress = data["ipAddress"];
            this.port = data["port"];
            this.deviceType = data["deviceType"];
            this.secretKey = data["secretKey"];
            this.deviceStatus = data["deviceStatus"];
            this.isEnabled = data["isEnabled"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Device.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Device();
        result.init(data);
        return result;
    };
    Device.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketStationId"] = this.ticketStationId;
        data["deviceCode"] = this.deviceCode;
        data["deviceName"] = this.deviceName;
        data["ipAddress"] = this.ipAddress;
        data["port"] = this.port;
        data["deviceType"] = this.deviceType;
        data["secretKey"] = this.secretKey;
        data["deviceStatus"] = this.deviceStatus;
        data["isEnabled"] = this.isEnabled;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Device.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Device();
        result.init(json);
        return result;
    };
    return Device;
}());
exports.Device = Device;
var TicketTypeEnum;
(function (TicketTypeEnum) {
    TicketTypeEnum[TicketTypeEnum["Card"] = "Card"] = "Card";
    TicketTypeEnum[TicketTypeEnum["Paper"] = "Paper"] = "Paper";
})(TicketTypeEnum = exports.TicketTypeEnum || (exports.TicketTypeEnum = {}));
var CheckStatusEnum;
(function (CheckStatusEnum) {
    CheckStatusEnum[CheckStatusEnum["CheckSuccess"] = "CheckSuccess"] = "CheckSuccess";
    CheckStatusEnum[CheckStatusEnum["CheckFalse"] = "CheckFalse"] = "CheckFalse";
})(CheckStatusEnum = exports.CheckStatusEnum || (exports.CheckStatusEnum = {}));
var DeviceStatusEnum;
(function (DeviceStatusEnum) {
    DeviceStatusEnum[DeviceStatusEnum["Not"] = "Not"] = "Not";
    DeviceStatusEnum[DeviceStatusEnum["Using"] = "Using"] = "Using";
    DeviceStatusEnum[DeviceStatusEnum["Closing"] = "Closing"] = "Closing";
})(DeviceStatusEnum = exports.DeviceStatusEnum || (exports.DeviceStatusEnum = {}));
var StatsPagedResultDtoOfGateRecordResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfGateRecordResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfGateRecordResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? GateRecordResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(GateRecordResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfGateRecordResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfGateRecordResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfGateRecordResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfGateRecordResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfGateRecordResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfGateRecordResultDto;
}());
exports.StatsPagedResultDtoOfGateRecordResultDto = StatsPagedResultDtoOfGateRecordResultDto;
var GateRecordResultDto = /** @class */ (function () {
    function GateRecordResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GateRecordResultDto.prototype.init = function (data) {
        if (data) {
            this.user = data["user"] ? User.fromJS(data["user"]) : undefined;
            this.deviceName = data["deviceName"];
            this.deviceId = data["deviceId"];
            this.returnState = data["returnState"];
            this.ticketName = data["ticketName"];
            this.ticketNo = data["ticketNo"];
            this.visitValue = data["visitValue"];
            this.statusCode = data["statusCode"];
            this.statusText = data["statusText"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : undefined;
            this.scheduleCode = data["scheduleCode"];
            this.boatName = data["boatName"];
        }
    };
    GateRecordResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GateRecordResultDto();
        result.init(data);
        return result;
    };
    GateRecordResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["deviceName"] = this.deviceName;
        data["deviceId"] = this.deviceId;
        data["returnState"] = this.returnState;
        data["ticketName"] = this.ticketName;
        data["ticketNo"] = this.ticketNo;
        data["visitValue"] = this.visitValue;
        data["statusCode"] = this.statusCode;
        data["statusText"] = this.statusText;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : undefined;
        data["scheduleCode"] = this.scheduleCode;
        data["boatName"] = this.boatName;
        return data;
    };
    GateRecordResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GateRecordResultDto();
        result.init(json);
        return result;
    };
    return GateRecordResultDto;
}());
exports.GateRecordResultDto = GateRecordResultDto;
var ReturnStateEnum;
(function (ReturnStateEnum) {
    ReturnStateEnum[ReturnStateEnum["Success"] = "Success"] = "Success";
    ReturnStateEnum[ReturnStateEnum["False"] = "False"] = "False";
})(ReturnStateEnum = exports.ReturnStateEnum || (exports.ReturnStateEnum = {}));
/** 上传图片结果Dto */
var PictureResultDto = /** @class */ (function () {
    function PictureResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PictureResultDto.prototype.init = function (data) {
        if (data) {
            this.uri = data["uri"];
        }
    };
    PictureResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PictureResultDto();
        result.init(data);
        return result;
    };
    PictureResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["uri"] = this.uri;
        return data;
    };
    PictureResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PictureResultDto();
        result.init(json);
        return result;
    };
    return PictureResultDto;
}());
exports.PictureResultDto = PictureResultDto;
var ActivateEmailInput = /** @class */ (function () {
    function ActivateEmailInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivateEmailInput.prototype.init = function (data) {
        if (data) {
            this.userId = data["userId"];
            this.confirmationCode = data["confirmationCode"];
            this.c = data["c"];
        }
    };
    ActivateEmailInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivateEmailInput();
        result.init(data);
        return result;
    };
    ActivateEmailInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["confirmationCode"] = this.confirmationCode;
        data["c"] = this.c;
        return data;
    };
    ActivateEmailInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivateEmailInput();
        result.init(json);
        return result;
    };
    return ActivateEmailInput;
}());
exports.ActivateEmailInput = ActivateEmailInput;
var ImpersonateOutput = /** @class */ (function () {
    function ImpersonateOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ImpersonateOutput.prototype.init = function (data) {
        if (data) {
            this.impersonationToken = data["impersonationToken"];
            this.tenancyName = data["tenancyName"];
        }
    };
    ImpersonateOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ImpersonateOutput();
        result.init(data);
        return result;
    };
    ImpersonateOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["impersonationToken"] = this.impersonationToken;
        data["tenancyName"] = this.tenancyName;
        return data;
    };
    ImpersonateOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ImpersonateOutput();
        result.init(json);
        return result;
    };
    return ImpersonateOutput;
}());
exports.ImpersonateOutput = ImpersonateOutput;
var ExpressionOfFuncOfMenuAndBoolean = /** @class */ (function () {
    function ExpressionOfFuncOfMenuAndBoolean(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExpressionOfFuncOfMenuAndBoolean.prototype.init = function (data) {
        if (data) {
            this.type = data["type"];
            this.nodeType = data["nodeType"];
            if (data["parameters"] && data["parameters"].constructor === Array) {
                this.parameters = [];
                for (var _i = 0, _a = data["parameters"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.parameters.push(ParameterExpression.fromJS(item));
                }
            }
            this.name = data["name"];
            this.body = data["body"] ? Expression.fromJS(data["body"]) : undefined;
            this.returnType = data["returnType"];
            this.tailCall = data["tailCall"];
            this.canReduce = data["canReduce"];
        }
    };
    ExpressionOfFuncOfMenuAndBoolean.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExpressionOfFuncOfMenuAndBoolean();
        result.init(data);
        return result;
    };
    ExpressionOfFuncOfMenuAndBoolean.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["nodeType"] = this.nodeType;
        if (this.parameters && this.parameters.constructor === Array) {
            data["parameters"] = [];
            for (var _i = 0, _a = this.parameters; _i < _a.length; _i++) {
                var item = _a[_i];
                data["parameters"].push(item.toJSON());
            }
        }
        data["name"] = this.name;
        data["body"] = this.body ? this.body.toJSON() : undefined;
        data["returnType"] = this.returnType;
        data["tailCall"] = this.tailCall;
        data["canReduce"] = this.canReduce;
        return data;
    };
    ExpressionOfFuncOfMenuAndBoolean.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExpressionOfFuncOfMenuAndBoolean();
        result.init(json);
        return result;
    };
    return ExpressionOfFuncOfMenuAndBoolean;
}());
exports.ExpressionOfFuncOfMenuAndBoolean = ExpressionOfFuncOfMenuAndBoolean;
var ExpressionType;
(function (ExpressionType) {
    ExpressionType[ExpressionType["Add"] = "Add"] = "Add";
    ExpressionType[ExpressionType["AddChecked"] = "AddChecked"] = "AddChecked";
    ExpressionType[ExpressionType["And"] = "And"] = "And";
    ExpressionType[ExpressionType["AndAlso"] = "AndAlso"] = "AndAlso";
    ExpressionType[ExpressionType["ArrayLength"] = "ArrayLength"] = "ArrayLength";
    ExpressionType[ExpressionType["ArrayIndex"] = "ArrayIndex"] = "ArrayIndex";
    ExpressionType[ExpressionType["Call"] = "Call"] = "Call";
    ExpressionType[ExpressionType["Coalesce"] = "Coalesce"] = "Coalesce";
    ExpressionType[ExpressionType["Conditional"] = "Conditional"] = "Conditional";
    ExpressionType[ExpressionType["Constant"] = "Constant"] = "Constant";
    ExpressionType[ExpressionType["Convert"] = "Convert"] = "Convert";
    ExpressionType[ExpressionType["ConvertChecked"] = "ConvertChecked"] = "ConvertChecked";
    ExpressionType[ExpressionType["Divide"] = "Divide"] = "Divide";
    ExpressionType[ExpressionType["Equal"] = "Equal"] = "Equal";
    ExpressionType[ExpressionType["ExclusiveOr"] = "ExclusiveOr"] = "ExclusiveOr";
    ExpressionType[ExpressionType["GreaterThan"] = "GreaterThan"] = "GreaterThan";
    ExpressionType[ExpressionType["GreaterThanOrEqual"] = "GreaterThanOrEqual"] = "GreaterThanOrEqual";
    ExpressionType[ExpressionType["Invoke"] = "Invoke"] = "Invoke";
    ExpressionType[ExpressionType["Lambda"] = "Lambda"] = "Lambda";
    ExpressionType[ExpressionType["LeftShift"] = "LeftShift"] = "LeftShift";
    ExpressionType[ExpressionType["LessThan"] = "LessThan"] = "LessThan";
    ExpressionType[ExpressionType["LessThanOrEqual"] = "LessThanOrEqual"] = "LessThanOrEqual";
    ExpressionType[ExpressionType["ListInit"] = "ListInit"] = "ListInit";
    ExpressionType[ExpressionType["MemberAccess"] = "MemberAccess"] = "MemberAccess";
    ExpressionType[ExpressionType["MemberInit"] = "MemberInit"] = "MemberInit";
    ExpressionType[ExpressionType["Modulo"] = "Modulo"] = "Modulo";
    ExpressionType[ExpressionType["Multiply"] = "Multiply"] = "Multiply";
    ExpressionType[ExpressionType["MultiplyChecked"] = "MultiplyChecked"] = "MultiplyChecked";
    ExpressionType[ExpressionType["Negate"] = "Negate"] = "Negate";
    ExpressionType[ExpressionType["UnaryPlus"] = "UnaryPlus"] = "UnaryPlus";
    ExpressionType[ExpressionType["NegateChecked"] = "NegateChecked"] = "NegateChecked";
    ExpressionType[ExpressionType["New"] = "New"] = "New";
    ExpressionType[ExpressionType["NewArrayInit"] = "NewArrayInit"] = "NewArrayInit";
    ExpressionType[ExpressionType["NewArrayBounds"] = "NewArrayBounds"] = "NewArrayBounds";
    ExpressionType[ExpressionType["Not"] = "Not"] = "Not";
    ExpressionType[ExpressionType["NotEqual"] = "NotEqual"] = "NotEqual";
    ExpressionType[ExpressionType["Or"] = "Or"] = "Or";
    ExpressionType[ExpressionType["OrElse"] = "OrElse"] = "OrElse";
    ExpressionType[ExpressionType["Parameter"] = "Parameter"] = "Parameter";
    ExpressionType[ExpressionType["Power"] = "Power"] = "Power";
    ExpressionType[ExpressionType["Quote"] = "Quote"] = "Quote";
    ExpressionType[ExpressionType["RightShift"] = "RightShift"] = "RightShift";
    ExpressionType[ExpressionType["Subtract"] = "Subtract"] = "Subtract";
    ExpressionType[ExpressionType["SubtractChecked"] = "SubtractChecked"] = "SubtractChecked";
    ExpressionType[ExpressionType["TypeAs"] = "TypeAs"] = "TypeAs";
    ExpressionType[ExpressionType["TypeIs"] = "TypeIs"] = "TypeIs";
    ExpressionType[ExpressionType["Assign"] = "Assign"] = "Assign";
    ExpressionType[ExpressionType["Block"] = "Block"] = "Block";
    ExpressionType[ExpressionType["DebugInfo"] = "DebugInfo"] = "DebugInfo";
    ExpressionType[ExpressionType["Decrement"] = "Decrement"] = "Decrement";
    ExpressionType[ExpressionType["Dynamic"] = "Dynamic"] = "Dynamic";
    ExpressionType[ExpressionType["Default"] = "Default"] = "Default";
    ExpressionType[ExpressionType["Extension"] = "Extension"] = "Extension";
    ExpressionType[ExpressionType["Goto"] = "Goto"] = "Goto";
    ExpressionType[ExpressionType["Increment"] = "Increment"] = "Increment";
    ExpressionType[ExpressionType["Index"] = "Index"] = "Index";
    ExpressionType[ExpressionType["Label"] = "Label"] = "Label";
    ExpressionType[ExpressionType["RuntimeVariables"] = "RuntimeVariables"] = "RuntimeVariables";
    ExpressionType[ExpressionType["Loop"] = "Loop"] = "Loop";
    ExpressionType[ExpressionType["Switch"] = "Switch"] = "Switch";
    ExpressionType[ExpressionType["Throw"] = "Throw"] = "Throw";
    ExpressionType[ExpressionType["Try"] = "Try"] = "Try";
    ExpressionType[ExpressionType["Unbox"] = "Unbox"] = "Unbox";
    ExpressionType[ExpressionType["AddAssign"] = "AddAssign"] = "AddAssign";
    ExpressionType[ExpressionType["AndAssign"] = "AndAssign"] = "AndAssign";
    ExpressionType[ExpressionType["DivideAssign"] = "DivideAssign"] = "DivideAssign";
    ExpressionType[ExpressionType["ExclusiveOrAssign"] = "ExclusiveOrAssign"] = "ExclusiveOrAssign";
    ExpressionType[ExpressionType["LeftShiftAssign"] = "LeftShiftAssign"] = "LeftShiftAssign";
    ExpressionType[ExpressionType["ModuloAssign"] = "ModuloAssign"] = "ModuloAssign";
    ExpressionType[ExpressionType["MultiplyAssign"] = "MultiplyAssign"] = "MultiplyAssign";
    ExpressionType[ExpressionType["OrAssign"] = "OrAssign"] = "OrAssign";
    ExpressionType[ExpressionType["PowerAssign"] = "PowerAssign"] = "PowerAssign";
    ExpressionType[ExpressionType["RightShiftAssign"] = "RightShiftAssign"] = "RightShiftAssign";
    ExpressionType[ExpressionType["SubtractAssign"] = "SubtractAssign"] = "SubtractAssign";
    ExpressionType[ExpressionType["AddAssignChecked"] = "AddAssignChecked"] = "AddAssignChecked";
    ExpressionType[ExpressionType["MultiplyAssignChecked"] = "MultiplyAssignChecked"] = "MultiplyAssignChecked";
    ExpressionType[ExpressionType["SubtractAssignChecked"] = "SubtractAssignChecked"] = "SubtractAssignChecked";
    ExpressionType[ExpressionType["PreIncrementAssign"] = "PreIncrementAssign"] = "PreIncrementAssign";
    ExpressionType[ExpressionType["PreDecrementAssign"] = "PreDecrementAssign"] = "PreDecrementAssign";
    ExpressionType[ExpressionType["PostIncrementAssign"] = "PostIncrementAssign"] = "PostIncrementAssign";
    ExpressionType[ExpressionType["PostDecrementAssign"] = "PostDecrementAssign"] = "PostDecrementAssign";
    ExpressionType[ExpressionType["TypeEqual"] = "TypeEqual"] = "TypeEqual";
    ExpressionType[ExpressionType["OnesComplement"] = "OnesComplement"] = "OnesComplement";
    ExpressionType[ExpressionType["IsTrue"] = "IsTrue"] = "IsTrue";
    ExpressionType[ExpressionType["IsFalse"] = "IsFalse"] = "IsFalse";
})(ExpressionType = exports.ExpressionType || (exports.ExpressionType = {}));
var ParameterExpression = /** @class */ (function () {
    function ParameterExpression(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ParameterExpression.prototype.init = function (data) {
        if (data) {
            this.type = data["type"];
            this.nodeType = data["nodeType"];
            this.name = data["name"];
            this.isByRef = data["isByRef"];
            this.canReduce = data["canReduce"];
        }
    };
    ParameterExpression.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ParameterExpression();
        result.init(data);
        return result;
    };
    ParameterExpression.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["nodeType"] = this.nodeType;
        data["name"] = this.name;
        data["isByRef"] = this.isByRef;
        data["canReduce"] = this.canReduce;
        return data;
    };
    ParameterExpression.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ParameterExpression();
        result.init(json);
        return result;
    };
    return ParameterExpression;
}());
exports.ParameterExpression = ParameterExpression;
var Expression = /** @class */ (function () {
    function Expression(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Expression.prototype.init = function (data) {
        if (data) {
            this.nodeType = data["nodeType"];
            this.type = data["type"];
            this.canReduce = data["canReduce"];
        }
    };
    Expression.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Expression();
        result.init(data);
        return result;
    };
    Expression.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["nodeType"] = this.nodeType;
        data["type"] = this.type;
        data["canReduce"] = this.canReduce;
        return data;
    };
    Expression.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Expression();
        result.init(json);
        return result;
    };
    return Expression;
}());
exports.Expression = Expression;
var ImpersonateInput = /** @class */ (function () {
    function ImpersonateInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ImpersonateInput.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    };
    ImpersonateInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ImpersonateInput();
        result.init(data);
        return result;
    };
    ImpersonateInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data;
    };
    ImpersonateInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ImpersonateInput();
        result.init(json);
        return result;
    };
    return ImpersonateInput;
}());
exports.ImpersonateInput = ImpersonateInput;
var IsTenantAvailableInput = /** @class */ (function () {
    function IsTenantAvailableInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IsTenantAvailableInput.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    };
    IsTenantAvailableInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    };
    IsTenantAvailableInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data;
    };
    IsTenantAvailableInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new IsTenantAvailableInput();
        result.init(json);
        return result;
    };
    return IsTenantAvailableInput;
}());
exports.IsTenantAvailableInput = IsTenantAvailableInput;
var IsTenantAvailableOutput = /** @class */ (function () {
    function IsTenantAvailableOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IsTenantAvailableOutput.prototype.init = function (data) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
        }
    };
    IsTenantAvailableOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    };
    IsTenantAvailableOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data;
    };
    IsTenantAvailableOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new IsTenantAvailableOutput();
        result.init(json);
        return result;
    };
    return IsTenantAvailableOutput;
}());
exports.IsTenantAvailableOutput = IsTenantAvailableOutput;
var TenantAvailabilityState;
(function (TenantAvailabilityState) {
    TenantAvailabilityState[TenantAvailabilityState["Available"] = "Available"] = "Available";
    TenantAvailabilityState[TenantAvailabilityState["InActive"] = "InActive"] = "InActive";
    TenantAvailabilityState[TenantAvailabilityState["NotFound"] = "NotFound"] = "NotFound";
})(TenantAvailabilityState = exports.TenantAvailabilityState || (exports.TenantAvailabilityState = {}));
var RegisterInput = /** @class */ (function () {
    function RegisterInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RegisterInput.prototype.init = function (data) {
        if (data) {
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.verificationCode = data["verificationCode"];
        }
    };
    RegisterInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RegisterInput();
        result.init(data);
        return result;
    };
    RegisterInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["verificationCode"] = this.verificationCode;
        return data;
    };
    RegisterInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RegisterInput();
        result.init(json);
        return result;
    };
    return RegisterInput;
}());
exports.RegisterInput = RegisterInput;
var RegisterOutput = /** @class */ (function () {
    function RegisterOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RegisterOutput.prototype.init = function (data) {
        if (data) {
            this.canLogin = data["canLogin"];
        }
    };
    RegisterOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RegisterOutput();
        result.init(data);
        return result;
    };
    RegisterOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data;
    };
    RegisterOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RegisterOutput();
        result.init(json);
        return result;
    };
    return RegisterOutput;
}());
exports.RegisterOutput = RegisterOutput;
var ResetPasswordInput = /** @class */ (function () {
    function ResetPasswordInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ResetPasswordInput.prototype.init = function (data) {
        if (data) {
            this.userId = data["userId"];
            this.resetCode = data["resetCode"];
            this.password = data["password"];
            this.returnUrl = data["returnUrl"];
            this.singleSignIn = data["singleSignIn"];
        }
    };
    ResetPasswordInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ResetPasswordInput();
        result.init(data);
        return result;
    };
    ResetPasswordInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["resetCode"] = this.resetCode;
        data["password"] = this.password;
        data["returnUrl"] = this.returnUrl;
        data["singleSignIn"] = this.singleSignIn;
        return data;
    };
    ResetPasswordInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ResetPasswordInput();
        result.init(json);
        return result;
    };
    return ResetPasswordInput;
}());
exports.ResetPasswordInput = ResetPasswordInput;
var ResetPasswordOutput = /** @class */ (function () {
    function ResetPasswordOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ResetPasswordOutput.prototype.init = function (data) {
        if (data) {
            this.canLogin = data["canLogin"];
            this.userName = data["userName"];
        }
    };
    ResetPasswordOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ResetPasswordOutput();
        result.init(data);
        return result;
    };
    ResetPasswordOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        data["userName"] = this.userName;
        return data;
    };
    ResetPasswordOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ResetPasswordOutput();
        result.init(json);
        return result;
    };
    return ResetPasswordOutput;
}());
exports.ResetPasswordOutput = ResetPasswordOutput;
var ResolveTenantIdInput = /** @class */ (function () {
    function ResolveTenantIdInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ResolveTenantIdInput.prototype.init = function (data) {
        if (data) {
            this.c = data["c"];
        }
    };
    ResolveTenantIdInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ResolveTenantIdInput();
        result.init(data);
        return result;
    };
    ResolveTenantIdInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["c"] = this.c;
        return data;
    };
    ResolveTenantIdInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ResolveTenantIdInput();
        result.init(json);
        return result;
    };
    return ResolveTenantIdInput;
}());
exports.ResolveTenantIdInput = ResolveTenantIdInput;
var SendEmailActivationLinkInput = /** @class */ (function () {
    function SendEmailActivationLinkInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SendEmailActivationLinkInput.prototype.init = function (data) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    };
    SendEmailActivationLinkInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SendEmailActivationLinkInput();
        result.init(data);
        return result;
    };
    SendEmailActivationLinkInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data;
    };
    SendEmailActivationLinkInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SendEmailActivationLinkInput();
        result.init(json);
        return result;
    };
    return SendEmailActivationLinkInput;
}());
exports.SendEmailActivationLinkInput = SendEmailActivationLinkInput;
var SendPasswordResetCodeInput = /** @class */ (function () {
    function SendPasswordResetCodeInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SendPasswordResetCodeInput.prototype.init = function (data) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    };
    SendPasswordResetCodeInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SendPasswordResetCodeInput();
        result.init(data);
        return result;
    };
    SendPasswordResetCodeInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data;
    };
    SendPasswordResetCodeInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SendPasswordResetCodeInput();
        result.init(json);
        return result;
    };
    return SendPasswordResetCodeInput;
}());
exports.SendPasswordResetCodeInput = SendPasswordResetCodeInput;
var SwitchToLinkedAccountInput = /** @class */ (function () {
    function SwitchToLinkedAccountInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SwitchToLinkedAccountInput.prototype.init = function (data) {
        if (data) {
            this.targetTenantId = data["targetTenantId"];
            this.targetUserId = data["targetUserId"];
        }
    };
    SwitchToLinkedAccountInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SwitchToLinkedAccountInput();
        result.init(data);
        return result;
    };
    SwitchToLinkedAccountInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["targetTenantId"] = this.targetTenantId;
        data["targetUserId"] = this.targetUserId;
        return data;
    };
    SwitchToLinkedAccountInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SwitchToLinkedAccountInput();
        result.init(json);
        return result;
    };
    return SwitchToLinkedAccountInput;
}());
exports.SwitchToLinkedAccountInput = SwitchToLinkedAccountInput;
var SwitchToLinkedAccountOutput = /** @class */ (function () {
    function SwitchToLinkedAccountOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SwitchToLinkedAccountOutput.prototype.init = function (data) {
        if (data) {
            this.switchAccountToken = data["switchAccountToken"];
            this.tenancyName = data["tenancyName"];
        }
    };
    SwitchToLinkedAccountOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SwitchToLinkedAccountOutput();
        result.init(data);
        return result;
    };
    SwitchToLinkedAccountOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["switchAccountToken"] = this.switchAccountToken;
        data["tenancyName"] = this.tenancyName;
        return data;
    };
    SwitchToLinkedAccountOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SwitchToLinkedAccountOutput();
        result.init(json);
        return result;
    };
    return SwitchToLinkedAccountOutput;
}());
exports.SwitchToLinkedAccountOutput = SwitchToLinkedAccountOutput;
var CreateOrUpdateAccountDetailInput = /** @class */ (function () {
    function CreateOrUpdateAccountDetailInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.accountDetail = new AccountDetailEditDto();
        }
    }
    CreateOrUpdateAccountDetailInput.prototype.init = function (data) {
        if (data) {
            this.accountDetail = data["accountDetail"] ? AccountDetailEditDto.fromJS(data["accountDetail"]) : new AccountDetailEditDto();
        }
    };
    CreateOrUpdateAccountDetailInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateAccountDetailInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateAccountDetailInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["accountDetail"] = this.accountDetail ? this.accountDetail.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateAccountDetailInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateAccountDetailInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateAccountDetailInput;
}());
exports.CreateOrUpdateAccountDetailInput = CreateOrUpdateAccountDetailInput;
var AccountDetailEditDto = /** @class */ (function () {
    function AccountDetailEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AccountDetailEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.accountId = data["accountId"];
            this.activityDetailId = data["activityDetailId"];
        }
    };
    AccountDetailEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AccountDetailEditDto();
        result.init(data);
        return result;
    };
    AccountDetailEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountId"] = this.accountId;
        data["activityDetailId"] = this.activityDetailId;
        return data;
    };
    AccountDetailEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AccountDetailEditDto();
        result.init(json);
        return result;
    };
    return AccountDetailEditDto;
}());
exports.AccountDetailEditDto = AccountDetailEditDto;
var AccountDetailListDto = /** @class */ (function () {
    function AccountDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AccountDetailListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.accountId = data["accountId"];
            this.account = data["account"] ? Account.fromJS(data["account"]) : undefined;
            this.activityDetailId = data["activityDetailId"];
            this.activityDetail = data["activityDetail"] ? ActivityDetail.fromJS(data["activityDetail"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    AccountDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AccountDetailListDto();
        result.init(data);
        return result;
    };
    AccountDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["accountId"] = this.accountId;
        data["account"] = this.account ? this.account.toJSON() : undefined;
        data["activityDetailId"] = this.activityDetailId;
        data["activityDetail"] = this.activityDetail ? this.activityDetail.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    AccountDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AccountDetailListDto();
        result.init(json);
        return result;
    };
    return AccountDetailListDto;
}());
exports.AccountDetailListDto = AccountDetailListDto;
var Account = /** @class */ (function () {
    function Account(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Account.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.accountNo = data["accountNo"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : undefined;
            this.quantity = data["quantity"];
            this.amount = data["amount"];
            this.accountStatus = data["accountStatus"];
            this.collectiorId = data["collectiorId"];
            this.collectior = data["collectior"] ? User.fromJS(data["collectior"]) : undefined;
            this.collectionTime = data["collectionTime"] ? moment(data["collectionTime"].toString()) : undefined;
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.remark = data["remark"];
            this.voucherNo = data["voucherNo"];
            this.rAmount = data["rAmount"];
            this.totalAmount = data["totalAmount"];
            this.rQuantity = data["rQuantity"];
            this.totalQuantity = data["totalQuantity"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Account.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Account();
        result.init(data);
        return result;
    };
    Account.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["accountNo"] = this.accountNo;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : undefined;
        data["quantity"] = this.quantity;
        data["amount"] = this.amount;
        data["accountStatus"] = this.accountStatus;
        data["collectiorId"] = this.collectiorId;
        data["collectior"] = this.collectior ? this.collectior.toJSON() : undefined;
        data["collectionTime"] = this.collectionTime ? this.collectionTime.toISOString() : undefined;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["remark"] = this.remark;
        data["voucherNo"] = this.voucherNo;
        data["rAmount"] = this.rAmount;
        data["totalAmount"] = this.totalAmount;
        data["rQuantity"] = this.rQuantity;
        data["totalQuantity"] = this.totalQuantity;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Account.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Account();
        result.init(json);
        return result;
    };
    return Account;
}());
exports.Account = Account;
var ActivityDetail = /** @class */ (function () {
    function ActivityDetail(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityDetail.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityId = data["activityId"];
            this.activity = data["activity"] ? Activity.fromJS(data["activity"]) : undefined;
            this.ticketPriceId = data["ticketPriceId"];
            this.ticketPrice = data["ticketPrice"] ? TicketPrice.fromJS(data["ticketPrice"]) : undefined;
            this.quantity = data["quantity"];
            this.unitPrice = data["unitPrice"];
            this.discount = data["discount"];
            this.salePrice = data["salePrice"];
            this.totalAmount = data["totalAmount"];
            this.remark = data["remark"];
            this.accountId = data["accountId"];
            this.accountDetailId = data["accountDetailId"];
            this.orgDetailId = data["orgDetailId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ActivityDetail.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityDetail();
        result.init(data);
        return result;
    };
    ActivityDetail.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityId"] = this.activityId;
        data["activity"] = this.activity ? this.activity.toJSON() : undefined;
        data["ticketPriceId"] = this.ticketPriceId;
        data["ticketPrice"] = this.ticketPrice ? this.ticketPrice.toJSON() : undefined;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["discount"] = this.discount;
        data["salePrice"] = this.salePrice;
        data["totalAmount"] = this.totalAmount;
        data["remark"] = this.remark;
        data["accountId"] = this.accountId;
        data["accountDetailId"] = this.accountDetailId;
        data["orgDetailId"] = this.orgDetailId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ActivityDetail.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityDetail();
        result.init(json);
        return result;
    };
    return ActivityDetail;
}());
exports.ActivityDetail = ActivityDetail;
var AccountStatusEnum;
(function (AccountStatusEnum) {
    AccountStatusEnum[AccountStatusEnum["NotAccount"] = "IsAccount"] = "NotAccount";
    AccountStatusEnum[AccountStatusEnum["IsAccount"] = "NotAccount"] = "IsAccount";
})(AccountStatusEnum = exports.AccountStatusEnum || (exports.AccountStatusEnum = {}));
var PayMethod = /** @class */ (function () {
    function PayMethod(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PayMethod.prototype.init = function (data) {
        if (data) {
            this.payName = data["payName"];
            this.payCode = data["payCode"];
            this.sort = data["sort"];
            this.isEnabled = data["isEnabled"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    PayMethod.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PayMethod();
        result.init(data);
        return result;
    };
    PayMethod.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["payName"] = this.payName;
        data["payCode"] = this.payCode;
        data["sort"] = this.sort;
        data["isEnabled"] = this.isEnabled;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    PayMethod.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PayMethod();
        result.init(json);
        return result;
    };
    return PayMethod;
}());
exports.PayMethod = PayMethod;
var Activity = /** @class */ (function () {
    function Activity(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Activity.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityNo = data["activityNo"];
            this.sourceId = data["sourceId"];
            this.source = data["source"] ? Source.fromJS(data["source"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.orgActivityId = data["orgActivityId"];
            this.activityDate = data["activityDate"] ? moment(data["activityDate"].toString()) : undefined;
            this.playDate = data["playDate"] ? moment(data["playDate"].toString()) : undefined;
            this.customerId = data["customerId"];
            this.buyer = data["buyer"];
            this.mobile = data["mobile"];
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.voucherNo = data["voucherNo"];
            this.payStatus = data["payStatus"];
            this.activityType = data["activityType"];
            this.remark = data["remark"];
            this.isPrint = data["isPrint"];
            this.closed = data["closed"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            this.accountsId = data["accountsId"];
            this.account = data["account"] ? Account.fromJS(data["account"]) : undefined;
            this.orderType = data["orderType"];
            this.travelAgencyId = data["travelAgencyId"];
            this.travelAgency = data["travelAgency"] ? TravelAgency.fromJS(data["travelAgency"]) : undefined;
            if (data["activityDetails"] && data["activityDetails"].constructor === Array) {
                this.activityDetails = [];
                for (var _i = 0, _a = data["activityDetails"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.activityDetails.push(ActivityDetail.fromJS(item));
                }
            }
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Activity.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Activity();
        result.init(data);
        return result;
    };
    Activity.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityNo"] = this.activityNo;
        data["sourceId"] = this.sourceId;
        data["source"] = this.source ? this.source.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["orgActivityId"] = this.orgActivityId;
        data["activityDate"] = this.activityDate ? this.activityDate.toISOString() : undefined;
        data["playDate"] = this.playDate ? this.playDate.toISOString() : undefined;
        data["customerId"] = this.customerId;
        data["buyer"] = this.buyer;
        data["mobile"] = this.mobile;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["voucherNo"] = this.voucherNo;
        data["payStatus"] = this.payStatus;
        data["activityType"] = this.activityType;
        data["remark"] = this.remark;
        data["isPrint"] = this.isPrint;
        data["closed"] = this.closed;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        data["accountsId"] = this.accountsId;
        data["account"] = this.account ? this.account.toJSON() : undefined;
        data["orderType"] = this.orderType;
        data["travelAgencyId"] = this.travelAgencyId;
        data["travelAgency"] = this.travelAgency ? this.travelAgency.toJSON() : undefined;
        if (this.activityDetails && this.activityDetails.constructor === Array) {
            data["activityDetails"] = [];
            for (var _i = 0, _a = this.activityDetails; _i < _a.length; _i++) {
                var item = _a[_i];
                data["activityDetails"].push(item.toJSON());
            }
        }
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Activity.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Activity();
        result.init(json);
        return result;
    };
    return Activity;
}());
exports.Activity = Activity;
var TicketPrice = /** @class */ (function () {
    function TicketPrice(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.discount = 1;
            this.rDiscount = 1;
        }
    }
    TicketPrice.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.price = data["price"];
            this.discount = data["discount"] !== undefined ? data["discount"] : 1;
            this.rDiscount = data["rDiscount"] !== undefined ? data["rDiscount"] : 1;
            this.upperTime = data["upperTime"] ? moment(data["upperTime"].toString()) : undefined;
            this.lowerTime = data["lowerTime"] ? moment(data["lowerTime"].toString()) : undefined;
            this.position = data["position"];
            this.isEnabled = data["isEnabled"];
            this.sort = data["sort"];
            this.ticketName = data["ticketName"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketPrice.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketPrice();
        result.init(data);
        return result;
    };
    TicketPrice.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["rDiscount"] = this.rDiscount;
        data["upperTime"] = this.upperTime ? this.upperTime.toISOString() : undefined;
        data["lowerTime"] = this.lowerTime ? this.lowerTime.toISOString() : undefined;
        data["position"] = this.position;
        data["isEnabled"] = this.isEnabled;
        data["sort"] = this.sort;
        data["ticketName"] = this.ticketName;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketPrice.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketPrice();
        result.init(json);
        return result;
    };
    return TicketPrice;
}());
exports.TicketPrice = TicketPrice;
var Customer = /** @class */ (function () {
    function Customer(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Customer.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.customerName = data["customerName"];
            this.mobile = data["mobile"];
            this.loginPwd = data["loginPwd"];
            this.sex = data["sex"];
            this.country = data["country"];
            this.province = data["province"];
            this.city = data["city"];
            this.county = data["county"];
            this.certificatesNum = data["certificatesNum"];
            this.verifiableType = data["verifiableType"];
            this.job = data["job"];
            this.openID = data["openID"];
            this.photo = data["photo"];
            this.dateOfBirth = data["dateOfBirth"] ? moment(data["dateOfBirth"].toString()) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Customer.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Customer();
        result.init(data);
        return result;
    };
    Customer.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["customerName"] = this.customerName;
        data["mobile"] = this.mobile;
        data["loginPwd"] = this.loginPwd;
        data["sex"] = this.sex;
        data["country"] = this.country;
        data["province"] = this.province;
        data["city"] = this.city;
        data["county"] = this.county;
        data["certificatesNum"] = this.certificatesNum;
        data["verifiableType"] = this.verifiableType;
        data["job"] = this.job;
        data["openID"] = this.openID;
        data["photo"] = this.photo;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Customer.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Customer();
        result.init(json);
        return result;
    };
    return Customer;
}());
exports.Customer = Customer;
var Source = /** @class */ (function () {
    function Source(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Source.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.sourceName = data["sourceName"];
            this.sourceCode = data["sourceCode"];
            this.discount = data["discount"];
            this.rDiscount = data["rDiscount"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Source.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Source();
        result.init(data);
        return result;
    };
    Source.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["sourceName"] = this.sourceName;
        data["sourceCode"] = this.sourceCode;
        data["discount"] = this.discount;
        data["rDiscount"] = this.rDiscount;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Source.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Source();
        result.init(json);
        return result;
    };
    return Source;
}());
exports.Source = Source;
var PayStatusEnum;
(function (PayStatusEnum) {
    PayStatusEnum[PayStatusEnum["NotPay"] = "NotPay"] = "NotPay";
    PayStatusEnum[PayStatusEnum["PayStatusPayment"] = "PayStatusPayment"] = "PayStatusPayment";
    PayStatusEnum[PayStatusEnum["PayStatusRefund"] = "PayStatusRefund"] = "PayStatusRefund";
    PayStatusEnum[PayStatusEnum["PayStatusClose"] = "PayStatusClose"] = "PayStatusClose";
})(PayStatusEnum = exports.PayStatusEnum || (exports.PayStatusEnum = {}));
var ActivityTypeEnum;
(function (ActivityTypeEnum) {
    ActivityTypeEnum[ActivityTypeEnum["ActivityTypePayment"] = "ActivityTypePayment"] = "ActivityTypePayment";
    ActivityTypeEnum[ActivityTypeEnum["ActivityTypeRefund"] = "ActivityTypeRefund"] = "ActivityTypeRefund";
})(ActivityTypeEnum = exports.ActivityTypeEnum || (exports.ActivityTypeEnum = {}));
var TravelAgency = /** @class */ (function () {
    function TravelAgency(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TravelAgency.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.travelName = data["travelName"];
            this.mobile = data["mobile"];
            this.contacts = data["contacts"];
            this.isEnabled = data["isEnabled"];
            this.discount = data["discount"];
            this.payMethod = data["payMethod"];
            this.totalSum = data["totalSum"];
            this.prepaidAmount = data["prepaidAmount"];
            this.alarmAmount = data["alarmAmount"];
            this.upperLimit = data["upperLimit"];
            this.lowerlimit = data["lowerlimit"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TravelAgency.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TravelAgency();
        result.init(data);
        return result;
    };
    TravelAgency.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["travelName"] = this.travelName;
        data["mobile"] = this.mobile;
        data["contacts"] = this.contacts;
        data["isEnabled"] = this.isEnabled;
        data["discount"] = this.discount;
        data["payMethod"] = this.payMethod;
        data["totalSum"] = this.totalSum;
        data["prepaidAmount"] = this.prepaidAmount;
        data["alarmAmount"] = this.alarmAmount;
        data["upperLimit"] = this.upperLimit;
        data["lowerlimit"] = this.lowerlimit;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TravelAgency.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TravelAgency();
        result.init(json);
        return result;
    };
    return TravelAgency;
}());
exports.TravelAgency = TravelAgency;
var Ticket = /** @class */ (function () {
    function Ticket(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Ticket.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketName = data["ticketName"];
            this.ticketCode = data["ticketCode"];
            this.ticketMode = data["ticketMode"];
            this.ticketType = data["ticketType"];
            this.checkMethod = data["checkMethod"];
            this.ticketClassify = data["ticketClassify"];
            this.checkNum = data["checkNum"];
            this.effectiveLong = data["effectiveLong"];
            this.unitPrice = data["unitPrice"];
            this.ticketLength = data["ticketLength"];
            this.upperLimit = data["upperLimit"];
            this.lowerLimit = data["lowerLimit"];
            this.audioName = data["audioName"];
            this.auditStatus = data["auditStatus"];
            this.isEnabled = data["isEnabled"];
            this.sort = data["sort"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Ticket.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Ticket();
        result.init(data);
        return result;
    };
    Ticket.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketName"] = this.ticketName;
        data["ticketCode"] = this.ticketCode;
        data["ticketMode"] = this.ticketMode;
        data["ticketType"] = this.ticketType;
        data["checkMethod"] = this.checkMethod;
        data["ticketClassify"] = this.ticketClassify;
        data["checkNum"] = this.checkNum;
        data["effectiveLong"] = this.effectiveLong;
        data["unitPrice"] = this.unitPrice;
        data["ticketLength"] = this.ticketLength;
        data["upperLimit"] = this.upperLimit;
        data["lowerLimit"] = this.lowerLimit;
        data["audioName"] = this.audioName;
        data["auditStatus"] = this.auditStatus;
        data["isEnabled"] = this.isEnabled;
        data["sort"] = this.sort;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Ticket.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Ticket();
        result.init(json);
        return result;
    };
    return Ticket;
}());
exports.Ticket = Ticket;
var PositionEnum;
(function (PositionEnum) {
    PositionEnum[PositionEnum["Windows"] = "windows"] = "Windows";
    PositionEnum[PositionEnum["Online"] = "Online"] = "Online";
})(PositionEnum = exports.PositionEnum || (exports.PositionEnum = {}));
var SexEnum;
(function (SexEnum) {
    SexEnum[SexEnum["Unknown"] = "Unknown"] = "Unknown";
    SexEnum[SexEnum["Man"] = "Man"] = "Man";
    SexEnum[SexEnum["Woman"] = "Woman"] = "Woman";
})(SexEnum = exports.SexEnum || (exports.SexEnum = {}));
var VerifiableTypeEnum;
(function (VerifiableTypeEnum) {
    VerifiableTypeEnum[VerifiableTypeEnum["IdentityCard"] = "IdentityCard"] = "IdentityCard";
    VerifiableTypeEnum[VerifiableTypeEnum["ICCard"] = "ICCard"] = "ICCard";
    VerifiableTypeEnum[VerifiableTypeEnum["QRCode"] = "QRCode"] = "QRCode";
    VerifiableTypeEnum[VerifiableTypeEnum["ReturnCard"] = "ReturnCard"] = "ReturnCard";
    VerifiableTypeEnum[VerifiableTypeEnum["TaiwanCard"] = "TaiwanCard"] = "TaiwanCard";
})(VerifiableTypeEnum = exports.VerifiableTypeEnum || (exports.VerifiableTypeEnum = {}));
var PayMethodEnum;
(function (PayMethodEnum) {
    PayMethodEnum[PayMethodEnum["PaySuccess"] = "PaySuccess"] = "PaySuccess";
    PayMethodEnum[PayMethodEnum["PayFalse"] = "PayFalse"] = "PayFalse";
})(PayMethodEnum = exports.PayMethodEnum || (exports.PayMethodEnum = {}));
var TicketModeEnum;
(function (TicketModeEnum) {
    TicketModeEnum[TicketModeEnum["OnebyOne"] = "OnebyOne"] = "OnebyOne";
    TicketModeEnum[TicketModeEnum["OneByMore"] = "OneByMore"] = "OneByMore";
})(TicketModeEnum = exports.TicketModeEnum || (exports.TicketModeEnum = {}));
var CheckMethodEnum;
(function (CheckMethodEnum) {
    CheckMethodEnum[CheckMethodEnum["NumberCheck"] = "NumberCheck"] = "NumberCheck";
    CheckMethodEnum[CheckMethodEnum["TimeCheck"] = "TimeCheck"] = "TimeCheck";
    CheckMethodEnum[CheckMethodEnum["BalanceCheck"] = "BalanceCheck"] = "BalanceCheck";
})(CheckMethodEnum = exports.CheckMethodEnum || (exports.CheckMethodEnum = {}));
var TicketClassifyEnum;
(function (TicketClassifyEnum) {
    TicketClassifyEnum[TicketClassifyEnum["Adult"] = "Adult"] = "Adult";
    TicketClassifyEnum[TicketClassifyEnum["Children"] = "Children"] = "Children";
    TicketClassifyEnum[TicketClassifyEnum["Old"] = "Old"] = "Old";
})(TicketClassifyEnum = exports.TicketClassifyEnum || (exports.TicketClassifyEnum = {}));
var GetAccountDetailForEditOutput = /** @class */ (function () {
    function GetAccountDetailForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetAccountDetailForEditOutput.prototype.init = function (data) {
        if (data) {
            this.accountDetail = data["accountDetail"] ? AccountDetailEditDto.fromJS(data["accountDetail"]) : undefined;
        }
    };
    GetAccountDetailForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetAccountDetailForEditOutput();
        result.init(data);
        return result;
    };
    GetAccountDetailForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["accountDetail"] = this.accountDetail ? this.accountDetail.toJSON() : undefined;
        return data;
    };
    GetAccountDetailForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetAccountDetailForEditOutput();
        result.init(json);
        return result;
    };
    return GetAccountDetailForEditOutput;
}());
exports.GetAccountDetailForEditOutput = GetAccountDetailForEditOutput;
var PagedResultDtoOfAccountDetailListDto = /** @class */ (function () {
    function PagedResultDtoOfAccountDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfAccountDetailListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(AccountDetailListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfAccountDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfAccountDetailListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfAccountDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfAccountDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfAccountDetailListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfAccountDetailListDto;
}());
exports.PagedResultDtoOfAccountDetailListDto = PagedResultDtoOfAccountDetailListDto;
var CreateOrUpdateActivityInput = /** @class */ (function () {
    function CreateOrUpdateActivityInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.activity = new ActivityEditDto();
        }
    }
    CreateOrUpdateActivityInput.prototype.init = function (data) {
        if (data) {
            this.activity = data["activity"] ? ActivityEditDto.fromJS(data["activity"]) : new ActivityEditDto();
        }
    };
    CreateOrUpdateActivityInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateActivityInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateActivityInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activity"] = this.activity ? this.activity.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateActivityInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateActivityInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateActivityInput;
}());
exports.CreateOrUpdateActivityInput = CreateOrUpdateActivityInput;
var ActivityEditDto = /** @class */ (function () {
    function ActivityEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.activityNo = data["activityNo"];
            this.sourceId = data["sourceId"];
            this.scheduleId = data["scheduleId"];
            this.orgActivityId = data["orgActivityId"];
            this.activityDate = data["activityDate"] ? moment(data["activityDate"].toString()) : undefined;
            this.playDate = data["playDate"] ? moment(data["playDate"].toString()) : undefined;
            this.customerId = data["customerId"];
            this.buyer = data["buyer"];
            this.mobile = data["mobile"];
            this.payMethodId = data["payMethodId"];
            this.voucherNo = data["voucherNo"];
            this.payStatus = data["payStatus"];
            this.activityType = data["activityType"];
            this.remark = data["remark"];
            this.isPrint = data["isPrint"];
            this.closed = data["closed"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            this.accountsId = data["accountsId"];
            this.orderType = data["orderType"];
        }
    };
    ActivityEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityEditDto();
        result.init(data);
        return result;
    };
    ActivityEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityNo"] = this.activityNo;
        data["sourceId"] = this.sourceId;
        data["scheduleId"] = this.scheduleId;
        data["orgActivityId"] = this.orgActivityId;
        data["activityDate"] = this.activityDate ? this.activityDate.toISOString() : undefined;
        data["playDate"] = this.playDate ? this.playDate.toISOString() : undefined;
        data["customerId"] = this.customerId;
        data["buyer"] = this.buyer;
        data["mobile"] = this.mobile;
        data["payMethodId"] = this.payMethodId;
        data["voucherNo"] = this.voucherNo;
        data["payStatus"] = this.payStatus;
        data["activityType"] = this.activityType;
        data["remark"] = this.remark;
        data["isPrint"] = this.isPrint;
        data["closed"] = this.closed;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        data["accountsId"] = this.accountsId;
        data["orderType"] = this.orderType;
        return data;
    };
    ActivityEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityEditDto();
        result.init(json);
        return result;
    };
    return ActivityEditDto;
}());
exports.ActivityEditDto = ActivityEditDto;
var PagedResultDtoOfActivityListDto = /** @class */ (function () {
    function PagedResultDtoOfActivityListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfActivityListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ActivityListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfActivityListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfActivityListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfActivityListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfActivityListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfActivityListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfActivityListDto;
}());
exports.PagedResultDtoOfActivityListDto = PagedResultDtoOfActivityListDto;
var ActivityListDto = /** @class */ (function () {
    function ActivityListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityNo = data["activityNo"];
            this.sourceId = data["sourceId"];
            this.source = data["source"] ? Source.fromJS(data["source"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.orgActivityId = data["orgActivityId"];
            this.activityDate = data["activityDate"] ? moment(data["activityDate"].toString()) : undefined;
            this.playDate = data["playDate"] ? moment(data["playDate"].toString()) : undefined;
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.buyer = data["buyer"];
            this.mobile = data["mobile"];
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.voucherNo = data["voucherNo"];
            this.payStatus = data["payStatus"];
            this.activityType = data["activityType"];
            this.remark = data["remark"];
            this.isPrint = data["isPrint"];
            this.closed = data["closed"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            this.accountsId = data["accountsId"];
            this.account = data["account"] ? Account.fromJS(data["account"]) : undefined;
            this.orderType = data["orderType"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ActivityListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityListDto();
        result.init(data);
        return result;
    };
    ActivityListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityNo"] = this.activityNo;
        data["sourceId"] = this.sourceId;
        data["source"] = this.source ? this.source.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["orgActivityId"] = this.orgActivityId;
        data["activityDate"] = this.activityDate ? this.activityDate.toISOString() : undefined;
        data["playDate"] = this.playDate ? this.playDate.toISOString() : undefined;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["buyer"] = this.buyer;
        data["mobile"] = this.mobile;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["voucherNo"] = this.voucherNo;
        data["payStatus"] = this.payStatus;
        data["activityType"] = this.activityType;
        data["remark"] = this.remark;
        data["isPrint"] = this.isPrint;
        data["closed"] = this.closed;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        data["accountsId"] = this.accountsId;
        data["account"] = this.account ? this.account.toJSON() : undefined;
        data["orderType"] = this.orderType;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ActivityListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityListDto();
        result.init(json);
        return result;
    };
    return ActivityListDto;
}());
exports.ActivityListDto = ActivityListDto;
var GetActivityForEditOutput = /** @class */ (function () {
    function GetActivityForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetActivityForEditOutput.prototype.init = function (data) {
        if (data) {
            this.activity = data["activity"] ? ActivityEditDto.fromJS(data["activity"]) : undefined;
        }
    };
    GetActivityForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetActivityForEditOutput();
        result.init(data);
        return result;
    };
    GetActivityForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activity"] = this.activity ? this.activity.toJSON() : undefined;
        return data;
    };
    GetActivityForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetActivityForEditOutput();
        result.init(json);
        return result;
    };
    return GetActivityForEditOutput;
}());
exports.GetActivityForEditOutput = GetActivityForEditOutput;
var GetActivitysInput = /** @class */ (function () {
    function GetActivitysInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetActivitysInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.certificatesNum = data["certificatesNum"];
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetActivitysInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetActivitysInput();
        result.init(data);
        return result;
    };
    GetActivitysInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["certificatesNum"] = this.certificatesNum;
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetActivitysInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetActivitysInput();
        result.init(json);
        return result;
    };
    return GetActivitysInput;
}());
exports.GetActivitysInput = GetActivitysInput;
var CreateOrUpdateActivityDetailInput = /** @class */ (function () {
    function CreateOrUpdateActivityDetailInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.activityDetail = new ActivityDetailEditDto();
        }
    }
    CreateOrUpdateActivityDetailInput.prototype.init = function (data) {
        if (data) {
            this.activityDetail = data["activityDetail"] ? ActivityDetailEditDto.fromJS(data["activityDetail"]) : new ActivityDetailEditDto();
        }
    };
    CreateOrUpdateActivityDetailInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateActivityDetailInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateActivityDetailInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activityDetail"] = this.activityDetail ? this.activityDetail.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateActivityDetailInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateActivityDetailInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateActivityDetailInput;
}());
exports.CreateOrUpdateActivityDetailInput = CreateOrUpdateActivityDetailInput;
var ActivityDetailEditDto = /** @class */ (function () {
    function ActivityDetailEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityDetailEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.activityId = data["activityId"];
            this.ticketId = data["ticketId"];
            this.quantity = data["quantity"];
            this.unitPrice = data["unitPrice"];
            this.discount = data["discount"];
            this.salePrice = data["salePrice"];
            this.totalAmount = data["totalAmount"];
            this.remark = data["remark"];
            this.accountId = data["accountId"];
            this.accountDetailId = data["accountDetailId"];
            this.orgDetailId = data["orgDetailId"];
            this.scheduleId = data["scheduleId"];
        }
    };
    ActivityDetailEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityDetailEditDto();
        result.init(data);
        return result;
    };
    ActivityDetailEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityId"] = this.activityId;
        data["ticketId"] = this.ticketId;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["discount"] = this.discount;
        data["salePrice"] = this.salePrice;
        data["totalAmount"] = this.totalAmount;
        data["remark"] = this.remark;
        data["accountId"] = this.accountId;
        data["accountDetailId"] = this.accountDetailId;
        data["orgDetailId"] = this.orgDetailId;
        data["scheduleId"] = this.scheduleId;
        return data;
    };
    ActivityDetailEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityDetailEditDto();
        result.init(json);
        return result;
    };
    return ActivityDetailEditDto;
}());
exports.ActivityDetailEditDto = ActivityDetailEditDto;
var ActivityDetailListDto = /** @class */ (function () {
    function ActivityDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityDetailListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityId = data["activityId"];
            this.activity = data["activity"] ? Activity.fromJS(data["activity"]) : undefined;
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.quantity = data["quantity"];
            this.unitPrice = data["unitPrice"];
            this.discount = data["discount"];
            this.salePrice = data["salePrice"];
            this.totalAmount = data["totalAmount"];
            this.remark = data["remark"];
            this.accountId = data["accountId"];
            this.account = data["account"] ? Account.fromJS(data["account"]) : undefined;
            this.accountDetailId = data["accountDetailId"];
            this.accountDetail = data["accountDetail"] ? AccountDetail.fromJS(data["accountDetail"]) : undefined;
            this.orgDetailId = data["orgDetailId"];
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ActivityDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityDetailListDto();
        result.init(data);
        return result;
    };
    ActivityDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityId"] = this.activityId;
        data["activity"] = this.activity ? this.activity.toJSON() : undefined;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["quantity"] = this.quantity;
        data["unitPrice"] = this.unitPrice;
        data["discount"] = this.discount;
        data["salePrice"] = this.salePrice;
        data["totalAmount"] = this.totalAmount;
        data["remark"] = this.remark;
        data["accountId"] = this.accountId;
        data["account"] = this.account ? this.account.toJSON() : undefined;
        data["accountDetailId"] = this.accountDetailId;
        data["accountDetail"] = this.accountDetail ? this.accountDetail.toJSON() : undefined;
        data["orgDetailId"] = this.orgDetailId;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ActivityDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityDetailListDto();
        result.init(json);
        return result;
    };
    return ActivityDetailListDto;
}());
exports.ActivityDetailListDto = ActivityDetailListDto;
var AccountDetail = /** @class */ (function () {
    function AccountDetail(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AccountDetail.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.accountId = data["accountId"];
            this.account = data["account"] ? Account.fromJS(data["account"]) : undefined;
            this.activityDetailId = data["activityDetailId"];
            this.activityDetail = data["activityDetail"] ? ActivityDetail.fromJS(data["activityDetail"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    AccountDetail.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AccountDetail();
        result.init(data);
        return result;
    };
    AccountDetail.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["accountId"] = this.accountId;
        data["account"] = this.account ? this.account.toJSON() : undefined;
        data["activityDetailId"] = this.activityDetailId;
        data["activityDetail"] = this.activityDetail ? this.activityDetail.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    AccountDetail.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AccountDetail();
        result.init(json);
        return result;
    };
    return AccountDetail;
}());
exports.AccountDetail = AccountDetail;
var GetActivityDetailForEditOutput = /** @class */ (function () {
    function GetActivityDetailForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetActivityDetailForEditOutput.prototype.init = function (data) {
        if (data) {
            this.activityDetail = data["activityDetail"] ? ActivityDetailEditDto.fromJS(data["activityDetail"]) : undefined;
        }
    };
    GetActivityDetailForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetActivityDetailForEditOutput();
        result.init(data);
        return result;
    };
    GetActivityDetailForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activityDetail"] = this.activityDetail ? this.activityDetail.toJSON() : undefined;
        return data;
    };
    GetActivityDetailForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetActivityDetailForEditOutput();
        result.init(json);
        return result;
    };
    return GetActivityDetailForEditOutput;
}());
exports.GetActivityDetailForEditOutput = GetActivityDetailForEditOutput;
var PagedResultDtoOfActivityDetailListDto = /** @class */ (function () {
    function PagedResultDtoOfActivityDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfActivityDetailListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ActivityDetailListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfActivityDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfActivityDetailListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfActivityDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfActivityDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfActivityDetailListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfActivityDetailListDto;
}());
exports.PagedResultDtoOfActivityDetailListDto = PagedResultDtoOfActivityDetailListDto;
var CreateOrUpdateActivityTempInput = /** @class */ (function () {
    function CreateOrUpdateActivityTempInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.activityTemp = new ActivityTempEditDto();
        }
    }
    CreateOrUpdateActivityTempInput.prototype.init = function (data) {
        if (data) {
            this.activityTemp = data["activityTemp"] ? ActivityTempEditDto.fromJS(data["activityTemp"]) : new ActivityTempEditDto();
        }
    };
    CreateOrUpdateActivityTempInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateActivityTempInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateActivityTempInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activityTemp"] = this.activityTemp ? this.activityTemp.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateActivityTempInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateActivityTempInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateActivityTempInput;
}());
exports.CreateOrUpdateActivityTempInput = CreateOrUpdateActivityTempInput;
var ActivityTempEditDto = /** @class */ (function () {
    function ActivityTempEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityTempEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.activityNo = data["activityNo"];
            this.sourceId = data["sourceId"];
            this.scheduleId = data["scheduleId"];
            this.activityDate = data["activityDate"] ? moment(data["activityDate"].toString()) : undefined;
            this.playDate = data["playDate"] ? moment(data["playDate"].toString()) : undefined;
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.orderType = data["orderType"];
            this.payStatus = data["payStatus"];
            this.buyer = data["buyer"];
            this.mobile = data["mobile"];
            this.payMethodId = data["payMethodId"];
            this.voucherNo = data["voucherNo"];
            this.remark = data["remark"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            this.collectionPwd = data["collectionPwd"];
            this.collectionCode = data["collectionCode"];
            this.payTime = data["payTime"] ? moment(data["payTime"].toString()) : undefined;
            this.activityId = data["activityId"];
        }
    };
    ActivityTempEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityTempEditDto();
        result.init(data);
        return result;
    };
    ActivityTempEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityNo"] = this.activityNo;
        data["sourceId"] = this.sourceId;
        data["scheduleId"] = this.scheduleId;
        data["activityDate"] = this.activityDate ? this.activityDate.toISOString() : undefined;
        data["playDate"] = this.playDate ? this.playDate.toISOString() : undefined;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["orderType"] = this.orderType;
        data["payStatus"] = this.payStatus;
        data["buyer"] = this.buyer;
        data["mobile"] = this.mobile;
        data["payMethodId"] = this.payMethodId;
        data["voucherNo"] = this.voucherNo;
        data["remark"] = this.remark;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        data["collectionPwd"] = this.collectionPwd;
        data["collectionCode"] = this.collectionCode;
        data["payTime"] = this.payTime ? this.payTime.toISOString() : undefined;
        data["activityId"] = this.activityId;
        return data;
    };
    ActivityTempEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityTempEditDto();
        result.init(json);
        return result;
    };
    return ActivityTempEditDto;
}());
exports.ActivityTempEditDto = ActivityTempEditDto;
var ActivityTempListDto = /** @class */ (function () {
    function ActivityTempListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityTempListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityNo = data["activityNo"];
            this.sourceId = data["sourceId"];
            this.source = data["source"] ? Source.fromJS(data["source"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.activityDate = data["activityDate"] ? moment(data["activityDate"].toString()) : undefined;
            this.playDate = data["playDate"] ? moment(data["playDate"].toString()) : undefined;
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.orderType = data["orderType"];
            this.payStatus = data["payStatus"];
            this.buyer = data["buyer"];
            this.mobile = data["mobile"];
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.voucherNo = data["voucherNo"];
            this.remark = data["remark"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            this.collectionPwd = data["collectionPwd"];
            this.collector = data["collector"];
            this.collectionCode = data["collectionCode"];
            this.payTime = data["payTime"] ? moment(data["payTime"].toString()) : undefined;
            this.activityId = data["activityId"];
            this.activity = data["activity"] ? Activity.fromJS(data["activity"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ActivityTempListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityTempListDto();
        result.init(data);
        return result;
    };
    ActivityTempListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityNo"] = this.activityNo;
        data["sourceId"] = this.sourceId;
        data["source"] = this.source ? this.source.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["activityDate"] = this.activityDate ? this.activityDate.toISOString() : undefined;
        data["playDate"] = this.playDate ? this.playDate.toISOString() : undefined;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["orderType"] = this.orderType;
        data["payStatus"] = this.payStatus;
        data["buyer"] = this.buyer;
        data["mobile"] = this.mobile;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["voucherNo"] = this.voucherNo;
        data["remark"] = this.remark;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        data["collectionPwd"] = this.collectionPwd;
        data["collector"] = this.collector;
        data["collectionCode"] = this.collectionCode;
        data["payTime"] = this.payTime ? this.payTime.toISOString() : undefined;
        data["activityId"] = this.activityId;
        data["activity"] = this.activity ? this.activity.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ActivityTempListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityTempListDto();
        result.init(json);
        return result;
    };
    return ActivityTempListDto;
}());
exports.ActivityTempListDto = ActivityTempListDto;
var GetActivityTempForEditOutput = /** @class */ (function () {
    function GetActivityTempForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetActivityTempForEditOutput.prototype.init = function (data) {
        if (data) {
            this.activityTemp = data["activityTemp"] ? ActivityTempEditDto.fromJS(data["activityTemp"]) : undefined;
        }
    };
    GetActivityTempForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetActivityTempForEditOutput();
        result.init(data);
        return result;
    };
    GetActivityTempForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activityTemp"] = this.activityTemp ? this.activityTemp.toJSON() : undefined;
        return data;
    };
    GetActivityTempForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetActivityTempForEditOutput();
        result.init(json);
        return result;
    };
    return GetActivityTempForEditOutput;
}());
exports.GetActivityTempForEditOutput = GetActivityTempForEditOutput;
var PagedResultDtoOfActivityTempListDto = /** @class */ (function () {
    function PagedResultDtoOfActivityTempListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfActivityTempListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ActivityTempListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfActivityTempListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfActivityTempListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfActivityTempListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfActivityTempListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfActivityTempListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfActivityTempListDto;
}());
exports.PagedResultDtoOfActivityTempListDto = PagedResultDtoOfActivityTempListDto;
var CreateOrUpdateActivityTempDetailInput = /** @class */ (function () {
    function CreateOrUpdateActivityTempDetailInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.activityTempDetail = new ActivityTempDetailEditDto();
        }
    }
    CreateOrUpdateActivityTempDetailInput.prototype.init = function (data) {
        if (data) {
            this.activityTempDetail = data["activityTempDetail"] ? ActivityTempDetailEditDto.fromJS(data["activityTempDetail"]) : new ActivityTempDetailEditDto();
        }
    };
    CreateOrUpdateActivityTempDetailInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateActivityTempDetailInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateActivityTempDetailInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activityTempDetail"] = this.activityTempDetail ? this.activityTempDetail.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateActivityTempDetailInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateActivityTempDetailInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateActivityTempDetailInput;
}());
exports.CreateOrUpdateActivityTempDetailInput = CreateOrUpdateActivityTempDetailInput;
var ActivityTempDetailEditDto = /** @class */ (function () {
    function ActivityTempDetailEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityTempDetailEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.activityTempId = data["activityTempId"];
            this.ticketId = data["ticketId"];
            this.ticketName = data["ticketName"];
            this.salePrice = data["salePrice"];
            this.quantity = data["quantity"];
            this.uniPrice = data["uniPrice"];
            this.discount = data["discount"];
            this.scheduleId = data["scheduleId"];
        }
    };
    ActivityTempDetailEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityTempDetailEditDto();
        result.init(data);
        return result;
    };
    ActivityTempDetailEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activityTempId"] = this.activityTempId;
        data["ticketId"] = this.ticketId;
        data["ticketName"] = this.ticketName;
        data["salePrice"] = this.salePrice;
        data["quantity"] = this.quantity;
        data["uniPrice"] = this.uniPrice;
        data["discount"] = this.discount;
        data["scheduleId"] = this.scheduleId;
        return data;
    };
    ActivityTempDetailEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityTempDetailEditDto();
        result.init(json);
        return result;
    };
    return ActivityTempDetailEditDto;
}());
exports.ActivityTempDetailEditDto = ActivityTempDetailEditDto;
var ActivityTempDetailListDto = /** @class */ (function () {
    function ActivityTempDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityTempDetailListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityTempId = data["activityTempId"];
            this.activityTemp = data["activityTemp"] ? ActivityTemp.fromJS(data["activityTemp"]) : undefined;
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.ticketName = data["ticketName"];
            this.salePrice = data["salePrice"];
            this.quantity = data["quantity"];
            this.uniPrice = data["uniPrice"];
            this.discount = data["discount"];
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ActivityTempDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityTempDetailListDto();
        result.init(data);
        return result;
    };
    ActivityTempDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityTempId"] = this.activityTempId;
        data["activityTemp"] = this.activityTemp ? this.activityTemp.toJSON() : undefined;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["ticketName"] = this.ticketName;
        data["salePrice"] = this.salePrice;
        data["quantity"] = this.quantity;
        data["uniPrice"] = this.uniPrice;
        data["discount"] = this.discount;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ActivityTempDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityTempDetailListDto();
        result.init(json);
        return result;
    };
    return ActivityTempDetailListDto;
}());
exports.ActivityTempDetailListDto = ActivityTempDetailListDto;
var ActivityTemp = /** @class */ (function () {
    function ActivityTemp(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityTemp.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityNo = data["activityNo"];
            this.sourceId = data["sourceId"];
            this.source = data["source"] ? Source.fromJS(data["source"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.activityDate = data["activityDate"] ? moment(data["activityDate"].toString()) : undefined;
            this.playDate = data["playDate"] ? moment(data["playDate"].toString()) : undefined;
            this.customerId = data["customerId"];
            this.orderType = data["orderType"];
            this.payStatus = data["payStatus"];
            this.buyer = data["buyer"];
            this.mobile = data["mobile"];
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.voucherNo = data["voucherNo"];
            this.remark = data["remark"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            this.collectionPwd = data["collectionPwd"];
            this.collector = data["collector"];
            this.collectionCode = data["collectionCode"];
            this.payTime = data["payTime"] ? moment(data["payTime"].toString()) : undefined;
            this.activityId = data["activityId"];
            this.travelAgencyId = data["travelAgencyId"];
            this.travelAgency = data["travelAgency"] ? TravelAgency.fromJS(data["travelAgency"]) : undefined;
            if (data["activityDetails"] && data["activityDetails"].constructor === Array) {
                this.activityDetails = [];
                for (var _i = 0, _a = data["activityDetails"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.activityDetails.push(ActivityTempDetail.fromJS(item));
                }
            }
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ActivityTemp.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityTemp();
        result.init(data);
        return result;
    };
    ActivityTemp.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityNo"] = this.activityNo;
        data["sourceId"] = this.sourceId;
        data["source"] = this.source ? this.source.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["activityDate"] = this.activityDate ? this.activityDate.toISOString() : undefined;
        data["playDate"] = this.playDate ? this.playDate.toISOString() : undefined;
        data["customerId"] = this.customerId;
        data["orderType"] = this.orderType;
        data["payStatus"] = this.payStatus;
        data["buyer"] = this.buyer;
        data["mobile"] = this.mobile;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["voucherNo"] = this.voucherNo;
        data["remark"] = this.remark;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        data["collectionPwd"] = this.collectionPwd;
        data["collector"] = this.collector;
        data["collectionCode"] = this.collectionCode;
        data["payTime"] = this.payTime ? this.payTime.toISOString() : undefined;
        data["activityId"] = this.activityId;
        data["travelAgencyId"] = this.travelAgencyId;
        data["travelAgency"] = this.travelAgency ? this.travelAgency.toJSON() : undefined;
        if (this.activityDetails && this.activityDetails.constructor === Array) {
            data["activityDetails"] = [];
            for (var _i = 0, _a = this.activityDetails; _i < _a.length; _i++) {
                var item = _a[_i];
                data["activityDetails"].push(item.toJSON());
            }
        }
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ActivityTemp.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityTemp();
        result.init(json);
        return result;
    };
    return ActivityTemp;
}());
exports.ActivityTemp = ActivityTemp;
var ActivityTempDetail = /** @class */ (function () {
    function ActivityTempDetail(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivityTempDetail.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.activityTempId = data["activityTempId"];
            this.activityTemp = data["activityTemp"] ? ActivityTemp.fromJS(data["activityTemp"]) : undefined;
            this.ticketPriceId = data["ticketPriceId"];
            this.ticketPrice = data["ticketPrice"] ? TicketPrice.fromJS(data["ticketPrice"]) : undefined;
            this.ticketName = data["ticketName"];
            this.salePrice = data["salePrice"];
            this.quantity = data["quantity"];
            this.uniPrice = data["uniPrice"];
            this.discount = data["discount"];
            this.totalAmount = data["totalAmount"];
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ActivityTempDetail.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivityTempDetail();
        result.init(data);
        return result;
    };
    ActivityTempDetail.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["activityTempId"] = this.activityTempId;
        data["activityTemp"] = this.activityTemp ? this.activityTemp.toJSON() : undefined;
        data["ticketPriceId"] = this.ticketPriceId;
        data["ticketPrice"] = this.ticketPrice ? this.ticketPrice.toJSON() : undefined;
        data["ticketName"] = this.ticketName;
        data["salePrice"] = this.salePrice;
        data["quantity"] = this.quantity;
        data["uniPrice"] = this.uniPrice;
        data["discount"] = this.discount;
        data["totalAmount"] = this.totalAmount;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ActivityTempDetail.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivityTempDetail();
        result.init(json);
        return result;
    };
    return ActivityTempDetail;
}());
exports.ActivityTempDetail = ActivityTempDetail;
var GetActivityTempDetailForEditOutput = /** @class */ (function () {
    function GetActivityTempDetailForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetActivityTempDetailForEditOutput.prototype.init = function (data) {
        if (data) {
            this.activityTempDetail = data["activityTempDetail"] ? ActivityTempDetailEditDto.fromJS(data["activityTempDetail"]) : undefined;
        }
    };
    GetActivityTempDetailForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetActivityTempDetailForEditOutput();
        result.init(data);
        return result;
    };
    GetActivityTempDetailForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activityTempDetail"] = this.activityTempDetail ? this.activityTempDetail.toJSON() : undefined;
        return data;
    };
    GetActivityTempDetailForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetActivityTempDetailForEditOutput();
        result.init(json);
        return result;
    };
    return GetActivityTempDetailForEditOutput;
}());
exports.GetActivityTempDetailForEditOutput = GetActivityTempDetailForEditOutput;
var PagedResultDtoOfActivityTempDetailListDto = /** @class */ (function () {
    function PagedResultDtoOfActivityTempDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfActivityTempDetailListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ActivityTempDetailListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfActivityTempDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfActivityTempDetailListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfActivityTempDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfActivityTempDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfActivityTempDetailListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfActivityTempDetailListDto;
}());
exports.PagedResultDtoOfActivityTempDetailListDto = PagedResultDtoOfActivityTempDetailListDto;
var FileDto = /** @class */ (function () {
    function FileDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FileDto.prototype.init = function (data) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileType = data["fileType"];
            this.fileToken = data["fileToken"];
        }
    };
    FileDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FileDto();
        result.init(data);
        return result;
    };
    FileDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data;
    };
    FileDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FileDto();
        result.init(json);
        return result;
    };
    return FileDto;
}());
exports.FileDto = FileDto;
var PagedResultDtoOfEntityChangeListDto = /** @class */ (function () {
    function PagedResultDtoOfEntityChangeListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfEntityChangeListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(EntityChangeListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfEntityChangeListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfEntityChangeListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfEntityChangeListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfEntityChangeListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfEntityChangeListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfEntityChangeListDto;
}());
exports.PagedResultDtoOfEntityChangeListDto = PagedResultDtoOfEntityChangeListDto;
var EntityChangeListDto = /** @class */ (function () {
    function EntityChangeListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EntityChangeListDto.prototype.init = function (data) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.changeTime = data["changeTime"] ? moment(data["changeTime"].toString()) : undefined;
            this.entityTypeFullName = data["entityTypeFullName"];
            this.changeType = data["changeType"];
            this.changeTypeName = data["changeTypeName"];
            this.entityChangeSetId = data["entityChangeSetId"];
            this.id = data["id"];
        }
    };
    EntityChangeListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EntityChangeListDto();
        result.init(data);
        return result;
    };
    EntityChangeListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["changeTime"] = this.changeTime ? this.changeTime.toISOString() : undefined;
        data["entityTypeFullName"] = this.entityTypeFullName;
        data["changeType"] = this.changeType;
        data["changeTypeName"] = this.changeTypeName;
        data["entityChangeSetId"] = this.entityChangeSetId;
        data["id"] = this.id;
        return data;
    };
    EntityChangeListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EntityChangeListDto();
        result.init(json);
        return result;
    };
    return EntityChangeListDto;
}());
exports.EntityChangeListDto = EntityChangeListDto;
var EntityChangeType;
(function (EntityChangeType) {
    EntityChangeType[EntityChangeType["Created"] = "Created"] = "Created";
    EntityChangeType[EntityChangeType["Updated"] = "Updated"] = "Updated";
    EntityChangeType[EntityChangeType["Deleted"] = "Deleted"] = "Deleted";
})(EntityChangeType = exports.EntityChangeType || (exports.EntityChangeType = {}));
var NameValueDto = /** @class */ (function () {
    function NameValueDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NameValueDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.value = data["value"];
        }
    };
    NameValueDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NameValueDto();
        result.init(data);
        return result;
    };
    NameValueDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["value"] = this.value;
        return data;
    };
    NameValueDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NameValueDto();
        result.init(json);
        return result;
    };
    return NameValueDto;
}());
exports.NameValueDto = NameValueDto;
var PagedResultDtoOfAuditLogListDto = /** @class */ (function () {
    function PagedResultDtoOfAuditLogListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfAuditLogListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(AuditLogListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfAuditLogListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfAuditLogListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfAuditLogListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfAuditLogListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfAuditLogListDto;
}());
exports.PagedResultDtoOfAuditLogListDto = PagedResultDtoOfAuditLogListDto;
var AuditLogListDto = /** @class */ (function () {
    function AuditLogListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuditLogListDto.prototype.init = function (data) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.serviceName = data["serviceName"];
            this.methodName = data["methodName"];
            this.parameters = data["parameters"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : undefined;
            this.executionDuration = data["executionDuration"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.exception = data["exception"];
            this.customData = data["customData"];
            this.id = data["id"];
        }
    };
    AuditLogListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuditLogListDto();
        result.init(data);
        return result;
    };
    AuditLogListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data;
    };
    AuditLogListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuditLogListDto();
        result.init(json);
        return result;
    };
    return AuditLogListDto;
}());
exports.AuditLogListDto = AuditLogListDto;
var PagedResultDtoOfLoginLogModel = /** @class */ (function () {
    function PagedResultDtoOfLoginLogModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfLoginLogModel.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(LoginLogModel.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfLoginLogModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfLoginLogModel();
        result.init(data);
        return result;
    };
    PagedResultDtoOfLoginLogModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfLoginLogModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfLoginLogModel();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfLoginLogModel;
}());
exports.PagedResultDtoOfLoginLogModel = PagedResultDtoOfLoginLogModel;
/** 显示登录信息 */
var LoginLogModel = /** @class */ (function () {
    function LoginLogModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LoginLogModel.prototype.init = function (data) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.sourceName = data["sourceName"];
            this.sourceCode = data["sourceCode"];
            this.clientIpAddress = data["clientIpAddress"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : undefined;
            this.hasException = data["hasException"];
            this.exception = data["exception"];
        }
    };
    LoginLogModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LoginLogModel();
        result.init(data);
        return result;
    };
    LoginLogModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["sourceName"] = this.sourceName;
        data["sourceCode"] = this.sourceCode;
        data["clientIpAddress"] = this.clientIpAddress;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : undefined;
        data["hasException"] = this.hasException;
        data["exception"] = this.exception;
        return data;
    };
    LoginLogModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LoginLogModel();
        result.init(json);
        return result;
    };
    return LoginLogModel;
}());
exports.LoginLogModel = LoginLogModel;
var CreateOrUpdateBoatInput = /** @class */ (function () {
    function CreateOrUpdateBoatInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.boat = new BoatEditDto();
        }
    }
    CreateOrUpdateBoatInput.prototype.init = function (data) {
        if (data) {
            this.boat = data["boat"] ? BoatEditDto.fromJS(data["boat"]) : new BoatEditDto();
        }
    };
    CreateOrUpdateBoatInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateBoatInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateBoatInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateBoatInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateBoatInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateBoatInput;
}());
exports.CreateOrUpdateBoatInput = CreateOrUpdateBoatInput;
var BoatEditDto = /** @class */ (function () {
    function BoatEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BoatEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.boatName = data["boatName"];
            this.boatCode = data["boatCode"];
            this.seatNumber = data["seatNumber"];
            this.runStatus = data["runStatus"];
            this.leader = data["leader"];
            this.picture = data["picture"];
            this.leaderMobile = data["leaderMobile"];
            this.auditStatus = data["auditStatus"];
            this.routeId = data["routeId"];
        }
    };
    BoatEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BoatEditDto();
        result.init(data);
        return result;
    };
    BoatEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["boatName"] = this.boatName;
        data["boatCode"] = this.boatCode;
        data["seatNumber"] = this.seatNumber;
        data["runStatus"] = this.runStatus;
        data["leader"] = this.leader;
        data["picture"] = this.picture;
        data["leaderMobile"] = this.leaderMobile;
        data["auditStatus"] = this.auditStatus;
        data["routeId"] = this.routeId;
        return data;
    };
    BoatEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BoatEditDto();
        result.init(json);
        return result;
    };
    return BoatEditDto;
}());
exports.BoatEditDto = BoatEditDto;
var BoatListDto = /** @class */ (function () {
    function BoatListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BoatListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.boatName = data["boatName"];
            this.boatCode = data["boatCode"];
            this.seatNumber = data["seatNumber"];
            this.runStatus = data["runStatus"];
            this.leader = data["leader"];
            this.leaderMobile = data["leaderMobile"];
            this.picture = data["picture"];
            this.auditStatus = data["auditStatus"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.routeId = data["routeId"];
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    BoatListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BoatListDto();
        result.init(data);
        return result;
    };
    BoatListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["boatName"] = this.boatName;
        data["boatCode"] = this.boatCode;
        data["seatNumber"] = this.seatNumber;
        data["runStatus"] = this.runStatus;
        data["leader"] = this.leader;
        data["leaderMobile"] = this.leaderMobile;
        data["picture"] = this.picture;
        data["auditStatus"] = this.auditStatus;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["routeId"] = this.routeId;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    BoatListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BoatListDto();
        result.init(json);
        return result;
    };
    return BoatListDto;
}());
exports.BoatListDto = BoatListDto;
var GetBoatForEditOutput = /** @class */ (function () {
    function GetBoatForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetBoatForEditOutput.prototype.init = function (data) {
        if (data) {
            this.boat = data["boat"] ? BoatEditDto.fromJS(data["boat"]) : undefined;
        }
    };
    GetBoatForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetBoatForEditOutput();
        result.init(data);
        return result;
    };
    GetBoatForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        return data;
    };
    GetBoatForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetBoatForEditOutput();
        result.init(json);
        return result;
    };
    return GetBoatForEditOutput;
}());
exports.GetBoatForEditOutput = GetBoatForEditOutput;
var GetBoatsInput = /** @class */ (function () {
    function GetBoatsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetBoatsInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetBoatsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetBoatsInput();
        result.init(data);
        return result;
    };
    GetBoatsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetBoatsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetBoatsInput();
        result.init(json);
        return result;
    };
    return GetBoatsInput;
}());
exports.GetBoatsInput = GetBoatsInput;
var PagedResultDtoOfBoatListDto = /** @class */ (function () {
    function PagedResultDtoOfBoatListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfBoatListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(BoatListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfBoatListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfBoatListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfBoatListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfBoatListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfBoatListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfBoatListDto;
}());
exports.PagedResultDtoOfBoatListDto = PagedResultDtoOfBoatListDto;
var ExcelResultDto = /** @class */ (function () {
    function ExcelResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExcelResultDto.prototype.init = function (data) {
        if (data) {
            this.result = data["result"];
            this.errorMessage = data["errorMessage"];
        }
    };
    ExcelResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExcelResultDto();
        result.init(data);
        return result;
    };
    ExcelResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        data["errorMessage"] = this.errorMessage;
        return data;
    };
    ExcelResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExcelResultDto();
        result.init(json);
        return result;
    };
    return ExcelResultDto;
}());
exports.ExcelResultDto = ExcelResultDto;
var CreateOrUpdateBookInput = /** @class */ (function () {
    function CreateOrUpdateBookInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.book = new BookEditDto();
        }
    }
    CreateOrUpdateBookInput.prototype.init = function (data) {
        if (data) {
            this.book = data["book"] ? BookEditDto.fromJS(data["book"]) : new BookEditDto();
        }
    };
    CreateOrUpdateBookInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateBookInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateBookInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["book"] = this.book ? this.book.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateBookInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateBookInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateBookInput;
}());
exports.CreateOrUpdateBookInput = CreateOrUpdateBookInput;
var BookEditDto = /** @class */ (function () {
    function BookEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.type = data["type"];
            this.publishDate = data["publishDate"] ? moment(data["publishDate"].toString()) : undefined;
            this.price = data["price"];
        }
    };
    BookEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookEditDto();
        result.init(data);
        return result;
    };
    BookEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : undefined;
        data["price"] = this.price;
        return data;
    };
    BookEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookEditDto();
        result.init(json);
        return result;
    };
    return BookEditDto;
}());
exports.BookEditDto = BookEditDto;
var BookType;
(function (BookType) {
    BookType[BookType["Undefined"] = "Undefined"] = "Undefined";
    BookType[BookType["Advanture"] = "Advanture"] = "Advanture";
    BookType[BookType["Biography"] = "Biography"] = "Biography";
    BookType[BookType["Dystopia"] = "Dystopia"] = "Dystopia";
    BookType[BookType["Fantastic"] = "Fantastic"] = "Fantastic";
    BookType[BookType["Horror"] = "Horror"] = "Horror";
    BookType[BookType["Science"] = "Science"] = "Science";
    BookType[BookType["ScienceFiction"] = "ScienceFiction"] = "ScienceFiction";
    BookType[BookType["Poetry"] = "Poetry"] = "Poetry";
})(BookType = exports.BookType || (exports.BookType = {}));
var BookListDto = /** @class */ (function () {
    function BookListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BookListDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.type = data["type"];
            this.publishDate = data["publishDate"] ? moment(data["publishDate"].toString()) : undefined;
            this.price = data["price"];
            this.id = data["id"];
        }
    };
    BookListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BookListDto();
        result.init(data);
        return result;
    };
    BookListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : undefined;
        data["price"] = this.price;
        data["id"] = this.id;
        return data;
    };
    BookListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BookListDto();
        result.init(json);
        return result;
    };
    return BookListDto;
}());
exports.BookListDto = BookListDto;
var GetBookForEditOutput = /** @class */ (function () {
    function GetBookForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetBookForEditOutput.prototype.init = function (data) {
        if (data) {
            this.book = data["book"] ? BookEditDto.fromJS(data["book"]) : undefined;
        }
    };
    GetBookForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetBookForEditOutput();
        result.init(data);
        return result;
    };
    GetBookForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["book"] = this.book ? this.book.toJSON() : undefined;
        return data;
    };
    GetBookForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetBookForEditOutput();
        result.init(json);
        return result;
    };
    return GetBookForEditOutput;
}());
exports.GetBookForEditOutput = GetBookForEditOutput;
var PagedResultDtoOfBookListDto = /** @class */ (function () {
    function PagedResultDtoOfBookListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfBookListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(BookListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfBookListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfBookListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfBookListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfBookListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfBookListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfBookListDto;
}());
exports.PagedResultDtoOfBookListDto = PagedResultDtoOfBookListDto;
var CreateOrUpdateBranchInput = /** @class */ (function () {
    function CreateOrUpdateBranchInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.branch = new BranchEditDto();
        }
    }
    CreateOrUpdateBranchInput.prototype.init = function (data) {
        if (data) {
            this.branch = data["branch"] ? BranchEditDto.fromJS(data["branch"]) : new BranchEditDto();
        }
    };
    CreateOrUpdateBranchInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateBranchInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateBranchInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateBranchInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateBranchInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateBranchInput;
}());
exports.CreateOrUpdateBranchInput = CreateOrUpdateBranchInput;
var BranchEditDto = /** @class */ (function () {
    function BranchEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BranchEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? Branch.fromJS(data["parent"]) : undefined;
            this.branchCode = data["branchCode"];
            this.branchName = data["branchName"];
            this.sort = data["sort"];
            this.level = data["level"];
            this.isEnabled = data["isEnabled"];
        }
    };
    BranchEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BranchEditDto();
        result.init(data);
        return result;
    };
    BranchEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["branchCode"] = this.branchCode;
        data["branchName"] = this.branchName;
        data["sort"] = this.sort;
        data["level"] = this.level;
        data["isEnabled"] = this.isEnabled;
        return data;
    };
    BranchEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BranchEditDto();
        result.init(json);
        return result;
    };
    return BranchEditDto;
}());
exports.BranchEditDto = BranchEditDto;
var BranchListDto = /** @class */ (function () {
    function BranchListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BranchListDto.prototype.init = function (data) {
        if (data) {
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? Branch.fromJS(data["parent"]) : undefined;
            this.branchCode = data["branchCode"];
            this.branchName = data["branchName"];
            this.sort = data["sort"];
            this.level = data["level"];
            this.isEnabled = data["isEnabled"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    BranchListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BranchListDto();
        result.init(data);
        return result;
    };
    BranchListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["branchCode"] = this.branchCode;
        data["branchName"] = this.branchName;
        data["sort"] = this.sort;
        data["level"] = this.level;
        data["isEnabled"] = this.isEnabled;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    BranchListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BranchListDto();
        result.init(json);
        return result;
    };
    return BranchListDto;
}());
exports.BranchListDto = BranchListDto;
var GetBranchForEditOutput = /** @class */ (function () {
    function GetBranchForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetBranchForEditOutput.prototype.init = function (data) {
        if (data) {
            this.branch = data["branch"] ? BranchEditDto.fromJS(data["branch"]) : undefined;
        }
    };
    GetBranchForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetBranchForEditOutput();
        result.init(data);
        return result;
    };
    GetBranchForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        return data;
    };
    GetBranchForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetBranchForEditOutput();
        result.init(json);
        return result;
    };
    return GetBranchForEditOutput;
}());
exports.GetBranchForEditOutput = GetBranchForEditOutput;
var PagedResultDtoOfBranchListDto = /** @class */ (function () {
    function PagedResultDtoOfBranchListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfBranchListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(BranchListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfBranchListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfBranchListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfBranchListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfBranchListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfBranchListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfBranchListDto;
}());
exports.PagedResultDtoOfBranchListDto = PagedResultDtoOfBranchListDto;
var CreateOrUpdateBranchUserInput = /** @class */ (function () {
    function CreateOrUpdateBranchUserInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.branchUser = new BranchUserEditDto();
        }
    }
    CreateOrUpdateBranchUserInput.prototype.init = function (data) {
        if (data) {
            this.branchUser = data["branchUser"] ? BranchUserEditDto.fromJS(data["branchUser"]) : new BranchUserEditDto();
        }
    };
    CreateOrUpdateBranchUserInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateBranchUserInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateBranchUserInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchUser"] = this.branchUser ? this.branchUser.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateBranchUserInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateBranchUserInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateBranchUserInput;
}());
exports.CreateOrUpdateBranchUserInput = CreateOrUpdateBranchUserInput;
var BranchUserEditDto = /** @class */ (function () {
    function BranchUserEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BranchUserEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.branchId = data["branchId"];
            this.userId = data["userId"];
        }
    };
    BranchUserEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BranchUserEditDto();
        result.init(data);
        return result;
    };
    BranchUserEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["branchId"] = this.branchId;
        data["userId"] = this.userId;
        return data;
    };
    BranchUserEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BranchUserEditDto();
        result.init(json);
        return result;
    };
    return BranchUserEditDto;
}());
exports.BranchUserEditDto = BranchUserEditDto;
var BranchUserListDto = /** @class */ (function () {
    function BranchUserListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BranchUserListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.userId = data["userId"];
            this.user = data["user"] ? User.fromJS(data["user"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    BranchUserListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BranchUserListDto();
        result.init(data);
        return result;
    };
    BranchUserListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    BranchUserListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BranchUserListDto();
        result.init(json);
        return result;
    };
    return BranchUserListDto;
}());
exports.BranchUserListDto = BranchUserListDto;
var GetBranchUserForEditOutput = /** @class */ (function () {
    function GetBranchUserForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetBranchUserForEditOutput.prototype.init = function (data) {
        if (data) {
            this.branchUser = data["branchUser"] ? BranchUserEditDto.fromJS(data["branchUser"]) : undefined;
        }
    };
    GetBranchUserForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetBranchUserForEditOutput();
        result.init(data);
        return result;
    };
    GetBranchUserForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchUser"] = this.branchUser ? this.branchUser.toJSON() : undefined;
        return data;
    };
    GetBranchUserForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetBranchUserForEditOutput();
        result.init(json);
        return result;
    };
    return GetBranchUserForEditOutput;
}());
exports.GetBranchUserForEditOutput = GetBranchUserForEditOutput;
var PagedResultDtoOfBranchUserListDto = /** @class */ (function () {
    function PagedResultDtoOfBranchUserListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfBranchUserListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(BranchUserListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfBranchUserListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfBranchUserListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfBranchUserListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfBranchUserListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfBranchUserListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfBranchUserListDto;
}());
exports.PagedResultDtoOfBranchUserListDto = PagedResultDtoOfBranchUserListDto;
var CreateOrUpdateCheckRecordInput = /** @class */ (function () {
    function CreateOrUpdateCheckRecordInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.checkRecord = new CheckRecordEditDto();
        }
    }
    CreateOrUpdateCheckRecordInput.prototype.init = function (data) {
        if (data) {
            this.checkRecord = data["checkRecord"] ? CheckRecordEditDto.fromJS(data["checkRecord"]) : new CheckRecordEditDto();
        }
    };
    CreateOrUpdateCheckRecordInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateCheckRecordInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateCheckRecordInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["checkRecord"] = this.checkRecord ? this.checkRecord.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateCheckRecordInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateCheckRecordInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateCheckRecordInput;
}());
exports.CreateOrUpdateCheckRecordInput = CreateOrUpdateCheckRecordInput;
var CheckRecordEditDto = /** @class */ (function () {
    function CheckRecordEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CheckRecordEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.mobile = data["mobile"];
            this.massageType = data["massageType"];
            this.checkExplain = data["checkExplain"];
            this.captcha = data["captcha"];
            this.isEnabled = data["isEnabled"];
            this.checkTime = data["checkTime"] ? moment(data["checkTime"].toString()) : undefined;
        }
    };
    CheckRecordEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CheckRecordEditDto();
        result.init(data);
        return result;
    };
    CheckRecordEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mobile"] = this.mobile;
        data["massageType"] = this.massageType;
        data["checkExplain"] = this.checkExplain;
        data["captcha"] = this.captcha;
        data["isEnabled"] = this.isEnabled;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : undefined;
        return data;
    };
    CheckRecordEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CheckRecordEditDto();
        result.init(json);
        return result;
    };
    return CheckRecordEditDto;
}());
exports.CheckRecordEditDto = CheckRecordEditDto;
var MassageTypeEnum;
(function (MassageTypeEnum) {
    MassageTypeEnum[MassageTypeEnum["Common"] = "Common"] = "Common";
})(MassageTypeEnum = exports.MassageTypeEnum || (exports.MassageTypeEnum = {}));
var CheckRecordListDto = /** @class */ (function () {
    function CheckRecordListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CheckRecordListDto.prototype.init = function (data) {
        if (data) {
            this.mobile = data["mobile"];
            this.massageType = data["massageType"];
            this.checkExplain = data["checkExplain"];
            this.captcha = data["captcha"];
            this.isEnabled = data["isEnabled"];
            this.checkTime = data["checkTime"] ? moment(data["checkTime"].toString()) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    CheckRecordListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CheckRecordListDto();
        result.init(data);
        return result;
    };
    CheckRecordListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["mobile"] = this.mobile;
        data["massageType"] = this.massageType;
        data["checkExplain"] = this.checkExplain;
        data["captcha"] = this.captcha;
        data["isEnabled"] = this.isEnabled;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    CheckRecordListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CheckRecordListDto();
        result.init(json);
        return result;
    };
    return CheckRecordListDto;
}());
exports.CheckRecordListDto = CheckRecordListDto;
var GetCheckRecordForEditOutput = /** @class */ (function () {
    function GetCheckRecordForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetCheckRecordForEditOutput.prototype.init = function (data) {
        if (data) {
            this.checkRecord = data["checkRecord"] ? CheckRecordEditDto.fromJS(data["checkRecord"]) : undefined;
        }
    };
    GetCheckRecordForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetCheckRecordForEditOutput();
        result.init(data);
        return result;
    };
    GetCheckRecordForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["checkRecord"] = this.checkRecord ? this.checkRecord.toJSON() : undefined;
        return data;
    };
    GetCheckRecordForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetCheckRecordForEditOutput();
        result.init(json);
        return result;
    };
    return GetCheckRecordForEditOutput;
}());
exports.GetCheckRecordForEditOutput = GetCheckRecordForEditOutput;
var PagedResultDtoOfCheckRecordListDto = /** @class */ (function () {
    function PagedResultDtoOfCheckRecordListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfCheckRecordListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(CheckRecordListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfCheckRecordListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfCheckRecordListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfCheckRecordListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfCheckRecordListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfCheckRecordListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfCheckRecordListDto;
}());
exports.PagedResultDtoOfCheckRecordListDto = PagedResultDtoOfCheckRecordListDto;
var CreateOrUpdateClientVersionInput = /** @class */ (function () {
    function CreateOrUpdateClientVersionInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.clientVersion = new ClientVersionEditDto();
        }
    }
    CreateOrUpdateClientVersionInput.prototype.init = function (data) {
        if (data) {
            this.clientVersion = data["clientVersion"] ? ClientVersionEditDto.fromJS(data["clientVersion"]) : new ClientVersionEditDto();
        }
    };
    CreateOrUpdateClientVersionInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateClientVersionInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateClientVersionInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["clientVersion"] = this.clientVersion ? this.clientVersion.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateClientVersionInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateClientVersionInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateClientVersionInput;
}());
exports.CreateOrUpdateClientVersionInput = CreateOrUpdateClientVersionInput;
var ClientVersionEditDto = /** @class */ (function () {
    function ClientVersionEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ClientVersionEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.appName = data["appName"];
            this.versionName = data["versionName"];
            this.versionCode = data["versionCode"];
            this.versionDesc = data["versionDesc"];
            this.deviceType = data["deviceType"];
        }
    };
    ClientVersionEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ClientVersionEditDto();
        result.init(data);
        return result;
    };
    ClientVersionEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["appName"] = this.appName;
        data["versionName"] = this.versionName;
        data["versionCode"] = this.versionCode;
        data["versionDesc"] = this.versionDesc;
        data["deviceType"] = this.deviceType;
        return data;
    };
    ClientVersionEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ClientVersionEditDto();
        result.init(json);
        return result;
    };
    return ClientVersionEditDto;
}());
exports.ClientVersionEditDto = ClientVersionEditDto;
var ClientVersionListDto = /** @class */ (function () {
    function ClientVersionListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ClientVersionListDto.prototype.init = function (data) {
        if (data) {
            this.appName = data["appName"];
            this.versionName = data["versionName"];
            this.versionCode = data["versionCode"];
            this.versionDesc = data["versionDesc"];
            this.deviceType = data["deviceType"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ClientVersionListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ClientVersionListDto();
        result.init(data);
        return result;
    };
    ClientVersionListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["appName"] = this.appName;
        data["versionName"] = this.versionName;
        data["versionCode"] = this.versionCode;
        data["versionDesc"] = this.versionDesc;
        data["deviceType"] = this.deviceType;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ClientVersionListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ClientVersionListDto();
        result.init(json);
        return result;
    };
    return ClientVersionListDto;
}());
exports.ClientVersionListDto = ClientVersionListDto;
var GetClientVersionForEditOutput = /** @class */ (function () {
    function GetClientVersionForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetClientVersionForEditOutput.prototype.init = function (data) {
        if (data) {
            this.clientVersion = data["clientVersion"] ? ClientVersionEditDto.fromJS(data["clientVersion"]) : undefined;
        }
    };
    GetClientVersionForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetClientVersionForEditOutput();
        result.init(data);
        return result;
    };
    GetClientVersionForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["clientVersion"] = this.clientVersion ? this.clientVersion.toJSON() : undefined;
        return data;
    };
    GetClientVersionForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetClientVersionForEditOutput();
        result.init(json);
        return result;
    };
    return GetClientVersionForEditOutput;
}());
exports.GetClientVersionForEditOutput = GetClientVersionForEditOutput;
var PagedResultDtoOfClientVersionListDto = /** @class */ (function () {
    function PagedResultDtoOfClientVersionListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfClientVersionListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ClientVersionListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfClientVersionListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfClientVersionListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfClientVersionListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfClientVersionListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfClientVersionListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfClientVersionListDto;
}());
exports.PagedResultDtoOfClientVersionListDto = PagedResultDtoOfClientVersionListDto;
var CreateOrUpdateCommonCustomerInput = /** @class */ (function () {
    function CreateOrUpdateCommonCustomerInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.commonCustomer = new CommonCustomerEditDto();
        }
    }
    CreateOrUpdateCommonCustomerInput.prototype.init = function (data) {
        if (data) {
            this.commonCustomer = data["commonCustomer"] ? CommonCustomerEditDto.fromJS(data["commonCustomer"]) : new CommonCustomerEditDto();
        }
    };
    CreateOrUpdateCommonCustomerInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateCommonCustomerInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateCommonCustomerInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["commonCustomer"] = this.commonCustomer ? this.commonCustomer.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateCommonCustomerInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateCommonCustomerInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateCommonCustomerInput;
}());
exports.CreateOrUpdateCommonCustomerInput = CreateOrUpdateCommonCustomerInput;
/** 的列表DTO Yozeev.BusinessLogic.CommonCustomer */
var CommonCustomerEditDto = /** @class */ (function () {
    function CommonCustomerEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CommonCustomerEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.mainCustomerId = data["mainCustomerId"];
            this.viceCustomerId = data["viceCustomerId"];
            this.customerName = data["customerName"];
            this.mobile = data["mobile"];
            this.sex = data["sex"];
            this.certificatesNum = data["certificatesNum"];
            this.verifiableType = data["verifiableType"];
        }
    };
    CommonCustomerEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CommonCustomerEditDto();
        result.init(data);
        return result;
    };
    CommonCustomerEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["mainCustomerId"] = this.mainCustomerId;
        data["viceCustomerId"] = this.viceCustomerId;
        data["customerName"] = this.customerName;
        data["mobile"] = this.mobile;
        data["sex"] = this.sex;
        data["certificatesNum"] = this.certificatesNum;
        data["verifiableType"] = this.verifiableType;
        return data;
    };
    CommonCustomerEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CommonCustomerEditDto();
        result.init(json);
        return result;
    };
    return CommonCustomerEditDto;
}());
exports.CommonCustomerEditDto = CommonCustomerEditDto;
/** 的编辑DTO Yozeev.BusinessLogic.CommonCustomer */
var CommonCustomerListDto = /** @class */ (function () {
    function CommonCustomerListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CommonCustomerListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.mainCustomerId = data["mainCustomerId"];
            this.viceCustomerId = data["viceCustomerId"];
            this.viceCustomer = data["viceCustomer"] ? Customer.fromJS(data["viceCustomer"]) : undefined;
            this.customerName = data["customerName"];
            this.mobile = data["mobile"];
            this.sex = data["sex"];
            this.certificatesNum = data["certificatesNum"];
            this.verifiableType = data["verifiableType"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    CommonCustomerListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CommonCustomerListDto();
        result.init(data);
        return result;
    };
    CommonCustomerListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["mainCustomerId"] = this.mainCustomerId;
        data["viceCustomerId"] = this.viceCustomerId;
        data["viceCustomer"] = this.viceCustomer ? this.viceCustomer.toJSON() : undefined;
        data["customerName"] = this.customerName;
        data["mobile"] = this.mobile;
        data["sex"] = this.sex;
        data["certificatesNum"] = this.certificatesNum;
        data["verifiableType"] = this.verifiableType;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    CommonCustomerListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CommonCustomerListDto();
        result.init(json);
        return result;
    };
    return CommonCustomerListDto;
}());
exports.CommonCustomerListDto = CommonCustomerListDto;
/** 读取可编辑的Dto */
var GetCommonCustomerForEditOutput = /** @class */ (function () {
    function GetCommonCustomerForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetCommonCustomerForEditOutput.prototype.init = function (data) {
        if (data) {
            this.commonCustomer = data["commonCustomer"] ? CommonCustomerEditDto.fromJS(data["commonCustomer"]) : undefined;
            if (data["sexEnumTypeEnum"] && data["sexEnumTypeEnum"].constructor === Array) {
                this.sexEnumTypeEnum = [];
                for (var _i = 0, _a = data["sexEnumTypeEnum"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.sexEnumTypeEnum.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            if (data["verifiableTypeEnumTypeEnum"] && data["verifiableTypeEnumTypeEnum"].constructor === Array) {
                this.verifiableTypeEnumTypeEnum = [];
                for (var _b = 0, _c = data["verifiableTypeEnumTypeEnum"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.verifiableTypeEnumTypeEnum.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
        }
    };
    GetCommonCustomerForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetCommonCustomerForEditOutput();
        result.init(data);
        return result;
    };
    GetCommonCustomerForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["commonCustomer"] = this.commonCustomer ? this.commonCustomer.toJSON() : undefined;
        if (this.sexEnumTypeEnum && this.sexEnumTypeEnum.constructor === Array) {
            data["sexEnumTypeEnum"] = [];
            for (var _i = 0, _a = this.sexEnumTypeEnum; _i < _a.length; _i++) {
                var item = _a[_i];
                data["sexEnumTypeEnum"].push(item.toJSON());
            }
        }
        if (this.verifiableTypeEnumTypeEnum && this.verifiableTypeEnumTypeEnum.constructor === Array) {
            data["verifiableTypeEnumTypeEnum"] = [];
            for (var _b = 0, _c = this.verifiableTypeEnumTypeEnum; _b < _c.length; _b++) {
                var item = _c[_b];
                data["verifiableTypeEnumTypeEnum"].push(item.toJSON());
            }
        }
        return data;
    };
    GetCommonCustomerForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetCommonCustomerForEditOutput();
        result.init(json);
        return result;
    };
    return GetCommonCustomerForEditOutput;
}());
exports.GetCommonCustomerForEditOutput = GetCommonCustomerForEditOutput;
var KeyValuePairOfStringAndString = /** @class */ (function () {
    function KeyValuePairOfStringAndString(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    KeyValuePairOfStringAndString.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.value = data["value"];
        }
    };
    KeyValuePairOfStringAndString.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new KeyValuePairOfStringAndString();
        result.init(data);
        return result;
    };
    KeyValuePairOfStringAndString.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    };
    KeyValuePairOfStringAndString.prototype.clone = function () {
        var json = this.toJSON();
        var result = new KeyValuePairOfStringAndString();
        result.init(json);
        return result;
    };
    return KeyValuePairOfStringAndString;
}());
exports.KeyValuePairOfStringAndString = KeyValuePairOfStringAndString;
var PagedResultDtoOfCommonCustomerListDto = /** @class */ (function () {
    function PagedResultDtoOfCommonCustomerListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfCommonCustomerListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(CommonCustomerListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfCommonCustomerListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfCommonCustomerListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfCommonCustomerListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfCommonCustomerListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfCommonCustomerListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfCommonCustomerListDto;
}());
exports.PagedResultDtoOfCommonCustomerListDto = PagedResultDtoOfCommonCustomerListDto;
var CommonLookupFindUsersInput = /** @class */ (function () {
    function CommonLookupFindUsersInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CommonLookupFindUsersInput.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filterText = data["filterText"];
        }
    };
    CommonLookupFindUsersInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CommonLookupFindUsersInput();
        result.init(data);
        return result;
    };
    CommonLookupFindUsersInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filterText"] = this.filterText;
        return data;
    };
    CommonLookupFindUsersInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CommonLookupFindUsersInput();
        result.init(json);
        return result;
    };
    return CommonLookupFindUsersInput;
}());
exports.CommonLookupFindUsersInput = CommonLookupFindUsersInput;
var PagedResultDtoOfNameValueDto = /** @class */ (function () {
    function PagedResultDtoOfNameValueDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfNameValueDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(NameValueDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfNameValueDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfNameValueDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfNameValueDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfNameValueDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfNameValueDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfNameValueDto;
}());
exports.PagedResultDtoOfNameValueDto = PagedResultDtoOfNameValueDto;
var GetDefaultEditionNameOutput = /** @class */ (function () {
    function GetDefaultEditionNameOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetDefaultEditionNameOutput.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
        }
    };
    GetDefaultEditionNameOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetDefaultEditionNameOutput();
        result.init(data);
        return result;
    };
    GetDefaultEditionNameOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    };
    GetDefaultEditionNameOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetDefaultEditionNameOutput();
        result.init(json);
        return result;
    };
    return GetDefaultEditionNameOutput;
}());
exports.GetDefaultEditionNameOutput = GetDefaultEditionNameOutput;
var ListResultDtoOfSubscribableEditionComboboxItemDto = /** @class */ (function () {
    function ListResultDtoOfSubscribableEditionComboboxItemDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfSubscribableEditionComboboxItemDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(SubscribableEditionComboboxItemDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfSubscribableEditionComboboxItemDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfSubscribableEditionComboboxItemDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfSubscribableEditionComboboxItemDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfSubscribableEditionComboboxItemDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfSubscribableEditionComboboxItemDto;
}());
exports.ListResultDtoOfSubscribableEditionComboboxItemDto = ListResultDtoOfSubscribableEditionComboboxItemDto;
var SubscribableEditionComboboxItemDto = /** @class */ (function () {
    function SubscribableEditionComboboxItemDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SubscribableEditionComboboxItemDto.prototype.init = function (data) {
        if (data) {
            this.isFree = data["isFree"];
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    };
    SubscribableEditionComboboxItemDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SubscribableEditionComboboxItemDto();
        result.init(data);
        return result;
    };
    SubscribableEditionComboboxItemDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isFree"] = this.isFree;
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data;
    };
    SubscribableEditionComboboxItemDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SubscribableEditionComboboxItemDto();
        result.init(json);
        return result;
    };
    return SubscribableEditionComboboxItemDto;
}());
exports.SubscribableEditionComboboxItemDto = SubscribableEditionComboboxItemDto;
var ListResultDtoOfComboboxItemDtoTOfInt32 = /** @class */ (function () {
    function ListResultDtoOfComboboxItemDtoTOfInt32(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfComboboxItemDtoTOfInt32.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ComboboxItemDtoTOfInt32.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfComboboxItemDtoTOfInt32.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfComboboxItemDtoTOfInt32();
        result.init(data);
        return result;
    };
    ListResultDtoOfComboboxItemDtoTOfInt32.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfComboboxItemDtoTOfInt32.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfComboboxItemDtoTOfInt32();
        result.init(json);
        return result;
    };
    return ListResultDtoOfComboboxItemDtoTOfInt32;
}());
exports.ListResultDtoOfComboboxItemDtoTOfInt32 = ListResultDtoOfComboboxItemDtoTOfInt32;
var ComboboxItemDtoTOfInt32 = /** @class */ (function () {
    function ComboboxItemDtoTOfInt32(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ComboboxItemDtoTOfInt32.prototype.init = function (data) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    };
    ComboboxItemDtoTOfInt32.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ComboboxItemDtoTOfInt32();
        result.init(data);
        return result;
    };
    ComboboxItemDtoTOfInt32.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data;
    };
    ComboboxItemDtoTOfInt32.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ComboboxItemDtoTOfInt32();
        result.init(json);
        return result;
    };
    return ComboboxItemDtoTOfInt32;
}());
exports.ComboboxItemDtoTOfInt32 = ComboboxItemDtoTOfInt32;
var CreateOrUpdateCustomerInput = /** @class */ (function () {
    function CreateOrUpdateCustomerInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.customer = new CustomerEditDto();
        }
    }
    CreateOrUpdateCustomerInput.prototype.init = function (data) {
        if (data) {
            this.customer = data["customer"] ? CustomerEditDto.fromJS(data["customer"]) : new CustomerEditDto();
            this.setRandomPassword = data["setRandomPassword"];
        }
    };
    CreateOrUpdateCustomerInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateCustomerInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateCustomerInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["setRandomPassword"] = this.setRandomPassword;
        return data;
    };
    CreateOrUpdateCustomerInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateCustomerInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateCustomerInput;
}());
exports.CreateOrUpdateCustomerInput = CreateOrUpdateCustomerInput;
var CustomerEditDto = /** @class */ (function () {
    function CustomerEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CustomerEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.customerName = data["customerName"];
            this.mobile = data["mobile"];
            this.loginPwd = data["loginPwd"];
            this.sex = data["sex"];
            this.country = data["country"];
            this.province = data["province"];
            this.city = data["city"];
            this.county = data["county"];
            this.certificatesNum = data["certificatesNum"];
            this.verifiableType = data["verifiableType"];
            this.job = data["job"];
            this.openID = data["openID"];
            this.photo = data["photo"];
            this.dateOfBirth = data["dateOfBirth"] ? moment(data["dateOfBirth"].toString()) : undefined;
            this.dateOfBirthStr = data["dateOfBirthStr"];
        }
    };
    CustomerEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CustomerEditDto();
        result.init(data);
        return result;
    };
    CustomerEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customerName"] = this.customerName;
        data["mobile"] = this.mobile;
        data["loginPwd"] = this.loginPwd;
        data["sex"] = this.sex;
        data["country"] = this.country;
        data["province"] = this.province;
        data["city"] = this.city;
        data["county"] = this.county;
        data["certificatesNum"] = this.certificatesNum;
        data["verifiableType"] = this.verifiableType;
        data["job"] = this.job;
        data["openID"] = this.openID;
        data["photo"] = this.photo;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["dateOfBirthStr"] = this.dateOfBirthStr;
        return data;
    };
    CustomerEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CustomerEditDto();
        result.init(json);
        return result;
    };
    return CustomerEditDto;
}());
exports.CustomerEditDto = CustomerEditDto;
/** 判断客户是否已经存在的dto */
var CustomerExistsDto = /** @class */ (function () {
    function CustomerExistsDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CustomerExistsDto.prototype.init = function (data) {
        if (data) {
            this.exist = data["exist"];
            this.customer = data["customer"] ? CustomerEditDto.fromJS(data["customer"]) : undefined;
        }
    };
    CustomerExistsDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CustomerExistsDto();
        result.init(data);
        return result;
    };
    CustomerExistsDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["exist"] = this.exist;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        return data;
    };
    CustomerExistsDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CustomerExistsDto();
        result.init(json);
        return result;
    };
    return CustomerExistsDto;
}());
exports.CustomerExistsDto = CustomerExistsDto;
var CustomerListDto = /** @class */ (function () {
    function CustomerListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CustomerListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.customerName = data["customerName"];
            this.mobile = data["mobile"];
            this.loginPwd = data["loginPwd"];
            this.sex = data["sex"];
            this.country = data["country"];
            this.province = data["province"];
            this.city = data["city"];
            this.county = data["county"];
            this.certificatesNum = data["certificatesNum"];
            this.verifiableType = data["verifiableType"];
            this.job = data["job"];
            this.openID = data["openID"];
            this.photo = data["photo"];
            this.dateOfBirth = data["dateOfBirth"] ? moment(data["dateOfBirth"].toString()) : undefined;
            this.dateOfBirthStr = data["dateOfBirthStr"];
            this.creationTimeStr = data["creationTimeStr"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    CustomerListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CustomerListDto();
        result.init(data);
        return result;
    };
    CustomerListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["customerName"] = this.customerName;
        data["mobile"] = this.mobile;
        data["loginPwd"] = this.loginPwd;
        data["sex"] = this.sex;
        data["country"] = this.country;
        data["province"] = this.province;
        data["city"] = this.city;
        data["county"] = this.county;
        data["certificatesNum"] = this.certificatesNum;
        data["verifiableType"] = this.verifiableType;
        data["job"] = this.job;
        data["openID"] = this.openID;
        data["photo"] = this.photo;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined;
        data["dateOfBirthStr"] = this.dateOfBirthStr;
        data["creationTimeStr"] = this.creationTimeStr;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    CustomerListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CustomerListDto();
        result.init(json);
        return result;
    };
    return CustomerListDto;
}());
exports.CustomerListDto = CustomerListDto;
var GetCustomerForEditOutput = /** @class */ (function () {
    function GetCustomerForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetCustomerForEditOutput.prototype.init = function (data) {
        if (data) {
            this.customer = data["customer"] ? CustomerEditDto.fromJS(data["customer"]) : undefined;
        }
    };
    GetCustomerForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetCustomerForEditOutput();
        result.init(data);
        return result;
    };
    GetCustomerForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        return data;
    };
    GetCustomerForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetCustomerForEditOutput();
        result.init(json);
        return result;
    };
    return GetCustomerForEditOutput;
}());
exports.GetCustomerForEditOutput = GetCustomerForEditOutput;
var GetCustomersInput = /** @class */ (function () {
    function GetCustomersInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetCustomersInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetCustomersInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetCustomersInput();
        result.init(data);
        return result;
    };
    GetCustomersInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetCustomersInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetCustomersInput();
        result.init(json);
        return result;
    };
    return GetCustomersInput;
}());
exports.GetCustomersInput = GetCustomersInput;
var PagedResultDtoOfCustomerListDto = /** @class */ (function () {
    function PagedResultDtoOfCustomerListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfCustomerListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(CustomerListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfCustomerListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfCustomerListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfCustomerListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfCustomerListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfCustomerListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfCustomerListDto;
}());
exports.PagedResultDtoOfCustomerListDto = PagedResultDtoOfCustomerListDto;
var UploadUserPictureResultDto = /** @class */ (function () {
    function UploadUserPictureResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UploadUserPictureResultDto.prototype.init = function (data) {
        if (data) {
            this.uri = data["uri"];
        }
    };
    UploadUserPictureResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UploadUserPictureResultDto();
        result.init(data);
        return result;
    };
    UploadUserPictureResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["uri"] = this.uri;
        return data;
    };
    UploadUserPictureResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UploadUserPictureResultDto();
        result.init(json);
        return result;
    };
    return UploadUserPictureResultDto;
}());
exports.UploadUserPictureResultDto = UploadUserPictureResultDto;
var UploadUserPictureDto = /** @class */ (function () {
    function UploadUserPictureDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UploadUserPictureDto.prototype.init = function (data) {
        if (data) {
            this.pictureString = data["pictureString"];
        }
    };
    UploadUserPictureDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UploadUserPictureDto();
        result.init(data);
        return result;
    };
    UploadUserPictureDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["pictureString"] = this.pictureString;
        return data;
    };
    UploadUserPictureDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UploadUserPictureDto();
        result.init(json);
        return result;
    };
    return UploadUserPictureDto;
}());
exports.UploadUserPictureDto = UploadUserPictureDto;
var CreateOrUpdateDateDictionaryInput = /** @class */ (function () {
    function CreateOrUpdateDateDictionaryInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.dateDictionary = new DateDictionaryEditDto();
        }
    }
    CreateOrUpdateDateDictionaryInput.prototype.init = function (data) {
        if (data) {
            this.dateDictionary = data["dateDictionary"] ? DateDictionaryEditDto.fromJS(data["dateDictionary"]) : new DateDictionaryEditDto();
        }
    };
    CreateOrUpdateDateDictionaryInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateDateDictionaryInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateDateDictionaryInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["dateDictionary"] = this.dateDictionary ? this.dateDictionary.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateDateDictionaryInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateDateDictionaryInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateDateDictionaryInput;
}());
exports.CreateOrUpdateDateDictionaryInput = CreateOrUpdateDateDictionaryInput;
var DateDictionaryEditDto = /** @class */ (function () {
    function DateDictionaryEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DateDictionaryEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.dictionaryName = data["dictionaryName"];
            this.dictionaryCode = data["dictionaryCode"];
            this.sort = data["sort"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? DateDictionary.fromJS(data["parent"]) : undefined;
            this.explain = data["explain"];
        }
    };
    DateDictionaryEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DateDictionaryEditDto();
        result.init(data);
        return result;
    };
    DateDictionaryEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dictionaryName"] = this.dictionaryName;
        data["dictionaryCode"] = this.dictionaryCode;
        data["sort"] = this.sort;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["explain"] = this.explain;
        return data;
    };
    DateDictionaryEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DateDictionaryEditDto();
        result.init(json);
        return result;
    };
    return DateDictionaryEditDto;
}());
exports.DateDictionaryEditDto = DateDictionaryEditDto;
var DateDictionary = /** @class */ (function () {
    function DateDictionary(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DateDictionary.prototype.init = function (data) {
        if (data) {
            this.dictionaryName = data["dictionaryName"];
            this.dictionaryCode = data["dictionaryCode"];
            this.sort = data["sort"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? DateDictionary.fromJS(data["parent"]) : undefined;
            this.explain = data["explain"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    DateDictionary.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DateDictionary();
        result.init(data);
        return result;
    };
    DateDictionary.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["dictionaryName"] = this.dictionaryName;
        data["dictionaryCode"] = this.dictionaryCode;
        data["sort"] = this.sort;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["explain"] = this.explain;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    DateDictionary.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DateDictionary();
        result.init(json);
        return result;
    };
    return DateDictionary;
}());
exports.DateDictionary = DateDictionary;
var DateDictionaryListDto = /** @class */ (function () {
    function DateDictionaryListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DateDictionaryListDto.prototype.init = function (data) {
        if (data) {
            this.dictionaryName = data["dictionaryName"];
            this.dictionaryCode = data["dictionaryCode"];
            this.sort = data["sort"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? DateDictionary.fromJS(data["parent"]) : undefined;
            this.explain = data["explain"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    DateDictionaryListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DateDictionaryListDto();
        result.init(data);
        return result;
    };
    DateDictionaryListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["dictionaryName"] = this.dictionaryName;
        data["dictionaryCode"] = this.dictionaryCode;
        data["sort"] = this.sort;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["explain"] = this.explain;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    DateDictionaryListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DateDictionaryListDto();
        result.init(json);
        return result;
    };
    return DateDictionaryListDto;
}());
exports.DateDictionaryListDto = DateDictionaryListDto;
var GetDateDictionaryForEditOutput = /** @class */ (function () {
    function GetDateDictionaryForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetDateDictionaryForEditOutput.prototype.init = function (data) {
        if (data) {
            this.dateDictionary = data["dateDictionary"] ? DateDictionaryEditDto.fromJS(data["dateDictionary"]) : undefined;
        }
    };
    GetDateDictionaryForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetDateDictionaryForEditOutput();
        result.init(data);
        return result;
    };
    GetDateDictionaryForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["dateDictionary"] = this.dateDictionary ? this.dateDictionary.toJSON() : undefined;
        return data;
    };
    GetDateDictionaryForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetDateDictionaryForEditOutput();
        result.init(json);
        return result;
    };
    return GetDateDictionaryForEditOutput;
}());
exports.GetDateDictionaryForEditOutput = GetDateDictionaryForEditOutput;
var PagedResultDtoOfDateDictionaryListDto = /** @class */ (function () {
    function PagedResultDtoOfDateDictionaryListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfDateDictionaryListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(DateDictionaryListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfDateDictionaryListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfDateDictionaryListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfDateDictionaryListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfDateDictionaryListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfDateDictionaryListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfDateDictionaryListDto;
}());
exports.PagedResultDtoOfDateDictionaryListDto = PagedResultDtoOfDateDictionaryListDto;
var CreateOrUpdateDeviceInput = /** @class */ (function () {
    function CreateOrUpdateDeviceInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.device = new DeviceEditDto();
        }
    }
    CreateOrUpdateDeviceInput.prototype.init = function (data) {
        if (data) {
            this.device = data["device"] ? DeviceEditDto.fromJS(data["device"]) : new DeviceEditDto();
        }
    };
    CreateOrUpdateDeviceInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateDeviceInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateDeviceInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["device"] = this.device ? this.device.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateDeviceInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateDeviceInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateDeviceInput;
}());
exports.CreateOrUpdateDeviceInput = CreateOrUpdateDeviceInput;
var DeviceEditDto = /** @class */ (function () {
    function DeviceEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DeviceEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.ticketStationId = data["ticketStationId"];
            this.deviceCode = data["deviceCode"];
            this.deviceName = data["deviceName"];
            this.ipAddress = data["ipAddress"];
            this.port = data["port"];
            this.deviceType = data["deviceType"];
            this.secretKey = data["secretKey"];
            this.isEnabled = data["isEnabled"];
            this.deviceStatus = data["deviceStatus"];
            if (data["verifiableTypes"] && data["verifiableTypes"].constructor === Array) {
                this.verifiableTypes = [];
                for (var _i = 0, _a = data["verifiableTypes"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.verifiableTypes.push(item);
                }
            }
        }
    };
    DeviceEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DeviceEditDto();
        result.init(data);
        return result;
    };
    DeviceEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketStationId"] = this.ticketStationId;
        data["deviceCode"] = this.deviceCode;
        data["deviceName"] = this.deviceName;
        data["ipAddress"] = this.ipAddress;
        data["port"] = this.port;
        data["deviceType"] = this.deviceType;
        data["secretKey"] = this.secretKey;
        data["isEnabled"] = this.isEnabled;
        data["deviceStatus"] = this.deviceStatus;
        if (this.verifiableTypes && this.verifiableTypes.constructor === Array) {
            data["verifiableTypes"] = [];
            for (var _i = 0, _a = this.verifiableTypes; _i < _a.length; _i++) {
                var item = _a[_i];
                data["verifiableTypes"].push(item);
            }
        }
        return data;
    };
    DeviceEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DeviceEditDto();
        result.init(json);
        return result;
    };
    return DeviceEditDto;
}());
exports.DeviceEditDto = DeviceEditDto;
var DeviceListDto = /** @class */ (function () {
    function DeviceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DeviceListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketStationId = data["ticketStationId"];
            this.deviceCode = data["deviceCode"];
            this.deviceName = data["deviceName"];
            this.ipAddress = data["ipAddress"];
            this.port = data["port"];
            this.deviceType = data["deviceType"];
            this.secretKey = data["secretKey"];
            this.isEnabled = data["isEnabled"];
            this.deviceStatus = data["deviceStatus"];
            if (data["verifiableTypes"] && data["verifiableTypes"].constructor === Array) {
                this.verifiableTypes = [];
                for (var _i = 0, _a = data["verifiableTypes"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.verifiableTypes.push(item);
                }
            }
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    DeviceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DeviceListDto();
        result.init(data);
        return result;
    };
    DeviceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketStationId"] = this.ticketStationId;
        data["deviceCode"] = this.deviceCode;
        data["deviceName"] = this.deviceName;
        data["ipAddress"] = this.ipAddress;
        data["port"] = this.port;
        data["deviceType"] = this.deviceType;
        data["secretKey"] = this.secretKey;
        data["isEnabled"] = this.isEnabled;
        data["deviceStatus"] = this.deviceStatus;
        if (this.verifiableTypes && this.verifiableTypes.constructor === Array) {
            data["verifiableTypes"] = [];
            for (var _i = 0, _a = this.verifiableTypes; _i < _a.length; _i++) {
                var item = _a[_i];
                data["verifiableTypes"].push(item);
            }
        }
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    DeviceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DeviceListDto();
        result.init(json);
        return result;
    };
    return DeviceListDto;
}());
exports.DeviceListDto = DeviceListDto;
var GetDeviceForEditOutput = /** @class */ (function () {
    function GetDeviceForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetDeviceForEditOutput.prototype.init = function (data) {
        if (data) {
            this.device = data["device"] ? DeviceEditDto.fromJS(data["device"]) : undefined;
        }
    };
    GetDeviceForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetDeviceForEditOutput();
        result.init(data);
        return result;
    };
    GetDeviceForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["device"] = this.device ? this.device.toJSON() : undefined;
        return data;
    };
    GetDeviceForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetDeviceForEditOutput();
        result.init(json);
        return result;
    };
    return GetDeviceForEditOutput;
}());
exports.GetDeviceForEditOutput = GetDeviceForEditOutput;
var GetDevicesInput = /** @class */ (function () {
    function GetDevicesInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetDevicesInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetDevicesInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetDevicesInput();
        result.init(data);
        return result;
    };
    GetDevicesInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetDevicesInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetDevicesInput();
        result.init(json);
        return result;
    };
    return GetDevicesInput;
}());
exports.GetDevicesInput = GetDevicesInput;
var PagedResultDtoOfDeviceListDto = /** @class */ (function () {
    function PagedResultDtoOfDeviceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfDeviceListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(DeviceListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfDeviceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfDeviceListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfDeviceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfDeviceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfDeviceListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfDeviceListDto;
}());
exports.PagedResultDtoOfDeviceListDto = PagedResultDtoOfDeviceListDto;
var HeartBeatResult = /** @class */ (function () {
    function HeartBeatResult(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HeartBeatResult.prototype.init = function (data) {
        if (data) {
            this.status = data["status"];
        }
    };
    HeartBeatResult.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HeartBeatResult();
        result.init(data);
        return result;
    };
    HeartBeatResult.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        return data;
    };
    HeartBeatResult.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HeartBeatResult();
        result.init(json);
        return result;
    };
    return HeartBeatResult;
}());
exports.HeartBeatResult = HeartBeatResult;
var CreateOrUpdateEditionDto = /** @class */ (function () {
    function CreateOrUpdateEditionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.edition = new EditionEditDto();
            this.featureValues = [];
        }
    }
    CreateOrUpdateEditionDto.prototype.init = function (data) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : new EditionEditDto();
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (var _i = 0, _a = data["featureValues"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
        }
    };
    CreateOrUpdateEditionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateEditionDto();
        result.init(data);
        return result;
    };
    CreateOrUpdateEditionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (var _i = 0, _a = this.featureValues; _i < _a.length; _i++) {
                var item = _a[_i];
                data["featureValues"].push(item.toJSON());
            }
        }
        return data;
    };
    CreateOrUpdateEditionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateEditionDto();
        result.init(json);
        return result;
    };
    return CreateOrUpdateEditionDto;
}());
exports.CreateOrUpdateEditionDto = CreateOrUpdateEditionDto;
var EditionEditDto = /** @class */ (function () {
    function EditionEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EditionEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.trialDayCount = data["trialDayCount"];
            this.waitingDayAfterExpire = data["waitingDayAfterExpire"];
            this.expiringEditionId = data["expiringEditionId"];
        }
    };
    EditionEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EditionEditDto();
        result.init(data);
        return result;
    };
    EditionEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["trialDayCount"] = this.trialDayCount;
        data["waitingDayAfterExpire"] = this.waitingDayAfterExpire;
        data["expiringEditionId"] = this.expiringEditionId;
        return data;
    };
    EditionEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EditionEditDto();
        result.init(json);
        return result;
    };
    return EditionEditDto;
}());
exports.EditionEditDto = EditionEditDto;
var GetEditionEditOutput = /** @class */ (function () {
    function GetEditionEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetEditionEditOutput.prototype.init = function (data) {
        if (data) {
            this.edition = data["edition"] ? EditionEditDto.fromJS(data["edition"]) : undefined;
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (var _i = 0, _a = data["featureValues"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (var _b = 0, _c = data["features"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.features.push(FlatFeatureDto.fromJS(item));
                }
            }
        }
    };
    GetEditionEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetEditionEditOutput();
        result.init(data);
        return result;
    };
    GetEditionEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["edition"] = this.edition ? this.edition.toJSON() : undefined;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (var _i = 0, _a = this.featureValues; _i < _a.length; _i++) {
                var item = _a[_i];
                data["featureValues"].push(item.toJSON());
            }
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (var _b = 0, _c = this.features; _b < _c.length; _b++) {
                var item = _c[_b];
                data["features"].push(item.toJSON());
            }
        }
        return data;
    };
    GetEditionEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetEditionEditOutput();
        result.init(json);
        return result;
    };
    return GetEditionEditOutput;
}());
exports.GetEditionEditOutput = GetEditionEditOutput;
var FlatFeatureDto = /** @class */ (function () {
    function FlatFeatureDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FlatFeatureDto.prototype.init = function (data) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.defaultValue = data["defaultValue"];
            this.inputType = data["inputType"] ? FeatureInputTypeDto.fromJS(data["inputType"]) : undefined;
        }
    };
    FlatFeatureDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FlatFeatureDto();
        result.init(data);
        return result;
    };
    FlatFeatureDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["defaultValue"] = this.defaultValue;
        data["inputType"] = this.inputType ? this.inputType.toJSON() : undefined;
        return data;
    };
    FlatFeatureDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FlatFeatureDto();
        result.init(json);
        return result;
    };
    return FlatFeatureDto;
}());
exports.FlatFeatureDto = FlatFeatureDto;
var FeatureInputTypeDto = /** @class */ (function () {
    function FeatureInputTypeDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FeatureInputTypeDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (var key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
            this.validator = data["validator"] ? IValueValidator.fromJS(data["validator"]) : undefined;
            this.itemSource = data["itemSource"] ? LocalizableComboboxItemSourceDto.fromJS(data["itemSource"]) : undefined;
        }
    };
    FeatureInputTypeDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FeatureInputTypeDto();
        result.init(data);
        return result;
    };
    FeatureInputTypeDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (var key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        data["validator"] = this.validator ? this.validator.toJSON() : undefined;
        data["itemSource"] = this.itemSource ? this.itemSource.toJSON() : undefined;
        return data;
    };
    FeatureInputTypeDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FeatureInputTypeDto();
        result.init(json);
        return result;
    };
    return FeatureInputTypeDto;
}());
exports.FeatureInputTypeDto = FeatureInputTypeDto;
var IValueValidator = /** @class */ (function () {
    function IValueValidator(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    IValueValidator.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            if (data["attributes"]) {
                this.attributes = {};
                for (var key in data["attributes"]) {
                    if (data["attributes"].hasOwnProperty(key))
                        this.attributes[key] = data["attributes"][key];
                }
            }
        }
    };
    IValueValidator.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new IValueValidator();
        result.init(data);
        return result;
    };
    IValueValidator.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (this.attributes) {
            data["attributes"] = {};
            for (var key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    data["attributes"][key] = this.attributes[key];
            }
        }
        return data;
    };
    IValueValidator.prototype.clone = function () {
        var json = this.toJSON();
        var result = new IValueValidator();
        result.init(json);
        return result;
    };
    return IValueValidator;
}());
exports.IValueValidator = IValueValidator;
var LocalizableComboboxItemSourceDto = /** @class */ (function () {
    function LocalizableComboboxItemSourceDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LocalizableComboboxItemSourceDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(LocalizableComboboxItemDto.fromJS(item));
                }
            }
        }
    };
    LocalizableComboboxItemSourceDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LocalizableComboboxItemSourceDto();
        result.init(data);
        return result;
    };
    LocalizableComboboxItemSourceDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    LocalizableComboboxItemSourceDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LocalizableComboboxItemSourceDto();
        result.init(json);
        return result;
    };
    return LocalizableComboboxItemSourceDto;
}());
exports.LocalizableComboboxItemSourceDto = LocalizableComboboxItemSourceDto;
var LocalizableComboboxItemDto = /** @class */ (function () {
    function LocalizableComboboxItemDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LocalizableComboboxItemDto.prototype.init = function (data) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
        }
    };
    LocalizableComboboxItemDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LocalizableComboboxItemDto();
        result.init(data);
        return result;
    };
    LocalizableComboboxItemDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        return data;
    };
    LocalizableComboboxItemDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LocalizableComboboxItemDto();
        result.init(json);
        return result;
    };
    return LocalizableComboboxItemDto;
}());
exports.LocalizableComboboxItemDto = LocalizableComboboxItemDto;
var ListResultDtoOfEditionListDto = /** @class */ (function () {
    function ListResultDtoOfEditionListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfEditionListDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(EditionListDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfEditionListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfEditionListDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfEditionListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfEditionListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfEditionListDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfEditionListDto;
}());
exports.ListResultDtoOfEditionListDto = ListResultDtoOfEditionListDto;
var EditionListDto = /** @class */ (function () {
    function EditionListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EditionListDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"];
        }
    };
    EditionListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EditionListDto();
        result.init(data);
        return result;
    };
    EditionListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id;
        return data;
    };
    EditionListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EditionListDto();
        result.init(json);
        return result;
    };
    return EditionListDto;
}());
exports.EditionListDto = EditionListDto;
var MoveTenantsToAnotherEditionDto = /** @class */ (function () {
    function MoveTenantsToAnotherEditionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MoveTenantsToAnotherEditionDto.prototype.init = function (data) {
        if (data) {
            this.sourceEditionId = data["sourceEditionId"];
            this.targetEditionId = data["targetEditionId"];
        }
    };
    MoveTenantsToAnotherEditionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MoveTenantsToAnotherEditionDto();
        result.init(data);
        return result;
    };
    MoveTenantsToAnotherEditionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["sourceEditionId"] = this.sourceEditionId;
        data["targetEditionId"] = this.targetEditionId;
        return data;
    };
    MoveTenantsToAnotherEditionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MoveTenantsToAnotherEditionDto();
        result.init(json);
        return result;
    };
    return MoveTenantsToAnotherEditionDto;
}());
exports.MoveTenantsToAnotherEditionDto = MoveTenantsToAnotherEditionDto;
var CreateOrUpdateGateRecordInput = /** @class */ (function () {
    function CreateOrUpdateGateRecordInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.gateRecord = new GateRecordEditDto();
        }
    }
    CreateOrUpdateGateRecordInput.prototype.init = function (data) {
        if (data) {
            this.gateRecord = data["gateRecord"] ? GateRecordEditDto.fromJS(data["gateRecord"]) : new GateRecordEditDto();
        }
    };
    CreateOrUpdateGateRecordInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateGateRecordInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateGateRecordInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["gateRecord"] = this.gateRecord ? this.gateRecord.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateGateRecordInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateGateRecordInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateGateRecordInput;
}());
exports.CreateOrUpdateGateRecordInput = CreateOrUpdateGateRecordInput;
var GateRecordEditDto = /** @class */ (function () {
    function GateRecordEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GateRecordEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.deviceId = data["deviceId"];
            this.verifiableType = data["verifiableType"];
            this.verifiableValue = data["verifiableValue"];
            this.returnState = data["returnState"];
            this.returnInfo = data["returnInfo"];
        }
    };
    GateRecordEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GateRecordEditDto();
        result.init(data);
        return result;
    };
    GateRecordEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceId"] = this.deviceId;
        data["verifiableType"] = this.verifiableType;
        data["verifiableValue"] = this.verifiableValue;
        data["returnState"] = this.returnState;
        data["returnInfo"] = this.returnInfo;
        return data;
    };
    GateRecordEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GateRecordEditDto();
        result.init(json);
        return result;
    };
    return GateRecordEditDto;
}());
exports.GateRecordEditDto = GateRecordEditDto;
var GateRecordListDto = /** @class */ (function () {
    function GateRecordListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GateRecordListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.deviceId = data["deviceId"];
            this.verifiableType = data["verifiableType"];
            this.verifiableValue = data["verifiableValue"];
            this.returnState = data["returnState"];
            this.returnInfo = data["returnInfo"];
            this.device = data["device"] ? Device.fromJS(data["device"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    GateRecordListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GateRecordListDto();
        result.init(data);
        return result;
    };
    GateRecordListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["deviceId"] = this.deviceId;
        data["verifiableType"] = this.verifiableType;
        data["verifiableValue"] = this.verifiableValue;
        data["returnState"] = this.returnState;
        data["returnInfo"] = this.returnInfo;
        data["device"] = this.device ? this.device.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    GateRecordListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GateRecordListDto();
        result.init(json);
        return result;
    };
    return GateRecordListDto;
}());
exports.GateRecordListDto = GateRecordListDto;
var GetGateRecordForEditOutput = /** @class */ (function () {
    function GetGateRecordForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetGateRecordForEditOutput.prototype.init = function (data) {
        if (data) {
            this.gateRecord = data["gateRecord"] ? GateRecordEditDto.fromJS(data["gateRecord"]) : undefined;
        }
    };
    GetGateRecordForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetGateRecordForEditOutput();
        result.init(data);
        return result;
    };
    GetGateRecordForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["gateRecord"] = this.gateRecord ? this.gateRecord.toJSON() : undefined;
        return data;
    };
    GetGateRecordForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetGateRecordForEditOutput();
        result.init(json);
        return result;
    };
    return GetGateRecordForEditOutput;
}());
exports.GetGateRecordForEditOutput = GetGateRecordForEditOutput;
var PagedResultDtoOfGateRecordListDto = /** @class */ (function () {
    function PagedResultDtoOfGateRecordListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfGateRecordListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(GateRecordListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfGateRecordListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfGateRecordListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfGateRecordListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfGateRecordListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfGateRecordListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfGateRecordListDto;
}());
exports.PagedResultDtoOfGateRecordListDto = PagedResultDtoOfGateRecordListDto;
var RecurringJobInput = /** @class */ (function () {
    function RecurringJobInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RecurringJobInput.prototype.init = function (data) {
        if (data) {
            if (data["jobId"] && data["jobId"].constructor === Array) {
                this.jobId = [];
                for (var _i = 0, _a = data["jobId"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.jobId.push(item);
                }
            }
        }
    };
    RecurringJobInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RecurringJobInput();
        result.init(data);
        return result;
    };
    RecurringJobInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.jobId && this.jobId.constructor === Array) {
            data["jobId"] = [];
            for (var _i = 0, _a = this.jobId; _i < _a.length; _i++) {
                var item = _a[_i];
                data["jobId"].push(item);
            }
        }
        return data;
    };
    RecurringJobInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RecurringJobInput();
        result.init(json);
        return result;
    };
    return RecurringJobInput;
}());
exports.RecurringJobInput = RecurringJobInput;
var JobState;
(function (JobState) {
    JobState[JobState["Plan"] = "Plan"] = "Plan";
    JobState[JobState["Runing"] = "Runing"] = "Runing";
    JobState[JobState["Success"] = "Success"] = "Success";
    JobState[JobState["Faile"] = "Faile"] = "Faile";
    JobState[JobState["Delete"] = "Delete"] = "Delete";
    JobState[JobState["Waiting"] = "Waiting"] = "Waiting";
    JobState[JobState["Enqueued"] = "Enqueued"] = "Enqueued";
    JobState[JobState["Fetched"] = "Fetched"] = "Fetched";
    JobState[JobState["EnqueuedJob"] = "EnqueuedJob"] = "EnqueuedJob";
})(JobState = exports.JobState || (exports.JobState = {}));
var PagedResultDtoOfHangFireStorageJob = /** @class */ (function () {
    function PagedResultDtoOfHangFireStorageJob(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfHangFireStorageJob.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(HangFireStorageJob.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfHangFireStorageJob.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfHangFireStorageJob();
        result.init(data);
        return result;
    };
    PagedResultDtoOfHangFireStorageJob.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfHangFireStorageJob.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfHangFireStorageJob();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfHangFireStorageJob;
}());
exports.PagedResultDtoOfHangFireStorageJob = PagedResultDtoOfHangFireStorageJob;
var HangFireStorageJob = /** @class */ (function () {
    function HangFireStorageJob(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HangFireStorageJob.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.state = data["state"];
            this.createAt = data["createAt"] ? moment(data["createAt"].toString()) : undefined;
            this.totalDuration = data["totalDuration"];
            this.jobName = data["jobName"];
            this.exceptionMessage = data["exceptionMessage"];
            this.exceptionType = data["exceptionType"];
            this.exceptionDetails = data["exceptionDetails"];
            this.reson = data["reson"];
            this.serverId = data["serverId"];
            this.resultState = data["resultState"];
            this.retryAt = data["retryAt"] ? moment(data["retryAt"].toString()) : undefined;
            this.enqueueAt = data["enqueueAt"] ? moment(data["enqueueAt"].toString()) : undefined;
            this.options = data["options"];
            this.parentName = data["parentName"];
            this.parentId = data["parentId"];
            this.queueName = data["queueName"];
            this.length = data["length"];
            this.fetched = data["fetched"];
            if (data["firstJobs"] && data["firstJobs"].constructor === Array) {
                this.firstJobs = [];
                for (var _i = 0, _a = data["firstJobs"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.firstJobs.push(EnqueuedJobListDto.fromJS(item));
                }
            }
        }
    };
    HangFireStorageJob.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HangFireStorageJob();
        result.init(data);
        return result;
    };
    HangFireStorageJob.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["state"] = this.state;
        data["createAt"] = this.createAt ? this.createAt.toISOString() : undefined;
        data["totalDuration"] = this.totalDuration;
        data["jobName"] = this.jobName;
        data["exceptionMessage"] = this.exceptionMessage;
        data["exceptionType"] = this.exceptionType;
        data["exceptionDetails"] = this.exceptionDetails;
        data["reson"] = this.reson;
        data["serverId"] = this.serverId;
        data["resultState"] = this.resultState;
        data["retryAt"] = this.retryAt ? this.retryAt.toISOString() : undefined;
        data["enqueueAt"] = this.enqueueAt ? this.enqueueAt.toISOString() : undefined;
        data["options"] = this.options;
        data["parentName"] = this.parentName;
        data["parentId"] = this.parentId;
        data["queueName"] = this.queueName;
        data["length"] = this.length;
        data["fetched"] = this.fetched;
        if (this.firstJobs && this.firstJobs.constructor === Array) {
            data["firstJobs"] = [];
            for (var _i = 0, _a = this.firstJobs; _i < _a.length; _i++) {
                var item = _a[_i];
                data["firstJobs"].push(item.toJSON());
            }
        }
        return data;
    };
    HangFireStorageJob.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HangFireStorageJob();
        result.init(json);
        return result;
    };
    return HangFireStorageJob;
}());
exports.HangFireStorageJob = HangFireStorageJob;
var EnqueuedJobListDto = /** @class */ (function () {
    function EnqueuedJobListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EnqueuedJobListDto.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.createAt = data["createAt"] ? moment(data["createAt"].toString()) : undefined;
            this.jobName = data["jobName"];
            this.resultState = data["resultState"];
        }
    };
    EnqueuedJobListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EnqueuedJobListDto();
        result.init(data);
        return result;
    };
    EnqueuedJobListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["createAt"] = this.createAt ? this.createAt.toISOString() : undefined;
        data["jobName"] = this.jobName;
        data["resultState"] = this.resultState;
        return data;
    };
    EnqueuedJobListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EnqueuedJobListDto();
        result.init(json);
        return result;
    };
    return EnqueuedJobListDto;
}());
exports.EnqueuedJobListDto = EnqueuedJobListDto;
var RecurringResultList = /** @class */ (function () {
    function RecurringResultList(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RecurringResultList.prototype.init = function (data) {
        if (data) {
            if (data["columnHeaders"] && data["columnHeaders"].constructor === Array) {
                this.columnHeaders = [];
                for (var _i = 0, _a = data["columnHeaders"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.columnHeaders.push(ColumnHeader.fromJS(item));
                }
            }
            this.recurringListJobDtos = data["recurringListJobDtos"] ? PagedResultDtoOfRecurringListJobDto.fromJS(data["recurringListJobDtos"]) : undefined;
        }
    };
    RecurringResultList.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RecurringResultList();
        result.init(data);
        return result;
    };
    RecurringResultList.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.columnHeaders && this.columnHeaders.constructor === Array) {
            data["columnHeaders"] = [];
            for (var _i = 0, _a = this.columnHeaders; _i < _a.length; _i++) {
                var item = _a[_i];
                data["columnHeaders"].push(item.toJSON());
            }
        }
        data["recurringListJobDtos"] = this.recurringListJobDtos ? this.recurringListJobDtos.toJSON() : undefined;
        return data;
    };
    RecurringResultList.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RecurringResultList();
        result.init(json);
        return result;
    };
    return RecurringResultList;
}());
exports.RecurringResultList = RecurringResultList;
var ColumnHeader = /** @class */ (function () {
    function ColumnHeader(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ColumnHeader.prototype.init = function (data) {
        if (data) {
            this.propertyName = data["propertyName"];
            this.columnType = data["columnType"];
        }
    };
    ColumnHeader.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ColumnHeader();
        result.init(data);
        return result;
    };
    ColumnHeader.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName;
        data["columnType"] = this.columnType;
        return data;
    };
    ColumnHeader.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ColumnHeader();
        result.init(json);
        return result;
    };
    return ColumnHeader;
}());
exports.ColumnHeader = ColumnHeader;
var PagedResultDtoOfRecurringListJobDto = /** @class */ (function () {
    function PagedResultDtoOfRecurringListJobDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfRecurringListJobDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RecurringListJobDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfRecurringListJobDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfRecurringListJobDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfRecurringListJobDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfRecurringListJobDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfRecurringListJobDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfRecurringListJobDto;
}());
exports.PagedResultDtoOfRecurringListJobDto = PagedResultDtoOfRecurringListJobDto;
var ColumnType;
(function (ColumnType) {
    ColumnType[ColumnType["IntType"] = "intType"] = "IntType";
    ColumnType[ColumnType["StringType"] = "stringType"] = "StringType";
    ColumnType[ColumnType["ListType"] = "listType"] = "ListType";
    ColumnType[ColumnType["DateType"] = "dateType"] = "DateType";
    ColumnType[ColumnType["Link"] = "link"] = "Link";
})(ColumnType = exports.ColumnType || (exports.ColumnType = {}));
var RecurringListJobDto = /** @class */ (function () {
    function RecurringListJobDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RecurringListJobDto.prototype.init = function (data) {
        if (data) {
            this.recurringJobId = data["recurringJobId"];
            this.cron = data["cron"];
            this.timeZoneId = data["timeZoneId"];
            this.queue = data["queue"];
            this.name = data["name"];
            this.jobName = data["jobName"];
            this.enable = data["enable"];
            this.createdAt = data["createdAt"] ? moment(data["createdAt"].toString()) : undefined;
            this.nextExecution = data["nextExecution"] ? moment(data["nextExecution"].toString()) : undefined;
            this.lastJobId = data["lastJobId"];
            this.lastJobState = data["lastJobState"];
            this.lastExecution = data["lastExecution"] ? moment(data["lastExecution"].toString()) : undefined;
        }
    };
    RecurringListJobDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RecurringListJobDto();
        result.init(data);
        return result;
    };
    RecurringListJobDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["recurringJobId"] = this.recurringJobId;
        data["cron"] = this.cron;
        data["timeZoneId"] = this.timeZoneId;
        data["queue"] = this.queue;
        data["name"] = this.name;
        data["jobName"] = this.jobName;
        data["enable"] = this.enable;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined;
        data["nextExecution"] = this.nextExecution ? this.nextExecution.toISOString() : undefined;
        data["lastJobId"] = this.lastJobId;
        data["lastJobState"] = this.lastJobState;
        data["lastExecution"] = this.lastExecution ? this.lastExecution.toISOString() : undefined;
        return data;
    };
    RecurringListJobDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RecurringListJobDto();
        result.init(json);
        return result;
    };
    return RecurringListJobDto;
}());
exports.RecurringListJobDto = RecurringListJobDto;
var SearchTimeType;
(function (SearchTimeType) {
    SearchTimeType[SearchTimeType["Day"] = "day"] = "Day";
    SearchTimeType[SearchTimeType["Week"] = "week"] = "Week";
    SearchTimeType[SearchTimeType["All"] = "all"] = "All";
})(SearchTimeType = exports.SearchTimeType || (exports.SearchTimeType = {}));
var DashboardIndexDetailDto = /** @class */ (function () {
    function DashboardIndexDetailDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DashboardIndexDetailDto.prototype.init = function (data) {
        if (data) {
            if (data["dashboardDataDtos"] && data["dashboardDataDtos"].constructor === Array) {
                this.dashboardDataDtos = [];
                for (var _i = 0, _a = data["dashboardDataDtos"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.dashboardDataDtos.push(DashboardDataDto.fromJS(item));
                }
            }
        }
    };
    DashboardIndexDetailDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DashboardIndexDetailDto();
        result.init(data);
        return result;
    };
    DashboardIndexDetailDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.dashboardDataDtos && this.dashboardDataDtos.constructor === Array) {
            data["dashboardDataDtos"] = [];
            for (var _i = 0, _a = this.dashboardDataDtos; _i < _a.length; _i++) {
                var item = _a[_i];
                data["dashboardDataDtos"].push(item.toJSON());
            }
        }
        return data;
    };
    DashboardIndexDetailDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DashboardIndexDetailDto();
        result.init(json);
        return result;
    };
    return DashboardIndexDetailDto;
}());
exports.DashboardIndexDetailDto = DashboardIndexDetailDto;
var DashboardDataDto = /** @class */ (function () {
    function DashboardDataDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DashboardDataDto.prototype.init = function (data) {
        if (data) {
            this.key = data["key"] ? moment(data["key"].toString()) : undefined;
            this.value = data["value"];
            this.type = data["type"];
        }
    };
    DashboardDataDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DashboardDataDto();
        result.init(data);
        return result;
    };
    DashboardDataDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key ? this.key.toISOString() : undefined;
        data["value"] = this.value;
        data["type"] = this.type;
        return data;
    };
    DashboardDataDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new DashboardDataDto();
        result.init(json);
        return result;
    };
    return DashboardDataDto;
}());
exports.DashboardDataDto = DashboardDataDto;
var StatisticsInfoDto = /** @class */ (function () {
    function StatisticsInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatisticsInfoDto.prototype.init = function (data) {
        if (data) {
            this.servers = data["servers"];
            this.recurring = data["recurring"];
            this.enqueued = data["enqueued"];
            this.queues = data["queues"];
            this.scheduled = data["scheduled"];
            this.processing = data["processing"];
            this.succeeded = data["succeeded"];
            this.failed = data["failed"];
            this.deleted = data["deleted"];
            this.retries = data["retries"];
            this.waiting = data["waiting"];
            this.dateValue = data["dateValue"];
        }
    };
    StatisticsInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatisticsInfoDto();
        result.init(data);
        return result;
    };
    StatisticsInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["servers"] = this.servers;
        data["recurring"] = this.recurring;
        data["enqueued"] = this.enqueued;
        data["queues"] = this.queues;
        data["scheduled"] = this.scheduled;
        data["processing"] = this.processing;
        data["succeeded"] = this.succeeded;
        data["failed"] = this.failed;
        data["deleted"] = this.deleted;
        data["retries"] = this.retries;
        data["waiting"] = this.waiting;
        data["dateValue"] = this.dateValue;
        return data;
    };
    StatisticsInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatisticsInfoDto();
        result.init(json);
        return result;
    };
    return StatisticsInfoDto;
}());
exports.StatisticsInfoDto = StatisticsInfoDto;
var HangfireJobDetailDto = /** @class */ (function () {
    function HangfireJobDetailDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HangfireJobDetailDto.prototype.init = function (data) {
        if (data) {
            this.createdAt = data["createdAt"] ? moment(data["createdAt"].toString()) : undefined;
            if (data["properties"]) {
                this.properties = {};
                for (var key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key];
                }
            }
            if (data["history"] && data["history"].constructor === Array) {
                this.history = [];
                for (var _i = 0, _a = data["history"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.history.push(StateHistoryDto.fromJS(item));
                }
            }
            this.expireAt = data["expireAt"] ? moment(data["expireAt"].toString()) : undefined;
            this.jobName = data["jobName"];
            this.namespace = data["namespace"];
            this.className = data["className"];
            this.methodName = data["methodName"];
        }
    };
    HangfireJobDetailDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HangfireJobDetailDto();
        result.init(data);
        return result;
    };
    HangfireJobDetailDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined;
        if (this.properties) {
            data["properties"] = {};
            for (var key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        if (this.history && this.history.constructor === Array) {
            data["history"] = [];
            for (var _i = 0, _a = this.history; _i < _a.length; _i++) {
                var item = _a[_i];
                data["history"].push(item.toJSON());
            }
        }
        data["expireAt"] = this.expireAt ? this.expireAt.toISOString() : undefined;
        data["jobName"] = this.jobName;
        data["namespace"] = this.namespace;
        data["className"] = this.className;
        data["methodName"] = this.methodName;
        return data;
    };
    HangfireJobDetailDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HangfireJobDetailDto();
        result.init(json);
        return result;
    };
    return HangfireJobDetailDto;
}());
exports.HangfireJobDetailDto = HangfireJobDetailDto;
var StateHistoryDto = /** @class */ (function () {
    function StateHistoryDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StateHistoryDto.prototype.init = function (data) {
        if (data) {
            this.stateName = data["stateName"];
            this.reason = data["reason"];
            this.createdAt = data["createdAt"] ? moment(data["createdAt"].toString()) : undefined;
            if (data["data"]) {
                this.data = {};
                for (var key in data["data"]) {
                    if (data["data"].hasOwnProperty(key))
                        this.data[key] = data["data"][key];
                }
            }
        }
    };
    StateHistoryDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StateHistoryDto();
        result.init(data);
        return result;
    };
    StateHistoryDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["stateName"] = this.stateName;
        data["reason"] = this.reason;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined;
        if (this.data) {
            data["data"] = {};
            for (var key in this.data) {
                if (this.data.hasOwnProperty(key))
                    data["data"][key] = this.data[key];
            }
        }
        return data;
    };
    StateHistoryDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StateHistoryDto();
        result.init(json);
        return result;
    };
    return StateHistoryDto;
}());
exports.StateHistoryDto = StateHistoryDto;
var RetriesResultList = /** @class */ (function () {
    function RetriesResultList(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RetriesResultList.prototype.init = function (data) {
        if (data) {
            if (data["columnHeaders"] && data["columnHeaders"].constructor === Array) {
                this.columnHeaders = [];
                for (var _i = 0, _a = data["columnHeaders"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.columnHeaders.push(ColumnHeader.fromJS(item));
                }
            }
            this.retriesJobListDtos = data["retriesJobListDtos"] ? PagedResultDtoOfRetriesJobListDto.fromJS(data["retriesJobListDtos"]) : undefined;
        }
    };
    RetriesResultList.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RetriesResultList();
        result.init(data);
        return result;
    };
    RetriesResultList.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.columnHeaders && this.columnHeaders.constructor === Array) {
            data["columnHeaders"] = [];
            for (var _i = 0, _a = this.columnHeaders; _i < _a.length; _i++) {
                var item = _a[_i];
                data["columnHeaders"].push(item.toJSON());
            }
        }
        data["retriesJobListDtos"] = this.retriesJobListDtos ? this.retriesJobListDtos.toJSON() : undefined;
        return data;
    };
    RetriesResultList.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RetriesResultList();
        result.init(json);
        return result;
    };
    return RetriesResultList;
}());
exports.RetriesResultList = RetriesResultList;
var PagedResultDtoOfRetriesJobListDto = /** @class */ (function () {
    function PagedResultDtoOfRetriesJobListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfRetriesJobListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RetriesJobListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfRetriesJobListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfRetriesJobListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfRetriesJobListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfRetriesJobListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfRetriesJobListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfRetriesJobListDto;
}());
exports.PagedResultDtoOfRetriesJobListDto = PagedResultDtoOfRetriesJobListDto;
var RetriesJobListDto = /** @class */ (function () {
    function RetriesJobListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RetriesJobListDto.prototype.init = function (data) {
        if (data) {
            this.jobId = data["jobId"];
            this.state = data["state"];
            this.jobName = data["jobName"];
            this.reason = data["reason"];
            this.retryTime = data["retryTime"] ? moment(data["retryTime"].toString()) : undefined;
            this.createdTime = data["createdTime"] ? moment(data["createdTime"].toString()) : undefined;
        }
    };
    RetriesJobListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RetriesJobListDto();
        result.init(data);
        return result;
    };
    RetriesJobListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["jobId"] = this.jobId;
        data["state"] = this.state;
        data["jobName"] = this.jobName;
        data["reason"] = this.reason;
        data["retryTime"] = this.retryTime ? this.retryTime.toISOString() : undefined;
        data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : undefined;
        return data;
    };
    RetriesJobListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RetriesJobListDto();
        result.init(json);
        return result;
    };
    return RetriesJobListDto;
}());
exports.RetriesJobListDto = RetriesJobListDto;
var ServerResultList = /** @class */ (function () {
    function ServerResultList(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ServerResultList.prototype.init = function (data) {
        if (data) {
            if (data["columnHeaders"] && data["columnHeaders"].constructor === Array) {
                this.columnHeaders = [];
                for (var _i = 0, _a = data["columnHeaders"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.columnHeaders.push(ColumnHeader.fromJS(item));
                }
            }
            if (data["hangfireServerListDtos"] && data["hangfireServerListDtos"].constructor === Array) {
                this.hangfireServerListDtos = [];
                for (var _b = 0, _c = data["hangfireServerListDtos"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.hangfireServerListDtos.push(HangfireServerListDto.fromJS(item));
                }
            }
        }
    };
    ServerResultList.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ServerResultList();
        result.init(data);
        return result;
    };
    ServerResultList.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.columnHeaders && this.columnHeaders.constructor === Array) {
            data["columnHeaders"] = [];
            for (var _i = 0, _a = this.columnHeaders; _i < _a.length; _i++) {
                var item = _a[_i];
                data["columnHeaders"].push(item.toJSON());
            }
        }
        if (this.hangfireServerListDtos && this.hangfireServerListDtos.constructor === Array) {
            data["hangfireServerListDtos"] = [];
            for (var _b = 0, _c = this.hangfireServerListDtos; _b < _c.length; _b++) {
                var item = _c[_b];
                data["hangfireServerListDtos"].push(item.toJSON());
            }
        }
        return data;
    };
    ServerResultList.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ServerResultList();
        result.init(json);
        return result;
    };
    return ServerResultList;
}());
exports.ServerResultList = ServerResultList;
var HangfireServerListDto = /** @class */ (function () {
    function HangfireServerListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HangfireServerListDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.workersCount = data["workersCount"];
            this.startedAt = data["startedAt"] ? moment(data["startedAt"].toString()) : undefined;
            if (data["queues"] && data["queues"].constructor === Array) {
                this.queues = [];
                for (var _i = 0, _a = data["queues"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queues.push(item);
                }
            }
            this.heartbeat = data["heartbeat"] ? moment(data["heartbeat"].toString()) : undefined;
        }
    };
    HangfireServerListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HangfireServerListDto();
        result.init(data);
        return result;
    };
    HangfireServerListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["workersCount"] = this.workersCount;
        data["startedAt"] = this.startedAt ? this.startedAt.toISOString() : undefined;
        if (this.queues && this.queues.constructor === Array) {
            data["queues"] = [];
            for (var _i = 0, _a = this.queues; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queues"].push(item);
            }
        }
        data["heartbeat"] = this.heartbeat ? this.heartbeat.toISOString() : undefined;
        return data;
    };
    HangfireServerListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HangfireServerListDto();
        result.init(json);
        return result;
    };
    return HangfireServerListDto;
}());
exports.HangfireServerListDto = HangfireServerListDto;
var EntityDtoOfString = /** @class */ (function () {
    function EntityDtoOfString(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EntityDtoOfString.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
        }
    };
    EntityDtoOfString.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EntityDtoOfString();
        result.init(data);
        return result;
    };
    EntityDtoOfString.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    };
    EntityDtoOfString.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EntityDtoOfString();
        result.init(json);
        return result;
    };
    return EntityDtoOfString;
}());
exports.EntityDtoOfString = EntityDtoOfString;
var ListResultDtoOfHostCacheDto = /** @class */ (function () {
    function ListResultDtoOfHostCacheDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfHostCacheDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(HostCacheDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfHostCacheDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfHostCacheDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfHostCacheDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfHostCacheDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfHostCacheDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfHostCacheDto;
}());
exports.ListResultDtoOfHostCacheDto = ListResultDtoOfHostCacheDto;
var HostCacheDto = /** @class */ (function () {
    function HostCacheDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HostCacheDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
        }
    };
    HostCacheDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HostCacheDto();
        result.init(data);
        return result;
    };
    HostCacheDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    };
    HostCacheDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HostCacheDto();
        result.init(json);
        return result;
    };
    return HostCacheDto;
}());
exports.HostCacheDto = HostCacheDto;
var HostSettingsEditDto = /** @class */ (function () {
    function HostSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.general = new GeneralSettingsEditDto();
            this.userManagement = new HostUserManagementSettingsEditDto();
            this.email = new EmailSettingsEditDto();
            this.tenantManagement = new TenantManagementSettingsEditDto();
            this.security = new SecuritySettingsEditDto();
        }
    }
    HostSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : new GeneralSettingsEditDto();
            this.userManagement = data["userManagement"] ? HostUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new HostUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : new EmailSettingsEditDto();
            this.tenantManagement = data["tenantManagement"] ? TenantManagementSettingsEditDto.fromJS(data["tenantManagement"]) : new TenantManagementSettingsEditDto();
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.billing = data["billing"] ? HostBillingSettingsEditDto.fromJS(data["billing"]) : undefined;
        }
    };
    HostSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HostSettingsEditDto();
        result.init(data);
        return result;
    };
    HostSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : undefined;
        data["email"] = this.email ? this.email.toJSON() : undefined;
        data["tenantManagement"] = this.tenantManagement ? this.tenantManagement.toJSON() : undefined;
        data["security"] = this.security ? this.security.toJSON() : undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : undefined;
        return data;
    };
    HostSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HostSettingsEditDto();
        result.init(json);
        return result;
    };
    return HostSettingsEditDto;
}());
exports.HostSettingsEditDto = HostSettingsEditDto;
var GeneralSettingsEditDto = /** @class */ (function () {
    function GeneralSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GeneralSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.timezone = data["timezone"];
            this.timezoneForComparison = data["timezoneForComparison"];
        }
    };
    GeneralSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GeneralSettingsEditDto();
        result.init(data);
        return result;
    };
    GeneralSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["timezone"] = this.timezone;
        data["timezoneForComparison"] = this.timezoneForComparison;
        return data;
    };
    GeneralSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GeneralSettingsEditDto();
        result.init(json);
        return result;
    };
    return GeneralSettingsEditDto;
}());
exports.GeneralSettingsEditDto = GeneralSettingsEditDto;
/** 网站全局管理设置 */
var HostUserManagementSettingsEditDto = /** @class */ (function () {
    function HostUserManagementSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HostUserManagementSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.smsVerificationEnabled = data["smsVerificationEnabled"];
            this.isCookieConsentEnabled = data["isCookieConsentEnabled"];
            this.useCaptchaOnUserLogin = data["useCaptchaOnUserLogin"];
            this.captchaOnUserLoginType = data["captchaOnUserLoginType"];
            this.captchaOnUserLoginLength = data["captchaOnUserLoginLength"];
            this.isQuickThemeSelectEnabled = data["isQuickThemeSelectEnabled"];
            if (data["externalLoginProviders"] && data["externalLoginProviders"].constructor === Array) {
                this.externalLoginProviders = [];
                for (var _i = 0, _a = data["externalLoginProviders"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.externalLoginProviders.push(item);
                }
            }
        }
    };
    HostUserManagementSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HostUserManagementSettingsEditDto();
        result.init(data);
        return result;
    };
    HostUserManagementSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["smsVerificationEnabled"] = this.smsVerificationEnabled;
        data["isCookieConsentEnabled"] = this.isCookieConsentEnabled;
        data["useCaptchaOnUserLogin"] = this.useCaptchaOnUserLogin;
        data["captchaOnUserLoginType"] = this.captchaOnUserLoginType;
        data["captchaOnUserLoginLength"] = this.captchaOnUserLoginLength;
        data["isQuickThemeSelectEnabled"] = this.isQuickThemeSelectEnabled;
        if (this.externalLoginProviders && this.externalLoginProviders.constructor === Array) {
            data["externalLoginProviders"] = [];
            for (var _i = 0, _a = this.externalLoginProviders; _i < _a.length; _i++) {
                var item = _a[_i];
                data["externalLoginProviders"].push(item);
            }
        }
        return data;
    };
    HostUserManagementSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HostUserManagementSettingsEditDto();
        result.init(json);
        return result;
    };
    return HostUserManagementSettingsEditDto;
}());
exports.HostUserManagementSettingsEditDto = HostUserManagementSettingsEditDto;
var EmailSettingsEditDto = /** @class */ (function () {
    function EmailSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EmailSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.defaultFromAddress = data["defaultFromAddress"];
            this.defaultFromDisplayName = data["defaultFromDisplayName"];
            this.smtpHost = data["smtpHost"];
            this.smtpPort = data["smtpPort"];
            this.smtpUserName = data["smtpUserName"];
            this.smtpPassword = data["smtpPassword"];
            this.smtpDomain = data["smtpDomain"];
            this.smtpEnableSsl = data["smtpEnableSsl"];
            this.smtpUseDefaultCredentials = data["smtpUseDefaultCredentials"];
        }
    };
    EmailSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EmailSettingsEditDto();
        result.init(data);
        return result;
    };
    EmailSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["defaultFromAddress"] = this.defaultFromAddress;
        data["defaultFromDisplayName"] = this.defaultFromDisplayName;
        data["smtpHost"] = this.smtpHost;
        data["smtpPort"] = this.smtpPort;
        data["smtpUserName"] = this.smtpUserName;
        data["smtpPassword"] = this.smtpPassword;
        data["smtpDomain"] = this.smtpDomain;
        data["smtpEnableSsl"] = this.smtpEnableSsl;
        data["smtpUseDefaultCredentials"] = this.smtpUseDefaultCredentials;
        return data;
    };
    EmailSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EmailSettingsEditDto();
        result.init(json);
        return result;
    };
    return EmailSettingsEditDto;
}());
exports.EmailSettingsEditDto = EmailSettingsEditDto;
var TenantManagementSettingsEditDto = /** @class */ (function () {
    function TenantManagementSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantManagementSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredTenantActiveByDefault = data["isNewRegisteredTenantActiveByDefault"];
            this.useCaptchaOnTenantRegistration = data["useCaptchaOnTenantRegistration"];
            this.captchaOnTenantRegistrationType = data["captchaOnTenantRegistrationType"];
            this.captchaOnTenantRegistrationLength = data["captchaOnTenantRegistrationLength"];
            this.defaultEditionId = data["defaultEditionId"];
        }
    };
    TenantManagementSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantManagementSettingsEditDto();
        result.init(data);
        return result;
    };
    TenantManagementSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredTenantActiveByDefault"] = this.isNewRegisteredTenantActiveByDefault;
        data["useCaptchaOnTenantRegistration"] = this.useCaptchaOnTenantRegistration;
        data["captchaOnTenantRegistrationType"] = this.captchaOnTenantRegistrationType;
        data["captchaOnTenantRegistrationLength"] = this.captchaOnTenantRegistrationLength;
        data["defaultEditionId"] = this.defaultEditionId;
        return data;
    };
    TenantManagementSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantManagementSettingsEditDto();
        result.init(json);
        return result;
    };
    return TenantManagementSettingsEditDto;
}());
exports.TenantManagementSettingsEditDto = TenantManagementSettingsEditDto;
var SecuritySettingsEditDto = /** @class */ (function () {
    function SecuritySettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SecuritySettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.useDefaultPasswordComplexitySettings = data["useDefaultPasswordComplexitySettings"];
            this.passwordComplexity = data["passwordComplexity"] ? PasswordComplexitySetting.fromJS(data["passwordComplexity"]) : undefined;
            this.defaultPasswordComplexity = data["defaultPasswordComplexity"] ? PasswordComplexitySetting.fromJS(data["defaultPasswordComplexity"]) : undefined;
            this.userLockOut = data["userLockOut"] ? UserLockOutSettingsEditDto.fromJS(data["userLockOut"]) : undefined;
            this.twoFactorLogin = data["twoFactorLogin"] ? TwoFactorLoginSettingsEditDto.fromJS(data["twoFactorLogin"]) : undefined;
        }
    };
    SecuritySettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SecuritySettingsEditDto();
        result.init(data);
        return result;
    };
    SecuritySettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["useDefaultPasswordComplexitySettings"] = this.useDefaultPasswordComplexitySettings;
        data["passwordComplexity"] = this.passwordComplexity ? this.passwordComplexity.toJSON() : undefined;
        data["defaultPasswordComplexity"] = this.defaultPasswordComplexity ? this.defaultPasswordComplexity.toJSON() : undefined;
        data["userLockOut"] = this.userLockOut ? this.userLockOut.toJSON() : undefined;
        data["twoFactorLogin"] = this.twoFactorLogin ? this.twoFactorLogin.toJSON() : undefined;
        return data;
    };
    SecuritySettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SecuritySettingsEditDto();
        result.init(json);
        return result;
    };
    return SecuritySettingsEditDto;
}());
exports.SecuritySettingsEditDto = SecuritySettingsEditDto;
var HostBillingSettingsEditDto = /** @class */ (function () {
    function HostBillingSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    HostBillingSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.legalName = data["legalName"];
            this.address = data["address"];
        }
    };
    HostBillingSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new HostBillingSettingsEditDto();
        result.init(data);
        return result;
    };
    HostBillingSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        return data;
    };
    HostBillingSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new HostBillingSettingsEditDto();
        result.init(json);
        return result;
    };
    return HostBillingSettingsEditDto;
}());
exports.HostBillingSettingsEditDto = HostBillingSettingsEditDto;
var ValidateCodeType;
(function (ValidateCodeType) {
    ValidateCodeType[ValidateCodeType["Number"] = "Number"] = "Number";
    ValidateCodeType[ValidateCodeType["English"] = "English"] = "English";
    ValidateCodeType[ValidateCodeType["NumberAndLetter"] = "NumberAndLetter"] = "NumberAndLetter";
    ValidateCodeType[ValidateCodeType["Hanzi"] = "Hanzi"] = "Hanzi";
})(ValidateCodeType = exports.ValidateCodeType || (exports.ValidateCodeType = {}));
var PasswordComplexitySetting = /** @class */ (function () {
    function PasswordComplexitySetting(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PasswordComplexitySetting.prototype.init = function (data) {
        if (data) {
            this.requireDigit = data["requireDigit"];
            this.requireLowercase = data["requireLowercase"];
            this.requireNonAlphanumeric = data["requireNonAlphanumeric"];
            this.requireUppercase = data["requireUppercase"];
            this.requiredLength = data["requiredLength"];
        }
    };
    PasswordComplexitySetting.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PasswordComplexitySetting();
        result.init(data);
        return result;
    };
    PasswordComplexitySetting.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["requireDigit"] = this.requireDigit;
        data["requireLowercase"] = this.requireLowercase;
        data["requireNonAlphanumeric"] = this.requireNonAlphanumeric;
        data["requireUppercase"] = this.requireUppercase;
        data["requiredLength"] = this.requiredLength;
        return data;
    };
    PasswordComplexitySetting.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PasswordComplexitySetting();
        result.init(json);
        return result;
    };
    return PasswordComplexitySetting;
}());
exports.PasswordComplexitySetting = PasswordComplexitySetting;
var UserLockOutSettingsEditDto = /** @class */ (function () {
    function UserLockOutSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserLockOutSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.maxFailedAccessAttemptsBeforeLockout = data["maxFailedAccessAttemptsBeforeLockout"];
            this.defaultAccountLockoutSeconds = data["defaultAccountLockoutSeconds"];
        }
    };
    UserLockOutSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserLockOutSettingsEditDto();
        result.init(data);
        return result;
    };
    UserLockOutSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["maxFailedAccessAttemptsBeforeLockout"] = this.maxFailedAccessAttemptsBeforeLockout;
        data["defaultAccountLockoutSeconds"] = this.defaultAccountLockoutSeconds;
        return data;
    };
    UserLockOutSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserLockOutSettingsEditDto();
        result.init(json);
        return result;
    };
    return UserLockOutSettingsEditDto;
}());
exports.UserLockOutSettingsEditDto = UserLockOutSettingsEditDto;
var TwoFactorLoginSettingsEditDto = /** @class */ (function () {
    function TwoFactorLoginSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TwoFactorLoginSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.isEnabledForApplication = data["isEnabledForApplication"];
            this.isEnabled = data["isEnabled"];
            this.isEmailProviderEnabled = data["isEmailProviderEnabled"];
            this.isSmsProviderEnabled = data["isSmsProviderEnabled"];
            this.isRememberBrowserEnabled = data["isRememberBrowserEnabled"];
            this.isGoogleAuthenticatorEnabled = data["isGoogleAuthenticatorEnabled"];
        }
    };
    TwoFactorLoginSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TwoFactorLoginSettingsEditDto();
        result.init(data);
        return result;
    };
    TwoFactorLoginSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isEnabledForApplication"] = this.isEnabledForApplication;
        data["isEnabled"] = this.isEnabled;
        data["isEmailProviderEnabled"] = this.isEmailProviderEnabled;
        data["isSmsProviderEnabled"] = this.isSmsProviderEnabled;
        data["isRememberBrowserEnabled"] = this.isRememberBrowserEnabled;
        data["isGoogleAuthenticatorEnabled"] = this.isGoogleAuthenticatorEnabled;
        return data;
    };
    TwoFactorLoginSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TwoFactorLoginSettingsEditDto();
        result.init(json);
        return result;
    };
    return TwoFactorLoginSettingsEditDto;
}());
exports.TwoFactorLoginSettingsEditDto = TwoFactorLoginSettingsEditDto;
var SendTestEmailInput = /** @class */ (function () {
    function SendTestEmailInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SendTestEmailInput.prototype.init = function (data) {
        if (data) {
            this.emailAddress = data["emailAddress"];
        }
    };
    SendTestEmailInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SendTestEmailInput();
        result.init(data);
        return result;
    };
    SendTestEmailInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        return data;
    };
    SendTestEmailInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SendTestEmailInput();
        result.init(json);
        return result;
    };
    return SendTestEmailInput;
}());
exports.SendTestEmailInput = SendTestEmailInput;
var ImportUserDto = /** @class */ (function () {
    function ImportUserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ImportUserDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.password = data["password"];
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (var _i = 0, _a = data["assignedRoleNames"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.assignedRoleNames.push(item);
                }
            }
            this.exception = data["exception"];
        }
    };
    ImportUserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ImportUserDto();
        result.init(data);
        return result;
    };
    ImportUserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (var _i = 0, _a = this.assignedRoleNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data["assignedRoleNames"].push(item);
            }
        }
        data["exception"] = this.exception;
        return data;
    };
    ImportUserDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ImportUserDto();
        result.init(json);
        return result;
    };
    return ImportUserDto;
}());
exports.ImportUserDto = ImportUserDto;
var CreateOrUpdateLanguageInput = /** @class */ (function () {
    function CreateOrUpdateLanguageInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.language = new LanguageEditDto();
        }
    }
    CreateOrUpdateLanguageInput.prototype.init = function (data) {
        if (data) {
            this.language = data["language"] ? LanguageEditDto.fromJS(data["language"]) : new LanguageEditDto();
        }
    };
    CreateOrUpdateLanguageInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateLanguageInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateLanguageInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateLanguageInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateLanguageInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateLanguageInput;
}());
exports.CreateOrUpdateLanguageInput = CreateOrUpdateLanguageInput;
var LanguageEditDto = /** @class */ (function () {
    function LanguageEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LanguageEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.icon = data["icon"];
            this.isEnabled = data["isEnabled"];
        }
    };
    LanguageEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LanguageEditDto();
        result.init(data);
        return result;
    };
    LanguageEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["isEnabled"] = this.isEnabled;
        return data;
    };
    LanguageEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LanguageEditDto();
        result.init(json);
        return result;
    };
    return LanguageEditDto;
}());
exports.LanguageEditDto = LanguageEditDto;
var GetLanguageForEditOutput = /** @class */ (function () {
    function GetLanguageForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetLanguageForEditOutput.prototype.init = function (data) {
        if (data) {
            this.language = data["language"] ? LanguageEditDto.fromJS(data["language"]) : undefined;
            if (data["languageNames"] && data["languageNames"].constructor === Array) {
                this.languageNames = [];
                for (var _i = 0, _a = data["languageNames"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.languageNames.push(ComboboxItemDto.fromJS(item));
                }
            }
            if (data["flags"] && data["flags"].constructor === Array) {
                this.flags = [];
                for (var _b = 0, _c = data["flags"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.flags.push(ComboboxItemDto.fromJS(item));
                }
            }
        }
    };
    GetLanguageForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetLanguageForEditOutput();
        result.init(data);
        return result;
    };
    GetLanguageForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["language"] = this.language ? this.language.toJSON() : undefined;
        if (this.languageNames && this.languageNames.constructor === Array) {
            data["languageNames"] = [];
            for (var _i = 0, _a = this.languageNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data["languageNames"].push(item.toJSON());
            }
        }
        if (this.flags && this.flags.constructor === Array) {
            data["flags"] = [];
            for (var _b = 0, _c = this.flags; _b < _c.length; _b++) {
                var item = _c[_b];
                data["flags"].push(item.toJSON());
            }
        }
        return data;
    };
    GetLanguageForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetLanguageForEditOutput();
        result.init(json);
        return result;
    };
    return GetLanguageForEditOutput;
}());
exports.GetLanguageForEditOutput = GetLanguageForEditOutput;
var ComboboxItemDto = /** @class */ (function () {
    function ComboboxItemDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ComboboxItemDto.prototype.init = function (data) {
        if (data) {
            this.value = data["value"];
            this.displayText = data["displayText"];
            this.isSelected = data["isSelected"];
        }
    };
    ComboboxItemDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ComboboxItemDto();
        result.init(data);
        return result;
    };
    ComboboxItemDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["displayText"] = this.displayText;
        data["isSelected"] = this.isSelected;
        return data;
    };
    ComboboxItemDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ComboboxItemDto();
        result.init(json);
        return result;
    };
    return ComboboxItemDto;
}());
exports.ComboboxItemDto = ComboboxItemDto;
var GetLanguagesOutput = /** @class */ (function () {
    function GetLanguagesOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetLanguagesOutput.prototype.init = function (data) {
        if (data) {
            this.defaultLanguageName = data["defaultLanguageName"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(LanguageListDto.fromJS(item));
                }
            }
        }
    };
    GetLanguagesOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetLanguagesOutput();
        result.init(data);
        return result;
    };
    GetLanguagesOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageName"] = this.defaultLanguageName;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    GetLanguagesOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetLanguagesOutput();
        result.init(json);
        return result;
    };
    return GetLanguagesOutput;
}());
exports.GetLanguagesOutput = GetLanguagesOutput;
var LanguageListDto = /** @class */ (function () {
    function LanguageListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LanguageListDto.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.isDisabled = data["isDisabled"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    LanguageListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LanguageListDto();
        result.init(data);
        return result;
    };
    LanguageListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDisabled"] = this.isDisabled;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    LanguageListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LanguageListDto();
        result.init(json);
        return result;
    };
    return LanguageListDto;
}());
exports.LanguageListDto = LanguageListDto;
var PagedResultDtoOfLanguageTextListDto = /** @class */ (function () {
    function PagedResultDtoOfLanguageTextListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfLanguageTextListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(LanguageTextListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfLanguageTextListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfLanguageTextListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfLanguageTextListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfLanguageTextListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfLanguageTextListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfLanguageTextListDto;
}());
exports.PagedResultDtoOfLanguageTextListDto = PagedResultDtoOfLanguageTextListDto;
var LanguageTextListDto = /** @class */ (function () {
    function LanguageTextListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LanguageTextListDto.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.baseValue = data["baseValue"];
            this.targetValue = data["targetValue"];
        }
    };
    LanguageTextListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LanguageTextListDto();
        result.init(data);
        return result;
    };
    LanguageTextListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["baseValue"] = this.baseValue;
        data["targetValue"] = this.targetValue;
        return data;
    };
    LanguageTextListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LanguageTextListDto();
        result.init(json);
        return result;
    };
    return LanguageTextListDto;
}());
exports.LanguageTextListDto = LanguageTextListDto;
var SetDefaultLanguageInput = /** @class */ (function () {
    function SetDefaultLanguageInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SetDefaultLanguageInput.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
        }
    };
    SetDefaultLanguageInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SetDefaultLanguageInput();
        result.init(data);
        return result;
    };
    SetDefaultLanguageInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data;
    };
    SetDefaultLanguageInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SetDefaultLanguageInput();
        result.init(json);
        return result;
    };
    return SetDefaultLanguageInput;
}());
exports.SetDefaultLanguageInput = SetDefaultLanguageInput;
/** 更新语言输入信息 */
var UpdateLanguageTextInput = /** @class */ (function () {
    function UpdateLanguageTextInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UpdateLanguageTextInput.prototype.init = function (data) {
        if (data) {
            this.languageName = data["languageName"];
            this.sourceName = data["sourceName"];
            this.key = data["key"];
            this.value = data["value"];
        }
    };
    UpdateLanguageTextInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateLanguageTextInput();
        result.init(data);
        return result;
    };
    UpdateLanguageTextInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        data["sourceName"] = this.sourceName;
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    };
    UpdateLanguageTextInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateLanguageTextInput();
        result.init(json);
        return result;
    };
    return UpdateLanguageTextInput;
}());
exports.UpdateLanguageTextInput = UpdateLanguageTextInput;
var CreateOrUpdateMenuInput = /** @class */ (function () {
    function CreateOrUpdateMenuInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.menu = new MenuEditDto();
        }
    }
    CreateOrUpdateMenuInput.prototype.init = function (data) {
        if (data) {
            this.menu = data["menu"] ? MenuEditDto.fromJS(data["menu"]) : new MenuEditDto();
        }
    };
    CreateOrUpdateMenuInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateMenuInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateMenuInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["menu"] = this.menu ? this.menu.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateMenuInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateMenuInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateMenuInput;
}());
exports.CreateOrUpdateMenuInput = CreateOrUpdateMenuInput;
var MenuEditDto = /** @class */ (function () {
    function MenuEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MenuEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.parentId = data["parentId"];
            this.menuName = data["menuName"];
            this.menuCode = data["menuCode"];
            this.navigateUrl = data["navigateUrl"];
            this.sort = data["sort"];
            this.level = data["level"];
            this.iocName = data["iocName"];
            this.iocClassName = data["iocClassName"];
            this.isEnabled = data["isEnabled"];
        }
    };
    MenuEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MenuEditDto();
        result.init(data);
        return result;
    };
    MenuEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["parentId"] = this.parentId;
        data["menuName"] = this.menuName;
        data["menuCode"] = this.menuCode;
        data["navigateUrl"] = this.navigateUrl;
        data["sort"] = this.sort;
        data["level"] = this.level;
        data["iocName"] = this.iocName;
        data["iocClassName"] = this.iocClassName;
        data["isEnabled"] = this.isEnabled;
        return data;
    };
    MenuEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MenuEditDto();
        result.init(json);
        return result;
    };
    return MenuEditDto;
}());
exports.MenuEditDto = MenuEditDto;
var MenuListDto = /** @class */ (function () {
    function MenuListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MenuListDto.prototype.init = function (data) {
        if (data) {
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? Menu.fromJS(data["parent"]) : undefined;
            this.menuName = data["menuName"];
            this.menuCode = data["menuCode"];
            this.navigateUrl = data["navigateUrl"];
            this.sort = data["sort"];
            this.level = data["level"];
            this.iocName = data["iocName"];
            this.iocClassName = data["iocClassName"];
            this.isEnabled = data["isEnabled"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    MenuListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MenuListDto();
        result.init(data);
        return result;
    };
    MenuListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["menuName"] = this.menuName;
        data["menuCode"] = this.menuCode;
        data["navigateUrl"] = this.navigateUrl;
        data["sort"] = this.sort;
        data["level"] = this.level;
        data["iocName"] = this.iocName;
        data["iocClassName"] = this.iocClassName;
        data["isEnabled"] = this.isEnabled;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    MenuListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MenuListDto();
        result.init(json);
        return result;
    };
    return MenuListDto;
}());
exports.MenuListDto = MenuListDto;
var Menu = /** @class */ (function () {
    function Menu(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Menu.prototype.init = function (data) {
        if (data) {
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? Menu.fromJS(data["parent"]) : undefined;
            this.menuName = data["menuName"];
            this.menuCode = data["menuCode"];
            this.navigateUrl = data["navigateUrl"];
            this.sort = data["sort"];
            this.level = data["level"];
            this.iocName = data["iocName"];
            this.iocClassName = data["iocClassName"];
            this.isEnabled = data["isEnabled"];
            if (data["powers"] && data["powers"].constructor === Array) {
                this.powers = [];
                for (var _i = 0, _a = data["powers"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.powers.push(Power.fromJS(item));
                }
            }
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Menu.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Menu();
        result.init(data);
        return result;
    };
    Menu.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["menuName"] = this.menuName;
        data["menuCode"] = this.menuCode;
        data["navigateUrl"] = this.navigateUrl;
        data["sort"] = this.sort;
        data["level"] = this.level;
        data["iocName"] = this.iocName;
        data["iocClassName"] = this.iocClassName;
        data["isEnabled"] = this.isEnabled;
        if (this.powers && this.powers.constructor === Array) {
            data["powers"] = [];
            for (var _i = 0, _a = this.powers; _i < _a.length; _i++) {
                var item = _a[_i];
                data["powers"].push(item.toJSON());
            }
        }
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Menu.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Menu();
        result.init(json);
        return result;
    };
    return Menu;
}());
exports.Menu = Menu;
var Power = /** @class */ (function () {
    function Power(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Power.prototype.init = function (data) {
        if (data) {
            this.menuId = data["menuId"];
            this.menu = data["menu"] ? Menu.fromJS(data["menu"]) : undefined;
            this.menuPath = data["menuPath"];
            this.powerCode = data["powerCode"];
            this.powerName = data["powerName"];
            this.method = data["method"];
            this.params = data["params"];
            this.groupName = data["groupName"];
            this.sort = data["sort"];
            this.iocName = data["iocName"];
            this.iocClassName = data["iocClassName"];
            this.category = data["category"];
            this.isEnabled = data["isEnabled"];
            if (data["powerRoles"] && data["powerRoles"].constructor === Array) {
                this.powerRoles = [];
                for (var _i = 0, _a = data["powerRoles"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.powerRoles.push(PowerRole.fromJS(item));
                }
            }
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Power.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Power();
        result.init(data);
        return result;
    };
    Power.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["menuId"] = this.menuId;
        data["menu"] = this.menu ? this.menu.toJSON() : undefined;
        data["menuPath"] = this.menuPath;
        data["powerCode"] = this.powerCode;
        data["powerName"] = this.powerName;
        data["method"] = this.method;
        data["params"] = this.params;
        data["groupName"] = this.groupName;
        data["sort"] = this.sort;
        data["iocName"] = this.iocName;
        data["iocClassName"] = this.iocClassName;
        data["category"] = this.category;
        data["isEnabled"] = this.isEnabled;
        if (this.powerRoles && this.powerRoles.constructor === Array) {
            data["powerRoles"] = [];
            for (var _i = 0, _a = this.powerRoles; _i < _a.length; _i++) {
                var item = _a[_i];
                data["powerRoles"].push(item.toJSON());
            }
        }
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Power.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Power();
        result.init(json);
        return result;
    };
    return Power;
}());
exports.Power = Power;
var PowerTypeEnum;
(function (PowerTypeEnum) {
    PowerTypeEnum[PowerTypeEnum["OPERATE"] = "OPERATE"] = "OPERATE";
    PowerTypeEnum[PowerTypeEnum["Data"] = "Data"] = "Data";
    PowerTypeEnum[PowerTypeEnum["MENU"] = "MENU"] = "MENU";
})(PowerTypeEnum = exports.PowerTypeEnum || (exports.PowerTypeEnum = {}));
var PowerRole = /** @class */ (function () {
    function PowerRole(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PowerRole.prototype.init = function (data) {
        if (data) {
            this.roleId = data["roleId"];
            this.role = data["role"] ? Role.fromJS(data["role"]) : undefined;
            this.powerId = data["powerId"];
            this.power = data["power"] ? Power.fromJS(data["power"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    PowerRole.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PowerRole();
        result.init(data);
        return result;
    };
    PowerRole.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["role"] = this.role ? this.role.toJSON() : undefined;
        data["powerId"] = this.powerId;
        data["power"] = this.power ? this.power.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    PowerRole.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PowerRole();
        result.init(json);
        return result;
    };
    return PowerRole;
}());
exports.PowerRole = PowerRole;
var Role = /** @class */ (function () {
    function Role(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Role.prototype.init = function (data) {
        if (data) {
            this.description = data["description"];
            this.normalizedName = data["normalizedName"];
            if (data["claims"] && data["claims"].constructor === Array) {
                this.claims = [];
                for (var _i = 0, _a = data["claims"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.claims.push(RoleClaim.fromJS(item));
                }
            }
            this.concurrencyStamp = data["concurrencyStamp"];
            this.deleterUser = data["deleterUser"] ? User.fromJS(data["deleterUser"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.lastModifierUser = data["lastModifierUser"] ? User.fromJS(data["lastModifierUser"]) : undefined;
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (var _b = 0, _c = data["permissions"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.permissions.push(RolePermissionSetting.fromJS(item));
                }
            }
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    Role.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Role();
        result.init(data);
        return result;
    };
    Role.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["normalizedName"] = this.normalizedName;
        if (this.claims && this.claims.constructor === Array) {
            data["claims"] = [];
            for (var _i = 0, _a = this.claims; _i < _a.length; _i++) {
                var item = _a[_i];
                data["claims"].push(item.toJSON());
            }
        }
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["deleterUser"] = this.deleterUser ? this.deleterUser.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["lastModifierUser"] = this.lastModifierUser ? this.lastModifierUser.toJSON() : undefined;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (var _b = 0, _c = this.permissions; _b < _c.length; _b++) {
                var item = _c[_b];
                data["permissions"].push(item.toJSON());
            }
        }
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    Role.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Role();
        result.init(json);
        return result;
    };
    return Role;
}());
exports.Role = Role;
var RoleClaim = /** @class */ (function () {
    function RoleClaim(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleClaim.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.roleId = data["roleId"];
            this.claimType = data["claimType"];
            this.claimValue = data["claimValue"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    RoleClaim.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleClaim();
        result.init(data);
        return result;
    };
    RoleClaim.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["roleId"] = this.roleId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    RoleClaim.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleClaim();
        result.init(json);
        return result;
    };
    return RoleClaim;
}());
exports.RoleClaim = RoleClaim;
var RolePermissionSetting = /** @class */ (function () {
    function RolePermissionSetting(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RolePermissionSetting.prototype.init = function (data) {
        if (data) {
            this.roleId = data["roleId"];
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.isGranted = data["isGranted"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    RolePermissionSetting.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RolePermissionSetting();
        result.init(data);
        return result;
    };
    RolePermissionSetting.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["isGranted"] = this.isGranted;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    RolePermissionSetting.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RolePermissionSetting();
        result.init(json);
        return result;
    };
    return RolePermissionSetting;
}());
exports.RolePermissionSetting = RolePermissionSetting;
var GetMenuForEditOutput = /** @class */ (function () {
    function GetMenuForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetMenuForEditOutput.prototype.init = function (data) {
        if (data) {
            this.menu = data["menu"] ? MenuEditDto.fromJS(data["menu"]) : undefined;
        }
    };
    GetMenuForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetMenuForEditOutput();
        result.init(data);
        return result;
    };
    GetMenuForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["menu"] = this.menu ? this.menu.toJSON() : undefined;
        return data;
    };
    GetMenuForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetMenuForEditOutput();
        result.init(json);
        return result;
    };
    return GetMenuForEditOutput;
}());
exports.GetMenuForEditOutput = GetMenuForEditOutput;
var MenuDropDownDto = /** @class */ (function () {
    function MenuDropDownDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MenuDropDownDto.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.title = data["title"];
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [];
                for (var _i = 0, _a = data["children"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.children.push(MenuDropDownDto.fromJS(item));
                }
            }
            this.isLeaf = data["isLeaf"];
        }
    };
    MenuDropDownDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MenuDropDownDto();
        result.init(data);
        return result;
    };
    MenuDropDownDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["title"] = this.title;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var item = _a[_i];
                data["children"].push(item.toJSON());
            }
        }
        data["isLeaf"] = this.isLeaf;
        return data;
    };
    MenuDropDownDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MenuDropDownDto();
        result.init(json);
        return result;
    };
    return MenuDropDownDto;
}());
exports.MenuDropDownDto = MenuDropDownDto;
var MenuTreeDto = /** @class */ (function () {
    function MenuTreeDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MenuTreeDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.text = data["text"];
            this.i18n = data["i18n"];
            this.link = data["link"];
            this.icon = data["icon"];
            this.acl = data["acl"];
            if (data["childrens"] && data["childrens"].constructor === Array) {
                this.childrens = [];
                for (var _i = 0, _a = data["childrens"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.childrens.push(MenuTreeDto.fromJS(item));
                }
            }
            this.isAllOperation = data["isAllOperation"];
            if (data["operationNames"] && data["operationNames"].constructor === Array) {
                this.operationNames = [];
                for (var _b = 0, _c = data["operationNames"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.operationNames.push(item);
                }
            }
        }
    };
    MenuTreeDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MenuTreeDto();
        result.init(data);
        return result;
    };
    MenuTreeDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        data["i18n"] = this.i18n;
        data["link"] = this.link;
        data["icon"] = this.icon;
        data["acl"] = this.acl;
        if (this.childrens && this.childrens.constructor === Array) {
            data["childrens"] = [];
            for (var _i = 0, _a = this.childrens; _i < _a.length; _i++) {
                var item = _a[_i];
                data["childrens"].push(item.toJSON());
            }
        }
        data["isAllOperation"] = this.isAllOperation;
        if (this.operationNames && this.operationNames.constructor === Array) {
            data["operationNames"] = [];
            for (var _b = 0, _c = this.operationNames; _b < _c.length; _b++) {
                var item = _c[_b];
                data["operationNames"].push(item);
            }
        }
        return data;
    };
    MenuTreeDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MenuTreeDto();
        result.init(json);
        return result;
    };
    return MenuTreeDto;
}());
exports.MenuTreeDto = MenuTreeDto;
var PagedResultDtoOfMenuListDto = /** @class */ (function () {
    function PagedResultDtoOfMenuListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfMenuListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(MenuListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfMenuListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfMenuListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfMenuListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfMenuListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfMenuListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfMenuListDto;
}());
exports.PagedResultDtoOfMenuListDto = PagedResultDtoOfMenuListDto;
var GetNotificationSettingsOutput = /** @class */ (function () {
    function GetNotificationSettingsOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetNotificationSettingsOutput.prototype.init = function (data) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (var _i = 0, _a = data["notifications"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
                }
            }
        }
    };
    GetNotificationSettingsOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    };
    GetNotificationSettingsOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (var _i = 0, _a = this.notifications; _i < _a.length; _i++) {
                var item = _a[_i];
                data["notifications"].push(item.toJSON());
            }
        }
        return data;
    };
    GetNotificationSettingsOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetNotificationSettingsOutput();
        result.init(json);
        return result;
    };
    return GetNotificationSettingsOutput;
}());
exports.GetNotificationSettingsOutput = GetNotificationSettingsOutput;
var NotificationSubscriptionWithDisplayNameDto = /** @class */ (function () {
    function NotificationSubscriptionWithDisplayNameDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NotificationSubscriptionWithDisplayNameDto.prototype.init = function (data) {
        if (data) {
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    };
    NotificationSubscriptionWithDisplayNameDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    };
    NotificationSubscriptionWithDisplayNameDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data;
    };
    NotificationSubscriptionWithDisplayNameDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(json);
        return result;
    };
    return NotificationSubscriptionWithDisplayNameDto;
}());
exports.NotificationSubscriptionWithDisplayNameDto = NotificationSubscriptionWithDisplayNameDto;
var UserNotificationState;
(function (UserNotificationState) {
    UserNotificationState[UserNotificationState["Unread"] = "Unread"] = "Unread";
    UserNotificationState[UserNotificationState["Read"] = "Read"] = "Read";
})(UserNotificationState = exports.UserNotificationState || (exports.UserNotificationState = {}));
var GetNotificationsOutput = /** @class */ (function () {
    function GetNotificationsOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetNotificationsOutput.prototype.init = function (data) {
        if (data) {
            this.unreadCount = data["unreadCount"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(UserNotification.fromJS(item));
                }
            }
        }
    };
    GetNotificationsOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetNotificationsOutput();
        result.init(data);
        return result;
    };
    GetNotificationsOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    GetNotificationsOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetNotificationsOutput();
        result.init(json);
        return result;
    };
    return GetNotificationsOutput;
}());
exports.GetNotificationsOutput = GetNotificationsOutput;
var UserNotification = /** @class */ (function () {
    function UserNotification(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserNotification.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.state = data["state"];
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : undefined;
            this.id = data["id"];
        }
    };
    UserNotification.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserNotification();
        result.init(data);
        return result;
    };
    UserNotification.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : undefined;
        data["id"] = this.id;
        return data;
    };
    UserNotification.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserNotification();
        result.init(json);
        return result;
    };
    return UserNotification;
}());
exports.UserNotification = UserNotification;
var TenantNotification = /** @class */ (function () {
    function TenantNotification(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantNotification.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.notificationName = data["notificationName"];
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : undefined;
            this.entityType = data["entityType"];
            this.entityTypeName = data["entityTypeName"];
            this.entityId = data["entityId"];
            this.severity = data["severity"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"];
        }
    };
    TenantNotification.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantNotification();
        result.init(data);
        return result;
    };
    TenantNotification.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        data["entityId"] = this.entityId;
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id;
        return data;
    };
    TenantNotification.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantNotification();
        result.init(json);
        return result;
    };
    return TenantNotification;
}());
exports.TenantNotification = TenantNotification;
var NotificationData = /** @class */ (function () {
    function NotificationData(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NotificationData.prototype.init = function (data) {
        if (data) {
            this.type = data["type"];
            if (data["properties"]) {
                this.properties = {};
                for (var key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key];
                }
            }
        }
    };
    NotificationData.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NotificationData();
        result.init(data);
        return result;
    };
    NotificationData.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (var key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data;
    };
    NotificationData.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NotificationData();
        result.init(json);
        return result;
    };
    return NotificationData;
}());
exports.NotificationData = NotificationData;
var NotificationSeverity;
(function (NotificationSeverity) {
    NotificationSeverity[NotificationSeverity["Info"] = "Info"] = "Info";
    NotificationSeverity[NotificationSeverity["Success"] = "Success"] = "Success";
    NotificationSeverity[NotificationSeverity["Warn"] = "Warn"] = "Warn";
    NotificationSeverity[NotificationSeverity["Error"] = "Error"] = "Error";
    NotificationSeverity[NotificationSeverity["Fatal"] = "Fatal"] = "Fatal";
})(NotificationSeverity = exports.NotificationSeverity || (exports.NotificationSeverity = {}));
var EntityDtoOfGuid = /** @class */ (function () {
    function EntityDtoOfGuid(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EntityDtoOfGuid.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
        }
    };
    EntityDtoOfGuid.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    };
    EntityDtoOfGuid.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    };
    EntityDtoOfGuid.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EntityDtoOfGuid();
        result.init(json);
        return result;
    };
    return EntityDtoOfGuid;
}());
exports.EntityDtoOfGuid = EntityDtoOfGuid;
var UpdateNotificationSettingsInput = /** @class */ (function () {
    function UpdateNotificationSettingsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UpdateNotificationSettingsInput.prototype.init = function (data) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [];
                for (var _i = 0, _a = data["notifications"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
                }
            }
        }
    };
    UpdateNotificationSettingsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    };
    UpdateNotificationSettingsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (var _i = 0, _a = this.notifications; _i < _a.length; _i++) {
                var item = _a[_i];
                data["notifications"].push(item.toJSON());
            }
        }
        return data;
    };
    UpdateNotificationSettingsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateNotificationSettingsInput();
        result.init(json);
        return result;
    };
    return UpdateNotificationSettingsInput;
}());
exports.UpdateNotificationSettingsInput = UpdateNotificationSettingsInput;
var NotificationSubscriptionDto = /** @class */ (function () {
    function NotificationSubscriptionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NotificationSubscriptionDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    };
    NotificationSubscriptionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    };
    NotificationSubscriptionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data;
    };
    NotificationSubscriptionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NotificationSubscriptionDto();
        result.init(json);
        return result;
    };
    return NotificationSubscriptionDto;
}());
exports.NotificationSubscriptionDto = NotificationSubscriptionDto;
var RolesToOrganizationUnitInput = /** @class */ (function () {
    function RolesToOrganizationUnitInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RolesToOrganizationUnitInput.prototype.init = function (data) {
        if (data) {
            if (data["roleIds"] && data["roleIds"].constructor === Array) {
                this.roleIds = [];
                for (var _i = 0, _a = data["roleIds"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roleIds.push(item);
                }
            }
            this.organizationUnitId = data["organizationUnitId"];
        }
    };
    RolesToOrganizationUnitInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RolesToOrganizationUnitInput();
        result.init(data);
        return result;
    };
    RolesToOrganizationUnitInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.roleIds && this.roleIds.constructor === Array) {
            data["roleIds"] = [];
            for (var _i = 0, _a = this.roleIds; _i < _a.length; _i++) {
                var item = _a[_i];
                data["roleIds"].push(item);
            }
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    };
    RolesToOrganizationUnitInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RolesToOrganizationUnitInput();
        result.init(json);
        return result;
    };
    return RolesToOrganizationUnitInput;
}());
exports.RolesToOrganizationUnitInput = RolesToOrganizationUnitInput;
var UsersToOrganizationUnitInput = /** @class */ (function () {
    function UsersToOrganizationUnitInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UsersToOrganizationUnitInput.prototype.init = function (data) {
        if (data) {
            if (data["userIds"] && data["userIds"].constructor === Array) {
                this.userIds = [];
                for (var _i = 0, _a = data["userIds"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.userIds.push(item);
                }
            }
            this.organizationUnitId = data["organizationUnitId"];
        }
    };
    UsersToOrganizationUnitInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UsersToOrganizationUnitInput();
        result.init(data);
        return result;
    };
    UsersToOrganizationUnitInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.userIds && this.userIds.constructor === Array) {
            data["userIds"] = [];
            for (var _i = 0, _a = this.userIds; _i < _a.length; _i++) {
                var item = _a[_i];
                data["userIds"].push(item);
            }
        }
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    };
    UsersToOrganizationUnitInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UsersToOrganizationUnitInput();
        result.init(json);
        return result;
    };
    return UsersToOrganizationUnitInput;
}());
exports.UsersToOrganizationUnitInput = UsersToOrganizationUnitInput;
var CreateOrganizationUnitInput = /** @class */ (function () {
    function CreateOrganizationUnitInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateOrganizationUnitInput.prototype.init = function (data) {
        if (data) {
            this.parentId = data["parentId"];
            this.displayName = data["displayName"];
        }
    };
    CreateOrganizationUnitInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrganizationUnitInput();
        result.init(data);
        return result;
    };
    CreateOrganizationUnitInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["displayName"] = this.displayName;
        return data;
    };
    CreateOrganizationUnitInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrganizationUnitInput();
        result.init(json);
        return result;
    };
    return CreateOrganizationUnitInput;
}());
exports.CreateOrganizationUnitInput = CreateOrganizationUnitInput;
/** 组织机构列表Dto */
var OrganizationUnitListDto = /** @class */ (function () {
    function OrganizationUnitListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrganizationUnitListDto.prototype.init = function (data) {
        if (data) {
            this.parentId = data["parentId"];
            this.code = data["code"];
            this.displayName = data["displayName"];
            this.memberCount = data["memberCount"];
            this.roleCount = data["roleCount"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    OrganizationUnitListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrganizationUnitListDto();
        result.init(data);
        return result;
    };
    OrganizationUnitListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        data["roleCount"] = this.roleCount;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    OrganizationUnitListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrganizationUnitListDto();
        result.init(json);
        return result;
    };
    return OrganizationUnitListDto;
}());
exports.OrganizationUnitListDto = OrganizationUnitListDto;
var FindUsersInput = /** @class */ (function () {
    function FindUsersInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FindUsersInput.prototype.init = function (data) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
            this.filterText = data["filterText"];
        }
    };
    FindUsersInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FindUsersInput();
        result.init(data);
        return result;
    };
    FindUsersInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        data["filterText"] = this.filterText;
        return data;
    };
    FindUsersInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FindUsersInput();
        result.init(json);
        return result;
    };
    return FindUsersInput;
}());
exports.FindUsersInput = FindUsersInput;
var ListResultDtoOfOrganizationUnitListDto = /** @class */ (function () {
    function ListResultDtoOfOrganizationUnitListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfOrganizationUnitListDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(OrganizationUnitListDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfOrganizationUnitListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfOrganizationUnitListDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfOrganizationUnitListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfOrganizationUnitListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfOrganizationUnitListDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfOrganizationUnitListDto;
}());
exports.ListResultDtoOfOrganizationUnitListDto = ListResultDtoOfOrganizationUnitListDto;
var PagedResultDtoOfOrganizationUnitRoleListDto = /** @class */ (function () {
    function PagedResultDtoOfOrganizationUnitRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfOrganizationUnitRoleListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(OrganizationUnitRoleListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfOrganizationUnitRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfOrganizationUnitRoleListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfOrganizationUnitRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfOrganizationUnitRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfOrganizationUnitRoleListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfOrganizationUnitRoleListDto;
}());
exports.PagedResultDtoOfOrganizationUnitRoleListDto = PagedResultDtoOfOrganizationUnitRoleListDto;
var OrganizationUnitRoleListDto = /** @class */ (function () {
    function OrganizationUnitRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrganizationUnitRoleListDto.prototype.init = function (data) {
        if (data) {
            this.displayName = data["displayName"];
            this.name = data["name"];
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : undefined;
            this.id = data["id"];
        }
    };
    OrganizationUnitRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrganizationUnitRoleListDto();
        result.init(data);
        return result;
    };
    OrganizationUnitRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["name"] = this.name;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : undefined;
        data["id"] = this.id;
        return data;
    };
    OrganizationUnitRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrganizationUnitRoleListDto();
        result.init(json);
        return result;
    };
    return OrganizationUnitRoleListDto;
}());
exports.OrganizationUnitRoleListDto = OrganizationUnitRoleListDto;
var PagedResultDtoOfOrganizationUnitUserListDto = /** @class */ (function () {
    function PagedResultDtoOfOrganizationUnitUserListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfOrganizationUnitUserListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(OrganizationUnitUserListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfOrganizationUnitUserListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfOrganizationUnitUserListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfOrganizationUnitUserListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfOrganizationUnitUserListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfOrganizationUnitUserListDto;
}());
exports.PagedResultDtoOfOrganizationUnitUserListDto = PagedResultDtoOfOrganizationUnitUserListDto;
var OrganizationUnitUserListDto = /** @class */ (function () {
    function OrganizationUnitUserListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    OrganizationUnitUserListDto.prototype.init = function (data) {
        if (data) {
            this.userName = data["userName"];
            this.addedTime = data["addedTime"] ? moment(data["addedTime"].toString()) : undefined;
            this.id = data["id"];
        }
    };
    OrganizationUnitUserListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new OrganizationUnitUserListDto();
        result.init(data);
        return result;
    };
    OrganizationUnitUserListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["addedTime"] = this.addedTime ? this.addedTime.toISOString() : undefined;
        data["id"] = this.id;
        return data;
    };
    OrganizationUnitUserListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new OrganizationUnitUserListDto();
        result.init(json);
        return result;
    };
    return OrganizationUnitUserListDto;
}());
exports.OrganizationUnitUserListDto = OrganizationUnitUserListDto;
var UserToOrganizationUnitInput = /** @class */ (function () {
    function UserToOrganizationUnitInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserToOrganizationUnitInput.prototype.init = function (data) {
        if (data) {
            this.userId = data["userId"];
            this.organizationUnitId = data["organizationUnitId"];
        }
    };
    UserToOrganizationUnitInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserToOrganizationUnitInput();
        result.init(data);
        return result;
    };
    UserToOrganizationUnitInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    };
    UserToOrganizationUnitInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserToOrganizationUnitInput();
        result.init(json);
        return result;
    };
    return UserToOrganizationUnitInput;
}());
exports.UserToOrganizationUnitInput = UserToOrganizationUnitInput;
var MoveOrganizationUnitInput = /** @class */ (function () {
    function MoveOrganizationUnitInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MoveOrganizationUnitInput.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.newParentId = data["newParentId"];
        }
    };
    MoveOrganizationUnitInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MoveOrganizationUnitInput();
        result.init(data);
        return result;
    };
    MoveOrganizationUnitInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["newParentId"] = this.newParentId;
        return data;
    };
    MoveOrganizationUnitInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MoveOrganizationUnitInput();
        result.init(json);
        return result;
    };
    return MoveOrganizationUnitInput;
}());
exports.MoveOrganizationUnitInput = MoveOrganizationUnitInput;
var RoleToOrganizationUnitInput = /** @class */ (function () {
    function RoleToOrganizationUnitInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleToOrganizationUnitInput.prototype.init = function (data) {
        if (data) {
            this.roleId = data["roleId"];
            this.organizationUnitId = data["organizationUnitId"];
        }
    };
    RoleToOrganizationUnitInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleToOrganizationUnitInput();
        result.init(data);
        return result;
    };
    RoleToOrganizationUnitInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["organizationUnitId"] = this.organizationUnitId;
        return data;
    };
    RoleToOrganizationUnitInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleToOrganizationUnitInput();
        result.init(json);
        return result;
    };
    return RoleToOrganizationUnitInput;
}());
exports.RoleToOrganizationUnitInput = RoleToOrganizationUnitInput;
var UpdateOrganizationUnitInput = /** @class */ (function () {
    function UpdateOrganizationUnitInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UpdateOrganizationUnitInput.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
        }
    };
    UpdateOrganizationUnitInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateOrganizationUnitInput();
        result.init(data);
        return result;
    };
    UpdateOrganizationUnitInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        return data;
    };
    UpdateOrganizationUnitInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateOrganizationUnitInput();
        result.init(json);
        return result;
    };
    return UpdateOrganizationUnitInput;
}());
exports.UpdateOrganizationUnitInput = UpdateOrganizationUnitInput;
var CreateOrUpdatePayMethodInput = /** @class */ (function () {
    function CreateOrUpdatePayMethodInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.payMethod = new PayMethodEditDto();
        }
    }
    CreateOrUpdatePayMethodInput.prototype.init = function (data) {
        if (data) {
            this.payMethod = data["payMethod"] ? PayMethodEditDto.fromJS(data["payMethod"]) : new PayMethodEditDto();
        }
    };
    CreateOrUpdatePayMethodInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdatePayMethodInput();
        result.init(data);
        return result;
    };
    CreateOrUpdatePayMethodInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        return data;
    };
    CreateOrUpdatePayMethodInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdatePayMethodInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdatePayMethodInput;
}());
exports.CreateOrUpdatePayMethodInput = CreateOrUpdatePayMethodInput;
var PayMethodEditDto = /** @class */ (function () {
    function PayMethodEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PayMethodEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.payName = data["payName"];
            this.payCode = data["payCode"];
            this.sort = data["sort"];
            this.isEnabled = data["isEnabled"];
        }
    };
    PayMethodEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PayMethodEditDto();
        result.init(data);
        return result;
    };
    PayMethodEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["payName"] = this.payName;
        data["payCode"] = this.payCode;
        data["sort"] = this.sort;
        data["isEnabled"] = this.isEnabled;
        return data;
    };
    PayMethodEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PayMethodEditDto();
        result.init(json);
        return result;
    };
    return PayMethodEditDto;
}());
exports.PayMethodEditDto = PayMethodEditDto;
var PayMethodListDto = /** @class */ (function () {
    function PayMethodListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PayMethodListDto.prototype.init = function (data) {
        if (data) {
            this.payName = data["payName"];
            this.payCode = data["payCode"];
            this.sort = data["sort"];
            this.isEnabled = data["isEnabled"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    PayMethodListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PayMethodListDto();
        result.init(data);
        return result;
    };
    PayMethodListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["payName"] = this.payName;
        data["payCode"] = this.payCode;
        data["sort"] = this.sort;
        data["isEnabled"] = this.isEnabled;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    PayMethodListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PayMethodListDto();
        result.init(json);
        return result;
    };
    return PayMethodListDto;
}());
exports.PayMethodListDto = PayMethodListDto;
var GetPayMethodForEditOutput = /** @class */ (function () {
    function GetPayMethodForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetPayMethodForEditOutput.prototype.init = function (data) {
        if (data) {
            this.payMethod = data["payMethod"] ? PayMethodEditDto.fromJS(data["payMethod"]) : undefined;
        }
    };
    GetPayMethodForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetPayMethodForEditOutput();
        result.init(data);
        return result;
    };
    GetPayMethodForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        return data;
    };
    GetPayMethodForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetPayMethodForEditOutput();
        result.init(json);
        return result;
    };
    return GetPayMethodForEditOutput;
}());
exports.GetPayMethodForEditOutput = GetPayMethodForEditOutput;
var PagedResultDtoOfPayMethodListDto = /** @class */ (function () {
    function PagedResultDtoOfPayMethodListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfPayMethodListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(PayMethodListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfPayMethodListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfPayMethodListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfPayMethodListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfPayMethodListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfPayMethodListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfPayMethodListDto;
}());
exports.PagedResultDtoOfPayMethodListDto = PagedResultDtoOfPayMethodListDto;
var ListResultDtoOfFlatPermissionWithLevelDto = /** @class */ (function () {
    function ListResultDtoOfFlatPermissionWithLevelDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfFlatPermissionWithLevelDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(FlatPermissionWithLevelDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfFlatPermissionWithLevelDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfFlatPermissionWithLevelDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfFlatPermissionWithLevelDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfFlatPermissionWithLevelDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfFlatPermissionWithLevelDto;
}());
exports.ListResultDtoOfFlatPermissionWithLevelDto = ListResultDtoOfFlatPermissionWithLevelDto;
var FlatPermissionWithLevelDto = /** @class */ (function () {
    function FlatPermissionWithLevelDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FlatPermissionWithLevelDto.prototype.init = function (data) {
        if (data) {
            this.level = data["level"];
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    };
    FlatPermissionWithLevelDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FlatPermissionWithLevelDto();
        result.init(data);
        return result;
    };
    FlatPermissionWithLevelDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data;
    };
    FlatPermissionWithLevelDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FlatPermissionWithLevelDto();
        result.init(json);
        return result;
    };
    return FlatPermissionWithLevelDto;
}());
exports.FlatPermissionWithLevelDto = FlatPermissionWithLevelDto;
var ListResultDtoOfTreePermissionDto = /** @class */ (function () {
    function ListResultDtoOfTreePermissionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfTreePermissionDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TreePermissionDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfTreePermissionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfTreePermissionDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfTreePermissionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfTreePermissionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfTreePermissionDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfTreePermissionDto;
}());
exports.ListResultDtoOfTreePermissionDto = ListResultDtoOfTreePermissionDto;
var TreePermissionDto = /** @class */ (function () {
    function TreePermissionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TreePermissionDto.prototype.init = function (data) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [];
                for (var _i = 0, _a = data["children"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.children.push(TreePermissionDto.fromJS(item));
                }
            }
            this.checked = data["checked"];
        }
    };
    TreePermissionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TreePermissionDto();
        result.init(data);
        return result;
    };
    TreePermissionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var item = _a[_i];
                data["children"].push(item.toJSON());
            }
        }
        data["checked"] = this.checked;
        return data;
    };
    TreePermissionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TreePermissionDto();
        result.init(json);
        return result;
    };
    return TreePermissionDto;
}());
exports.TreePermissionDto = TreePermissionDto;
var CreateOrUpdatePowerInput = /** @class */ (function () {
    function CreateOrUpdatePowerInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.power = new PowerEditDto();
        }
    }
    CreateOrUpdatePowerInput.prototype.init = function (data) {
        if (data) {
            this.power = data["power"] ? PowerEditDto.fromJS(data["power"]) : new PowerEditDto();
        }
    };
    CreateOrUpdatePowerInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdatePowerInput();
        result.init(data);
        return result;
    };
    CreateOrUpdatePowerInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["power"] = this.power ? this.power.toJSON() : undefined;
        return data;
    };
    CreateOrUpdatePowerInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdatePowerInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdatePowerInput;
}());
exports.CreateOrUpdatePowerInput = CreateOrUpdatePowerInput;
var PowerEditDto = /** @class */ (function () {
    function PowerEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PowerEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.menuId = data["menuId"];
            this.menuPath = data["menuPath"];
            this.powerCode = data["powerCode"];
            this.powerName = data["powerName"];
            this.method = data["method"];
            this.params = data["params"];
            this.groupName = data["groupName"];
            this.sort = data["sort"];
            this.iocName = data["iocName"];
            this.iocClassName = data["iocClassName"];
            this.category = data["category"];
            this.isEnabled = data["isEnabled"];
        }
    };
    PowerEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PowerEditDto();
        result.init(data);
        return result;
    };
    PowerEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["menuId"] = this.menuId;
        data["menuPath"] = this.menuPath;
        data["powerCode"] = this.powerCode;
        data["powerName"] = this.powerName;
        data["method"] = this.method;
        data["params"] = this.params;
        data["groupName"] = this.groupName;
        data["sort"] = this.sort;
        data["iocName"] = this.iocName;
        data["iocClassName"] = this.iocClassName;
        data["category"] = this.category;
        data["isEnabled"] = this.isEnabled;
        return data;
    };
    PowerEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PowerEditDto();
        result.init(json);
        return result;
    };
    return PowerEditDto;
}());
exports.PowerEditDto = PowerEditDto;
var PowerListDto = /** @class */ (function () {
    function PowerListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PowerListDto.prototype.init = function (data) {
        if (data) {
            this.menuId = data["menuId"];
            this.menu = data["menu"] ? Menu.fromJS(data["menu"]) : undefined;
            this.menuPath = data["menuPath"];
            this.powerCode = data["powerCode"];
            this.powerName = data["powerName"];
            this.method = data["method"];
            this.params = data["params"];
            this.groupName = data["groupName"];
            this.sort = data["sort"];
            this.iocName = data["iocName"];
            this.iocClassName = data["iocClassName"];
            this.category = data["category"];
            this.isEnabled = data["isEnabled"];
            this.isCheck = data["isCheck"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    PowerListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PowerListDto();
        result.init(data);
        return result;
    };
    PowerListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["menuId"] = this.menuId;
        data["menu"] = this.menu ? this.menu.toJSON() : undefined;
        data["menuPath"] = this.menuPath;
        data["powerCode"] = this.powerCode;
        data["powerName"] = this.powerName;
        data["method"] = this.method;
        data["params"] = this.params;
        data["groupName"] = this.groupName;
        data["sort"] = this.sort;
        data["iocName"] = this.iocName;
        data["iocClassName"] = this.iocClassName;
        data["category"] = this.category;
        data["isEnabled"] = this.isEnabled;
        data["isCheck"] = this.isCheck;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    PowerListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PowerListDto();
        result.init(json);
        return result;
    };
    return PowerListDto;
}());
exports.PowerListDto = PowerListDto;
var GetPowerForEditOutput = /** @class */ (function () {
    function GetPowerForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetPowerForEditOutput.prototype.init = function (data) {
        if (data) {
            this.power = data["power"] ? PowerEditDto.fromJS(data["power"]) : undefined;
        }
    };
    GetPowerForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetPowerForEditOutput();
        result.init(data);
        return result;
    };
    GetPowerForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["power"] = this.power ? this.power.toJSON() : undefined;
        return data;
    };
    GetPowerForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetPowerForEditOutput();
        result.init(json);
        return result;
    };
    return GetPowerForEditOutput;
}());
exports.GetPowerForEditOutput = GetPowerForEditOutput;
var PagedResultDtoOfPowerListDto = /** @class */ (function () {
    function PagedResultDtoOfPowerListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfPowerListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(PowerListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfPowerListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfPowerListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfPowerListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfPowerListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfPowerListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfPowerListDto;
}());
exports.PagedResultDtoOfPowerListDto = PagedResultDtoOfPowerListDto;
var CreateOrUpdatePowerRoleInput = /** @class */ (function () {
    function CreateOrUpdatePowerRoleInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.powerRole = new PowerRoleEditDto();
        }
    }
    CreateOrUpdatePowerRoleInput.prototype.init = function (data) {
        if (data) {
            this.powerRole = data["powerRole"] ? PowerRoleEditDto.fromJS(data["powerRole"]) : new PowerRoleEditDto();
        }
    };
    CreateOrUpdatePowerRoleInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdatePowerRoleInput();
        result.init(data);
        return result;
    };
    CreateOrUpdatePowerRoleInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["powerRole"] = this.powerRole ? this.powerRole.toJSON() : undefined;
        return data;
    };
    CreateOrUpdatePowerRoleInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdatePowerRoleInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdatePowerRoleInput;
}());
exports.CreateOrUpdatePowerRoleInput = CreateOrUpdatePowerRoleInput;
var PowerRoleEditDto = /** @class */ (function () {
    function PowerRoleEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PowerRoleEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.roleId = data["roleId"];
            this.powerId = data["powerId"];
        }
    };
    PowerRoleEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PowerRoleEditDto();
        result.init(data);
        return result;
    };
    PowerRoleEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roleId"] = this.roleId;
        data["powerId"] = this.powerId;
        return data;
    };
    PowerRoleEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PowerRoleEditDto();
        result.init(json);
        return result;
    };
    return PowerRoleEditDto;
}());
exports.PowerRoleEditDto = PowerRoleEditDto;
var PowerRoleListDto = /** @class */ (function () {
    function PowerRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PowerRoleListDto.prototype.init = function (data) {
        if (data) {
            this.roleId = data["roleId"];
            this.role = data["role"] ? Role.fromJS(data["role"]) : undefined;
            this.powerId = data["powerId"];
            this.power = data["power"] ? Power.fromJS(data["power"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    PowerRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PowerRoleListDto();
        result.init(data);
        return result;
    };
    PowerRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["role"] = this.role ? this.role.toJSON() : undefined;
        data["powerId"] = this.powerId;
        data["power"] = this.power ? this.power.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    PowerRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PowerRoleListDto();
        result.init(json);
        return result;
    };
    return PowerRoleListDto;
}());
exports.PowerRoleListDto = PowerRoleListDto;
var GetPowerRoleForEditOutput = /** @class */ (function () {
    function GetPowerRoleForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetPowerRoleForEditOutput.prototype.init = function (data) {
        if (data) {
            this.powerRole = data["powerRole"] ? PowerRoleEditDto.fromJS(data["powerRole"]) : undefined;
        }
    };
    GetPowerRoleForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetPowerRoleForEditOutput();
        result.init(data);
        return result;
    };
    GetPowerRoleForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["powerRole"] = this.powerRole ? this.powerRole.toJSON() : undefined;
        return data;
    };
    GetPowerRoleForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetPowerRoleForEditOutput();
        result.init(json);
        return result;
    };
    return GetPowerRoleForEditOutput;
}());
exports.GetPowerRoleForEditOutput = GetPowerRoleForEditOutput;
var PagedResultDtoOfPowerRoleListDto = /** @class */ (function () {
    function PagedResultDtoOfPowerRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfPowerRoleListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(PowerRoleListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfPowerRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfPowerRoleListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfPowerRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfPowerRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfPowerRoleListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfPowerRoleListDto;
}());
exports.PagedResultDtoOfPowerRoleListDto = PagedResultDtoOfPowerRoleListDto;
var CreateOrUpdatePriceAuditInput = /** @class */ (function () {
    function CreateOrUpdatePriceAuditInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.priceAudit = new PriceAuditEditDto();
        }
    }
    CreateOrUpdatePriceAuditInput.prototype.init = function (data) {
        if (data) {
            this.priceAudit = data["priceAudit"] ? PriceAuditEditDto.fromJS(data["priceAudit"]) : new PriceAuditEditDto();
        }
    };
    CreateOrUpdatePriceAuditInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdatePriceAuditInput();
        result.init(data);
        return result;
    };
    CreateOrUpdatePriceAuditInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["priceAudit"] = this.priceAudit ? this.priceAudit.toJSON() : undefined;
        return data;
    };
    CreateOrUpdatePriceAuditInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdatePriceAuditInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdatePriceAuditInput;
}());
exports.CreateOrUpdatePriceAuditInput = CreateOrUpdatePriceAuditInput;
var PriceAuditEditDto = /** @class */ (function () {
    function PriceAuditEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PriceAuditEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.ticketId = data["ticketId"];
            this.orgTicketPriceId = data["orgTicketPriceId"];
            this.isEnabled = data["isEnabled"];
            this.price = data["price"];
            this.discount = data["discount"];
            this.rDiscount = data["rDiscount"];
            this.upperTime = data["upperTime"] ? moment(data["upperTime"].toString()) : undefined;
            this.lowerTime = data["lowerTime"] ? moment(data["lowerTime"].toString()) : undefined;
            this.auditStatus = data["auditStatus"];
            this.ticketName = data["ticketName"];
            this.upperTimeStr = data["upperTimeStr"];
            this.lowerTimeStr = data["lowerTimeStr"];
        }
    };
    PriceAuditEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PriceAuditEditDto();
        result.init(data);
        return result;
    };
    PriceAuditEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketId"] = this.ticketId;
        data["orgTicketPriceId"] = this.orgTicketPriceId;
        data["isEnabled"] = this.isEnabled;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["rDiscount"] = this.rDiscount;
        data["upperTime"] = this.upperTime ? this.upperTime.toISOString() : undefined;
        data["lowerTime"] = this.lowerTime ? this.lowerTime.toISOString() : undefined;
        data["auditStatus"] = this.auditStatus;
        data["ticketName"] = this.ticketName;
        data["upperTimeStr"] = this.upperTimeStr;
        data["lowerTimeStr"] = this.lowerTimeStr;
        return data;
    };
    PriceAuditEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PriceAuditEditDto();
        result.init(json);
        return result;
    };
    return PriceAuditEditDto;
}());
exports.PriceAuditEditDto = PriceAuditEditDto;
var PriceAuditListDto = /** @class */ (function () {
    function PriceAuditListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PriceAuditListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.orgTicketPriceId = data["orgTicketPriceId"];
            this.orgTicketPrice = data["orgTicketPrice"] ? TicketPrice.fromJS(data["orgTicketPrice"]) : undefined;
            this.isEnabled = data["isEnabled"];
            this.price = data["price"];
            this.discount = data["discount"];
            this.rDiscount = data["rDiscount"];
            this.upperTime = data["upperTime"] ? moment(data["upperTime"].toString()) : undefined;
            this.lowerTime = data["lowerTime"] ? moment(data["lowerTime"].toString()) : undefined;
            this.auditStatus = data["auditStatus"];
            this.ticketName = data["ticketName"];
            this.upperTimeStr = data["upperTimeStr"];
            this.lowerTimeStr = data["lowerTimeStr"];
            this.creationTimeStr = data["creationTimeStr"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    PriceAuditListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PriceAuditListDto();
        result.init(data);
        return result;
    };
    PriceAuditListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["orgTicketPriceId"] = this.orgTicketPriceId;
        data["orgTicketPrice"] = this.orgTicketPrice ? this.orgTicketPrice.toJSON() : undefined;
        data["isEnabled"] = this.isEnabled;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["rDiscount"] = this.rDiscount;
        data["upperTime"] = this.upperTime ? this.upperTime.toISOString() : undefined;
        data["lowerTime"] = this.lowerTime ? this.lowerTime.toISOString() : undefined;
        data["auditStatus"] = this.auditStatus;
        data["ticketName"] = this.ticketName;
        data["upperTimeStr"] = this.upperTimeStr;
        data["lowerTimeStr"] = this.lowerTimeStr;
        data["creationTimeStr"] = this.creationTimeStr;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    PriceAuditListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PriceAuditListDto();
        result.init(json);
        return result;
    };
    return PriceAuditListDto;
}());
exports.PriceAuditListDto = PriceAuditListDto;
var GetPriceAuditForEditOutput = /** @class */ (function () {
    function GetPriceAuditForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetPriceAuditForEditOutput.prototype.init = function (data) {
        if (data) {
            this.priceAudit = data["priceAudit"] ? PriceAuditEditDto.fromJS(data["priceAudit"]) : undefined;
        }
    };
    GetPriceAuditForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetPriceAuditForEditOutput();
        result.init(data);
        return result;
    };
    GetPriceAuditForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["priceAudit"] = this.priceAudit ? this.priceAudit.toJSON() : undefined;
        return data;
    };
    GetPriceAuditForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetPriceAuditForEditOutput();
        result.init(json);
        return result;
    };
    return GetPriceAuditForEditOutput;
}());
exports.GetPriceAuditForEditOutput = GetPriceAuditForEditOutput;
var GetPriceAuditsInput = /** @class */ (function () {
    function GetPriceAuditsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetPriceAuditsInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetPriceAuditsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetPriceAuditsInput();
        result.init(data);
        return result;
    };
    GetPriceAuditsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetPriceAuditsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetPriceAuditsInput();
        result.init(json);
        return result;
    };
    return GetPriceAuditsInput;
}());
exports.GetPriceAuditsInput = GetPriceAuditsInput;
var PagedResultDtoOfPriceAuditListDto = /** @class */ (function () {
    function PagedResultDtoOfPriceAuditListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfPriceAuditListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(PriceAuditListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfPriceAuditListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfPriceAuditListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfPriceAuditListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfPriceAuditListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfPriceAuditListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfPriceAuditListDto;
}());
exports.PagedResultDtoOfPriceAuditListDto = PagedResultDtoOfPriceAuditListDto;
var ChangeUserLanguageDto = /** @class */ (function () {
    function ChangeUserLanguageDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ChangeUserLanguageDto.prototype.init = function (data) {
        if (data) {
            this.languageName = data["languageName"];
        }
    };
    ChangeUserLanguageDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ChangeUserLanguageDto();
        result.init(data);
        return result;
    };
    ChangeUserLanguageDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["languageName"] = this.languageName;
        return data;
    };
    ChangeUserLanguageDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ChangeUserLanguageDto();
        result.init(json);
        return result;
    };
    return ChangeUserLanguageDto;
}());
exports.ChangeUserLanguageDto = ChangeUserLanguageDto;
var ChangePasswordInput = /** @class */ (function () {
    function ChangePasswordInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ChangePasswordInput.prototype.init = function (data) {
        if (data) {
            this.currentPassword = data["currentPassword"];
            this.newPassword = data["newPassword"];
        }
    };
    ChangePasswordInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ChangePasswordInput();
        result.init(data);
        return result;
    };
    ChangePasswordInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    };
    ChangePasswordInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ChangePasswordInput();
        result.init(json);
        return result;
    };
    return ChangePasswordInput;
}());
exports.ChangePasswordInput = ChangePasswordInput;
var CurrentUserProfileEditDto = /** @class */ (function () {
    function CurrentUserProfileEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CurrentUserProfileEditDto.prototype.init = function (data) {
        if (data) {
            this.userName = data["userName"];
            this.fullName = data["fullName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isPhoneNumberConfirmed = data["isPhoneNumberConfirmed"];
            this.timezone = data["timezone"];
        }
    };
    CurrentUserProfileEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CurrentUserProfileEditDto();
        result.init(data);
        return result;
    };
    CurrentUserProfileEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["timezone"] = this.timezone;
        return data;
    };
    CurrentUserProfileEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CurrentUserProfileEditDto();
        result.init(json);
        return result;
    };
    return CurrentUserProfileEditDto;
}());
exports.CurrentUserProfileEditDto = CurrentUserProfileEditDto;
/** 用户头像输出 */
var GetProfilePictureOutputDto = /** @class */ (function () {
    function GetProfilePictureOutputDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetProfilePictureOutputDto.prototype.init = function (data) {
        if (data) {
            this.profilePicture = data["profilePicture"];
        }
    };
    GetProfilePictureOutputDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetProfilePictureOutputDto();
        result.init(data);
        return result;
    };
    GetProfilePictureOutputDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["profilePicture"] = this.profilePicture;
        return data;
    };
    GetProfilePictureOutputDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetProfilePictureOutputDto();
        result.init(json);
        return result;
    };
    return GetProfilePictureOutputDto;
}());
exports.GetProfilePictureOutputDto = GetProfilePictureOutputDto;
var UpdateProfilePictureInput = /** @class */ (function () {
    function UpdateProfilePictureInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UpdateProfilePictureInput.prototype.init = function (data) {
        if (data) {
            this.fileToken = data["fileToken"];
            this.x = data["x"];
            this.y = data["y"];
            this.width = data["width"];
            this.height = data["height"];
        }
    };
    UpdateProfilePictureInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateProfilePictureInput();
        result.init(data);
        return result;
    };
    UpdateProfilePictureInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["fileToken"] = this.fileToken;
        data["x"] = this.x;
        data["y"] = this.y;
        data["width"] = this.width;
        data["height"] = this.height;
        return data;
    };
    UpdateProfilePictureInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateProfilePictureInput();
        result.init(json);
        return result;
    };
    return UpdateProfilePictureInput;
}());
exports.UpdateProfilePictureInput = UpdateProfilePictureInput;
var CreateOrUpdateRechargeRecordInput = /** @class */ (function () {
    function CreateOrUpdateRechargeRecordInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.rechargeRecord = new RechargeRecordEditDto();
        }
    }
    CreateOrUpdateRechargeRecordInput.prototype.init = function (data) {
        if (data) {
            this.rechargeRecord = data["rechargeRecord"] ? RechargeRecordEditDto.fromJS(data["rechargeRecord"]) : new RechargeRecordEditDto();
        }
    };
    CreateOrUpdateRechargeRecordInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateRechargeRecordInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateRechargeRecordInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["rechargeRecord"] = this.rechargeRecord ? this.rechargeRecord.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateRechargeRecordInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateRechargeRecordInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateRechargeRecordInput;
}());
exports.CreateOrUpdateRechargeRecordInput = CreateOrUpdateRechargeRecordInput;
var RechargeRecordEditDto = /** @class */ (function () {
    function RechargeRecordEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RechargeRecordEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.travelAgencyId = data["travelAgencyId"];
            this.amount = data["amount"];
            this.rechargeStatus = data["rechargeStatus"];
            this.payMethodId = data["payMethodId"];
        }
    };
    RechargeRecordEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RechargeRecordEditDto();
        result.init(data);
        return result;
    };
    RechargeRecordEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["travelAgencyId"] = this.travelAgencyId;
        data["amount"] = this.amount;
        data["rechargeStatus"] = this.rechargeStatus;
        data["payMethodId"] = this.payMethodId;
        return data;
    };
    RechargeRecordEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RechargeRecordEditDto();
        result.init(json);
        return result;
    };
    return RechargeRecordEditDto;
}());
exports.RechargeRecordEditDto = RechargeRecordEditDto;
var RechargeStatusEnum;
(function (RechargeStatusEnum) {
    RechargeStatusEnum[RechargeStatusEnum["Wait"] = "Wait"] = "Wait";
    RechargeStatusEnum[RechargeStatusEnum["Complete"] = "Complete"] = "Complete";
    RechargeStatusEnum[RechargeStatusEnum["Cancel"] = "Cancel"] = "Cancel";
})(RechargeStatusEnum = exports.RechargeStatusEnum || (exports.RechargeStatusEnum = {}));
var RechargeRecordListDto = /** @class */ (function () {
    function RechargeRecordListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RechargeRecordListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.travelAgencyId = data["travelAgencyId"];
            this.travelAgency = data["travelAgency"] ? TravelAgency.fromJS(data["travelAgency"]) : undefined;
            this.amount = data["amount"];
            this.rechargeStatus = data["rechargeStatus"];
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    RechargeRecordListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RechargeRecordListDto();
        result.init(data);
        return result;
    };
    RechargeRecordListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["travelAgencyId"] = this.travelAgencyId;
        data["travelAgency"] = this.travelAgency ? this.travelAgency.toJSON() : undefined;
        data["amount"] = this.amount;
        data["rechargeStatus"] = this.rechargeStatus;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    RechargeRecordListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RechargeRecordListDto();
        result.init(json);
        return result;
    };
    return RechargeRecordListDto;
}());
exports.RechargeRecordListDto = RechargeRecordListDto;
var GetRechargeRecordForEditOutput = /** @class */ (function () {
    function GetRechargeRecordForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetRechargeRecordForEditOutput.prototype.init = function (data) {
        if (data) {
            this.rechargeRecord = data["rechargeRecord"] ? RechargeRecordEditDto.fromJS(data["rechargeRecord"]) : undefined;
        }
    };
    GetRechargeRecordForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetRechargeRecordForEditOutput();
        result.init(data);
        return result;
    };
    GetRechargeRecordForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["rechargeRecord"] = this.rechargeRecord ? this.rechargeRecord.toJSON() : undefined;
        return data;
    };
    GetRechargeRecordForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetRechargeRecordForEditOutput();
        result.init(json);
        return result;
    };
    return GetRechargeRecordForEditOutput;
}());
exports.GetRechargeRecordForEditOutput = GetRechargeRecordForEditOutput;
var PagedResultDtoOfRechargeRecordListDto = /** @class */ (function () {
    function PagedResultDtoOfRechargeRecordListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfRechargeRecordListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RechargeRecordListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfRechargeRecordListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfRechargeRecordListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfRechargeRecordListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfRechargeRecordListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfRechargeRecordListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfRechargeRecordListDto;
}());
exports.PagedResultDtoOfRechargeRecordListDto = PagedResultDtoOfRechargeRecordListDto;
var GetRechargeRecordsInput = /** @class */ (function () {
    function GetRechargeRecordsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetRechargeRecordsInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetRechargeRecordsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetRechargeRecordsInput();
        result.init(data);
        return result;
    };
    GetRechargeRecordsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetRechargeRecordsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetRechargeRecordsInput();
        result.init(json);
        return result;
    };
    return GetRechargeRecordsInput;
}());
exports.GetRechargeRecordsInput = GetRechargeRecordsInput;
var CreateOrUpdateRoleInput = /** @class */ (function () {
    function CreateOrUpdateRoleInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.role = new RoleEditDto();
            this.grantedPermissionNames = [];
        }
    }
    CreateOrUpdateRoleInput.prototype.init = function (data) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (var _i = 0, _a = data["grantedPermissionNames"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.grantedPermissionNames.push(item);
                }
            }
            if (data["ticketPriceIds"] && data["ticketPriceIds"].constructor === Array) {
                this.ticketPriceIds = [];
                for (var _b = 0, _c = data["ticketPriceIds"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.ticketPriceIds.push(item);
                }
            }
        }
    };
    CreateOrUpdateRoleInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateRoleInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (var _i = 0, _a = this.grantedPermissionNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data["grantedPermissionNames"].push(item);
            }
        }
        if (this.ticketPriceIds && this.ticketPriceIds.constructor === Array) {
            data["ticketPriceIds"] = [];
            for (var _b = 0, _c = this.ticketPriceIds; _b < _c.length; _b++) {
                var item = _c[_b];
                data["ticketPriceIds"].push(item);
            }
        }
        return data;
    };
    CreateOrUpdateRoleInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateRoleInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateRoleInput;
}());
exports.CreateOrUpdateRoleInput = CreateOrUpdateRoleInput;
var RoleEditDto = /** @class */ (function () {
    function RoleEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
        }
    };
    RoleEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleEditDto();
        result.init(data);
        return result;
    };
    RoleEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        return data;
    };
    RoleEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleEditDto();
        result.init(json);
        return result;
    };
    return RoleEditDto;
}());
exports.RoleEditDto = RoleEditDto;
var ListResultDtoOfRoleListDto = /** @class */ (function () {
    function ListResultDtoOfRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfRoleListDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RoleListDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfRoleListDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfRoleListDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfRoleListDto;
}());
exports.ListResultDtoOfRoleListDto = ListResultDtoOfRoleListDto;
var RoleListDto = /** @class */ (function () {
    function RoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RoleListDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.id = data["id"];
        }
    };
    RoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RoleListDto();
        result.init(data);
        return result;
    };
    RoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["id"] = this.id;
        return data;
    };
    RoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RoleListDto();
        result.init(json);
        return result;
    };
    return RoleListDto;
}());
exports.RoleListDto = RoleListDto;
var GetRoleForEditOutput = /** @class */ (function () {
    function GetRoleForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetRoleForEditOutput.prototype.init = function (data) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : undefined;
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (var _i = 0, _a = data["permissions"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.permissions.push(FlatPermissionDto.fromJS(item));
                }
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (var _b = 0, _c = data["grantedPermissionNames"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.grantedPermissionNames.push(item);
                }
            }
            if (data["ticketPriceIds"] && data["ticketPriceIds"].constructor === Array) {
                this.ticketPriceIds = [];
                for (var _d = 0, _e = data["ticketPriceIds"]; _d < _e.length; _d++) {
                    var item = _e[_d];
                    this.ticketPriceIds.push(item);
                }
            }
        }
    };
    GetRoleForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    };
    GetRoleForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : undefined;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (var _i = 0, _a = this.permissions; _i < _a.length; _i++) {
                var item = _a[_i];
                data["permissions"].push(item.toJSON());
            }
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (var _b = 0, _c = this.grantedPermissionNames; _b < _c.length; _b++) {
                var item = _c[_b];
                data["grantedPermissionNames"].push(item);
            }
        }
        if (this.ticketPriceIds && this.ticketPriceIds.constructor === Array) {
            data["ticketPriceIds"] = [];
            for (var _d = 0, _e = this.ticketPriceIds; _d < _e.length; _d++) {
                var item = _e[_d];
                data["ticketPriceIds"].push(item);
            }
        }
        return data;
    };
    GetRoleForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetRoleForEditOutput();
        result.init(json);
        return result;
    };
    return GetRoleForEditOutput;
}());
exports.GetRoleForEditOutput = GetRoleForEditOutput;
var FlatPermissionDto = /** @class */ (function () {
    function FlatPermissionDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FlatPermissionDto.prototype.init = function (data) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    };
    FlatPermissionDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FlatPermissionDto();
        result.init(data);
        return result;
    };
    FlatPermissionDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data;
    };
    FlatPermissionDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FlatPermissionDto();
        result.init(json);
        return result;
    };
    return FlatPermissionDto;
}());
exports.FlatPermissionDto = FlatPermissionDto;
var PagedResultDtoOfRoleListDto = /** @class */ (function () {
    function PagedResultDtoOfRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfRoleListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RoleListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfRoleListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfRoleListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfRoleListDto;
}());
exports.PagedResultDtoOfRoleListDto = PagedResultDtoOfRoleListDto;
var UpdateRolePermissionsInput = /** @class */ (function () {
    function UpdateRolePermissionsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.grantedPermissionNames = [];
        }
    }
    UpdateRolePermissionsInput.prototype.init = function (data) {
        if (data) {
            this.roleId = data["roleId"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (var _i = 0, _a = data["grantedPermissionNames"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    };
    UpdateRolePermissionsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateRolePermissionsInput();
        result.init(data);
        return result;
    };
    UpdateRolePermissionsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (var _i = 0, _a = this.grantedPermissionNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    };
    UpdateRolePermissionsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateRolePermissionsInput();
        result.init(json);
        return result;
    };
    return UpdateRolePermissionsInput;
}());
exports.UpdateRolePermissionsInput = UpdateRolePermissionsInput;
var CreateOrUpdateRouteInput = /** @class */ (function () {
    function CreateOrUpdateRouteInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.route = new RouteEditDto();
        }
    }
    CreateOrUpdateRouteInput.prototype.init = function (data) {
        if (data) {
            this.route = data["route"] ? RouteEditDto.fromJS(data["route"]) : new RouteEditDto();
        }
    };
    CreateOrUpdateRouteInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateRouteInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateRouteInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["route"] = this.route ? this.route.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateRouteInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateRouteInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateRouteInput;
}());
exports.CreateOrUpdateRouteInput = CreateOrUpdateRouteInput;
var RouteEditDto = /** @class */ (function () {
    function RouteEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RouteEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.routeName = data["routeName"];
            this.lineCode = data["lineCode"];
            this.lineInfo = data["lineInfo"];
            this.lineImage = data["lineImage"];
            this.startPosition = data["startPosition"];
            this.endPosition = data["endPosition"];
            this.auditStatus = data["auditStatus"];
            this.startWharfId = data["startWharfId"];
            this.endWharfId = data["endWharfId"];
        }
    };
    RouteEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RouteEditDto();
        result.init(data);
        return result;
    };
    RouteEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["routeName"] = this.routeName;
        data["lineCode"] = this.lineCode;
        data["lineInfo"] = this.lineInfo;
        data["lineImage"] = this.lineImage;
        data["startPosition"] = this.startPosition;
        data["endPosition"] = this.endPosition;
        data["auditStatus"] = this.auditStatus;
        data["startWharfId"] = this.startWharfId;
        data["endWharfId"] = this.endWharfId;
        return data;
    };
    RouteEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RouteEditDto();
        result.init(json);
        return result;
    };
    return RouteEditDto;
}());
exports.RouteEditDto = RouteEditDto;
var RouteListDto = /** @class */ (function () {
    function RouteListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RouteListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.routeName = data["routeName"];
            this.lineCode = data["lineCode"];
            this.lineInfo = data["lineInfo"];
            this.lineImage = data["lineImage"];
            this.startPosition = data["startPosition"];
            this.endPosition = data["endPosition"];
            this.auditStatus = data["auditStatus"];
            this.startWharfId = data["startWharfId"];
            this.startWharf = data["startWharf"] ? Wharf.fromJS(data["startWharf"]) : undefined;
            this.endWharfId = data["endWharfId"];
            this.endWharf = data["endWharf"] ? Wharf.fromJS(data["endWharf"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    RouteListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RouteListDto();
        result.init(data);
        return result;
    };
    RouteListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["routeName"] = this.routeName;
        data["lineCode"] = this.lineCode;
        data["lineInfo"] = this.lineInfo;
        data["lineImage"] = this.lineImage;
        data["startPosition"] = this.startPosition;
        data["endPosition"] = this.endPosition;
        data["auditStatus"] = this.auditStatus;
        data["startWharfId"] = this.startWharfId;
        data["startWharf"] = this.startWharf ? this.startWharf.toJSON() : undefined;
        data["endWharfId"] = this.endWharfId;
        data["endWharf"] = this.endWharf ? this.endWharf.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    RouteListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RouteListDto();
        result.init(json);
        return result;
    };
    return RouteListDto;
}());
exports.RouteListDto = RouteListDto;
var GetRouteForEditOutput = /** @class */ (function () {
    function GetRouteForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetRouteForEditOutput.prototype.init = function (data) {
        if (data) {
            this.route = data["route"] ? RouteEditDto.fromJS(data["route"]) : undefined;
        }
    };
    GetRouteForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetRouteForEditOutput();
        result.init(data);
        return result;
    };
    GetRouteForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["route"] = this.route ? this.route.toJSON() : undefined;
        return data;
    };
    GetRouteForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetRouteForEditOutput();
        result.init(json);
        return result;
    };
    return GetRouteForEditOutput;
}());
exports.GetRouteForEditOutput = GetRouteForEditOutput;
var GetRoutesInput = /** @class */ (function () {
    function GetRoutesInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetRoutesInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetRoutesInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetRoutesInput();
        result.init(data);
        return result;
    };
    GetRoutesInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetRoutesInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetRoutesInput();
        result.init(json);
        return result;
    };
    return GetRoutesInput;
}());
exports.GetRoutesInput = GetRoutesInput;
var PagedResultDtoOfRouteListDto = /** @class */ (function () {
    function PagedResultDtoOfRouteListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfRouteListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(RouteListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfRouteListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfRouteListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfRouteListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfRouteListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfRouteListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfRouteListDto;
}());
exports.PagedResultDtoOfRouteListDto = PagedResultDtoOfRouteListDto;
var CreateOrUpdateScenicSpotInput = /** @class */ (function () {
    function CreateOrUpdateScenicSpotInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.scenicSpot = new ScenicSpotEditDto();
        }
    }
    CreateOrUpdateScenicSpotInput.prototype.init = function (data) {
        if (data) {
            this.scenicSpot = data["scenicSpot"] ? ScenicSpotEditDto.fromJS(data["scenicSpot"]) : new ScenicSpotEditDto();
        }
    };
    CreateOrUpdateScenicSpotInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateScenicSpotInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateScenicSpotInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["scenicSpot"] = this.scenicSpot ? this.scenicSpot.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateScenicSpotInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateScenicSpotInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateScenicSpotInput;
}());
exports.CreateOrUpdateScenicSpotInput = CreateOrUpdateScenicSpotInput;
var ScenicSpotEditDto = /** @class */ (function () {
    function ScenicSpotEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScenicSpotEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.scenicSpotName = data["scenicSpotName"];
            this.parentId = data["parentId"];
            this.scenicSpotInfo = data["scenicSpotInfo"];
        }
    };
    ScenicSpotEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScenicSpotEditDto();
        result.init(data);
        return result;
    };
    ScenicSpotEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scenicSpotName"] = this.scenicSpotName;
        data["parentId"] = this.parentId;
        data["scenicSpotInfo"] = this.scenicSpotInfo;
        return data;
    };
    ScenicSpotEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScenicSpotEditDto();
        result.init(json);
        return result;
    };
    return ScenicSpotEditDto;
}());
exports.ScenicSpotEditDto = ScenicSpotEditDto;
var ScenicSpotListDto = /** @class */ (function () {
    function ScenicSpotListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScenicSpotListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.scenicSpotName = data["scenicSpotName"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? ScenicSpot.fromJS(data["parent"]) : undefined;
            this.scenicSpotInfo = data["scenicSpotInfo"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ScenicSpotListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScenicSpotListDto();
        result.init(data);
        return result;
    };
    ScenicSpotListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["scenicSpotName"] = this.scenicSpotName;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["scenicSpotInfo"] = this.scenicSpotInfo;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ScenicSpotListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScenicSpotListDto();
        result.init(json);
        return result;
    };
    return ScenicSpotListDto;
}());
exports.ScenicSpotListDto = ScenicSpotListDto;
var ScenicSpot = /** @class */ (function () {
    function ScenicSpot(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScenicSpot.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.scenicSpotName = data["scenicSpotName"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? ScenicSpot.fromJS(data["parent"]) : undefined;
            this.scenicSpotInfo = data["scenicSpotInfo"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ScenicSpot.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScenicSpot();
        result.init(data);
        return result;
    };
    ScenicSpot.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["scenicSpotName"] = this.scenicSpotName;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : undefined;
        data["scenicSpotInfo"] = this.scenicSpotInfo;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ScenicSpot.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScenicSpot();
        result.init(json);
        return result;
    };
    return ScenicSpot;
}());
exports.ScenicSpot = ScenicSpot;
var GetScenicSpotForEditOutput = /** @class */ (function () {
    function GetScenicSpotForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetScenicSpotForEditOutput.prototype.init = function (data) {
        if (data) {
            this.scenicSpot = data["scenicSpot"] ? ScenicSpotEditDto.fromJS(data["scenicSpot"]) : undefined;
        }
    };
    GetScenicSpotForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetScenicSpotForEditOutput();
        result.init(data);
        return result;
    };
    GetScenicSpotForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["scenicSpot"] = this.scenicSpot ? this.scenicSpot.toJSON() : undefined;
        return data;
    };
    GetScenicSpotForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetScenicSpotForEditOutput();
        result.init(json);
        return result;
    };
    return GetScenicSpotForEditOutput;
}());
exports.GetScenicSpotForEditOutput = GetScenicSpotForEditOutput;
var PagedResultDtoOfScenicSpotListDto = /** @class */ (function () {
    function PagedResultDtoOfScenicSpotListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfScenicSpotListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScenicSpotListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfScenicSpotListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfScenicSpotListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfScenicSpotListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfScenicSpotListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfScenicSpotListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfScenicSpotListDto;
}());
exports.PagedResultDtoOfScenicSpotListDto = PagedResultDtoOfScenicSpotListDto;
var CreateOrUpdateScheduleInput = /** @class */ (function () {
    function CreateOrUpdateScheduleInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.schedule = new ScheduleEditDto();
        }
    }
    CreateOrUpdateScheduleInput.prototype.init = function (data) {
        if (data) {
            this.schedule = data["schedule"] ? ScheduleEditDto.fromJS(data["schedule"]) : new ScheduleEditDto();
        }
    };
    CreateOrUpdateScheduleInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateScheduleInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateScheduleInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateScheduleInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateScheduleInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateScheduleInput;
}());
exports.CreateOrUpdateScheduleInput = CreateOrUpdateScheduleInput;
var ScheduleEditDto = /** @class */ (function () {
    function ScheduleEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleEditDto.prototype.init = function (data) {
        if (data) {
            this.scheduleCode = data["scheduleCode"];
            this.id = data["id"];
            this.saleDate = data["saleDate"] ? moment(data["saleDate"].toString()) : undefined;
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : undefined;
            this.seatQuantity = data["seatQuantity"];
            this.surplusQuantity = data["surplusQuantity"];
            this.scheduleStatus = data["scheduleStatus"];
            this.auditStatus = data["auditStatus"];
            this.routeId = data["routeId"];
            this.boatId = data["boatId"];
            this.checkStartTime = data["checkStartTime"] ? moment(data["checkStartTime"].toString()) : undefined;
            this.checkEndTime = data["checkEndTime"] ? moment(data["checkEndTime"].toString()) : undefined;
            this.reserveQuantity = data["reserveQuantity"];
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            if (data["ticketIds"] && data["ticketIds"].constructor === Array) {
                this.ticketIds = [];
                for (var _i = 0, _a = data["ticketIds"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.ticketIds.push(item);
                }
            }
            this.saleDateStr = data["saleDateStr"];
            this.startTimeStr = data["startTimeStr"];
            this.endTimeStr = data["endTimeStr"];
            this.checkStartTimeStr = data["checkStartTimeStr"];
            this.checkEndTimeStr = data["checkEndTimeStr"];
        }
    };
    ScheduleEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleEditDto();
        result.init(data);
        return result;
    };
    ScheduleEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["scheduleCode"] = this.scheduleCode;
        data["id"] = this.id;
        data["saleDate"] = this.saleDate ? this.saleDate.toISOString() : undefined;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        data["seatQuantity"] = this.seatQuantity;
        data["surplusQuantity"] = this.surplusQuantity;
        data["scheduleStatus"] = this.scheduleStatus;
        data["auditStatus"] = this.auditStatus;
        data["routeId"] = this.routeId;
        data["boatId"] = this.boatId;
        data["checkStartTime"] = this.checkStartTime ? this.checkStartTime.toISOString() : undefined;
        data["checkEndTime"] = this.checkEndTime ? this.checkEndTime.toISOString() : undefined;
        data["reserveQuantity"] = this.reserveQuantity;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        if (this.ticketIds && this.ticketIds.constructor === Array) {
            data["ticketIds"] = [];
            for (var _i = 0, _a = this.ticketIds; _i < _a.length; _i++) {
                var item = _a[_i];
                data["ticketIds"].push(item);
            }
        }
        data["saleDateStr"] = this.saleDateStr;
        data["startTimeStr"] = this.startTimeStr;
        data["endTimeStr"] = this.endTimeStr;
        data["checkStartTimeStr"] = this.checkStartTimeStr;
        data["checkEndTimeStr"] = this.checkEndTimeStr;
        return data;
    };
    ScheduleEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleEditDto();
        result.init(json);
        return result;
    };
    return ScheduleEditDto;
}());
exports.ScheduleEditDto = ScheduleEditDto;
var ScheduleListDto = /** @class */ (function () {
    function ScheduleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.scheduleCode = data["scheduleCode"];
            this.saleDate = data["saleDate"] ? moment(data["saleDate"].toString()) : undefined;
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : undefined;
            this.seatQuantity = data["seatQuantity"];
            this.surplusQuantity = data["surplusQuantity"];
            this.scheduleStatus = data["scheduleStatus"];
            this.auditStatus = data["auditStatus"];
            this.reserveQuantity = data["reserveQuantity"];
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            this.routeId = data["routeId"];
            this.boatId = data["boatId"];
            this.checkStartTime = data["checkStartTime"] ? moment(data["checkStartTime"].toString()) : undefined;
            this.checkEndTime = data["checkEndTime"] ? moment(data["checkEndTime"].toString()) : undefined;
            this.ticketNames = data["ticketNames"];
            if (data["ticketIds"] && data["ticketIds"].constructor === Array) {
                this.ticketIds = [];
                for (var _i = 0, _a = data["ticketIds"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.ticketIds.push(item);
                }
            }
            if (data["ticketPrices"] && data["ticketPrices"].constructor === Array) {
                this.ticketPrices = [];
                for (var _b = 0, _c = data["ticketPrices"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.ticketPrices.push(TicketPriceListDto.fromJS(item));
                }
            }
            this.saleDateStr = data["saleDateStr"];
            this.startTimeStr = data["startTimeStr"];
            this.endTimeStr = data["endTimeStr"];
            this.checkStartTimeStr = data["checkStartTimeStr"];
            this.checkEndTimeStr = data["checkEndTimeStr"];
            this.creationTimeStr = data["creationTimeStr"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    ScheduleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleListDto();
        result.init(data);
        return result;
    };
    ScheduleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["scheduleCode"] = this.scheduleCode;
        data["saleDate"] = this.saleDate ? this.saleDate.toISOString() : undefined;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        data["seatQuantity"] = this.seatQuantity;
        data["surplusQuantity"] = this.surplusQuantity;
        data["scheduleStatus"] = this.scheduleStatus;
        data["auditStatus"] = this.auditStatus;
        data["reserveQuantity"] = this.reserveQuantity;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        data["routeId"] = this.routeId;
        data["boatId"] = this.boatId;
        data["checkStartTime"] = this.checkStartTime ? this.checkStartTime.toISOString() : undefined;
        data["checkEndTime"] = this.checkEndTime ? this.checkEndTime.toISOString() : undefined;
        data["ticketNames"] = this.ticketNames;
        if (this.ticketIds && this.ticketIds.constructor === Array) {
            data["ticketIds"] = [];
            for (var _i = 0, _a = this.ticketIds; _i < _a.length; _i++) {
                var item = _a[_i];
                data["ticketIds"].push(item);
            }
        }
        if (this.ticketPrices && this.ticketPrices.constructor === Array) {
            data["ticketPrices"] = [];
            for (var _b = 0, _c = this.ticketPrices; _b < _c.length; _b++) {
                var item = _c[_b];
                data["ticketPrices"].push(item.toJSON());
            }
        }
        data["saleDateStr"] = this.saleDateStr;
        data["startTimeStr"] = this.startTimeStr;
        data["endTimeStr"] = this.endTimeStr;
        data["checkStartTimeStr"] = this.checkStartTimeStr;
        data["checkEndTimeStr"] = this.checkEndTimeStr;
        data["creationTimeStr"] = this.creationTimeStr;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    ScheduleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleListDto();
        result.init(json);
        return result;
    };
    return ScheduleListDto;
}());
exports.ScheduleListDto = ScheduleListDto;
var TicketPriceListDto = /** @class */ (function () {
    function TicketPriceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketPriceListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.isEnabled = data["isEnabled"];
            this.sort = data["sort"];
            this.price = data["price"];
            this.discount = data["discount"];
            this.upperTime = data["upperTime"] ? moment(data["upperTime"].toString()) : undefined;
            this.rDiscount = data["rDiscount"];
            this.lowerTime = data["lowerTime"] ? moment(data["lowerTime"].toString()) : undefined;
            this.position = data["position"];
            this.ticketName = data["ticketName"];
            this.ticketIntroduce = data["ticketIntroduce"] ? TicketIntroduce.fromJS(data["ticketIntroduce"]) : undefined;
            this.upperTimeStr = data["upperTimeStr"];
            this.lowerTimeStr = data["lowerTimeStr"];
            this.creationTimeStr = data["creationTimeStr"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketPriceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketPriceListDto();
        result.init(data);
        return result;
    };
    TicketPriceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["isEnabled"] = this.isEnabled;
        data["sort"] = this.sort;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["upperTime"] = this.upperTime ? this.upperTime.toISOString() : undefined;
        data["rDiscount"] = this.rDiscount;
        data["lowerTime"] = this.lowerTime ? this.lowerTime.toISOString() : undefined;
        data["position"] = this.position;
        data["ticketName"] = this.ticketName;
        data["ticketIntroduce"] = this.ticketIntroduce ? this.ticketIntroduce.toJSON() : undefined;
        data["upperTimeStr"] = this.upperTimeStr;
        data["lowerTimeStr"] = this.lowerTimeStr;
        data["creationTimeStr"] = this.creationTimeStr;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketPriceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketPriceListDto();
        result.init(json);
        return result;
    };
    return TicketPriceListDto;
}());
exports.TicketPriceListDto = TicketPriceListDto;
var TicketIntroduce = /** @class */ (function () {
    function TicketIntroduce(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketIntroduce.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.scenicSpotId = data["scenicSpotId"];
            this.scenicSpot = data["scenicSpot"] ? ScenicSpot.fromJS(data["scenicSpot"]) : undefined;
            this.tradeName = data["tradeName"];
            this.tradeInfo = data["tradeInfo"];
            this.address = data["address"];
            this.coverMap = data["coverMap"];
            this.abstract = data["abstract"];
            this.notice = data["notice"];
            this.refundRule = data["refundRule"];
            this.isOnLine = data["isOnLine"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketIntroduce.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketIntroduce();
        result.init(data);
        return result;
    };
    TicketIntroduce.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["scenicSpotId"] = this.scenicSpotId;
        data["scenicSpot"] = this.scenicSpot ? this.scenicSpot.toJSON() : undefined;
        data["tradeName"] = this.tradeName;
        data["tradeInfo"] = this.tradeInfo;
        data["address"] = this.address;
        data["coverMap"] = this.coverMap;
        data["abstract"] = this.abstract;
        data["notice"] = this.notice;
        data["refundRule"] = this.refundRule;
        data["isOnLine"] = this.isOnLine;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketIntroduce.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketIntroduce();
        result.init(json);
        return result;
    };
    return TicketIntroduce;
}());
exports.TicketIntroduce = TicketIntroduce;
var GetScheduleForEditOutput = /** @class */ (function () {
    function GetScheduleForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetScheduleForEditOutput.prototype.init = function (data) {
        if (data) {
            this.schedule = data["schedule"] ? ScheduleEditDto.fromJS(data["schedule"]) : undefined;
        }
    };
    GetScheduleForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetScheduleForEditOutput();
        result.init(data);
        return result;
    };
    GetScheduleForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        return data;
    };
    GetScheduleForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetScheduleForEditOutput();
        result.init(json);
        return result;
    };
    return GetScheduleForEditOutput;
}());
exports.GetScheduleForEditOutput = GetScheduleForEditOutput;
var GetSchedulesInput = /** @class */ (function () {
    function GetSchedulesInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetSchedulesInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.isEnabled = data["isEnabled"];
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetSchedulesInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetSchedulesInput();
        result.init(data);
        return result;
    };
    GetSchedulesInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["isEnabled"] = this.isEnabled;
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetSchedulesInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetSchedulesInput();
        result.init(json);
        return result;
    };
    return GetSchedulesInput;
}());
exports.GetSchedulesInput = GetSchedulesInput;
var PagedResultDtoOfScheduleListDto = /** @class */ (function () {
    function PagedResultDtoOfScheduleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfScheduleListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfScheduleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfScheduleListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfScheduleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfScheduleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfScheduleListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfScheduleListDto;
}());
exports.PagedResultDtoOfScheduleListDto = PagedResultDtoOfScheduleListDto;
var GetCurrentLoginInformationsOutput = /** @class */ (function () {
    function GetCurrentLoginInformationsOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetCurrentLoginInformationsOutput.prototype.init = function (data) {
        if (data) {
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : undefined;
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : undefined;
        }
    };
    GetCurrentLoginInformationsOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    };
    GetCurrentLoginInformationsOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : undefined;
        data["application"] = this.application ? this.application.toJSON() : undefined;
        return data;
    };
    GetCurrentLoginInformationsOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetCurrentLoginInformationsOutput();
        result.init(json);
        return result;
    };
    return GetCurrentLoginInformationsOutput;
}());
exports.GetCurrentLoginInformationsOutput = GetCurrentLoginInformationsOutput;
var UserLoginInfoDto = /** @class */ (function () {
    function UserLoginInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserLoginInfoDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.id = data["id"];
        }
    };
    UserLoginInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserLoginInfoDto();
        result.init(data);
        return result;
    };
    UserLoginInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["id"] = this.id;
        return data;
    };
    UserLoginInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserLoginInfoDto();
        result.init(json);
        return result;
    };
    return UserLoginInfoDto;
}());
exports.UserLoginInfoDto = UserLoginInfoDto;
var TenantLoginInfoDto = /** @class */ (function () {
    function TenantLoginInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantLoginInfoDto.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.logoId = data["logoId"];
            this.edition = data["edition"] ? EditionInfoDto.fromJS(data["edition"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creationTimeString = data["creationTimeString"];
            this.id = data["id"];
        }
    };
    TenantLoginInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    };
    TenantLoginInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["logoId"] = this.logoId;
        data["edition"] = this.edition ? this.edition.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creationTimeString"] = this.creationTimeString;
        data["id"] = this.id;
        return data;
    };
    TenantLoginInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantLoginInfoDto();
        result.init(json);
        return result;
    };
    return TenantLoginInfoDto;
}());
exports.TenantLoginInfoDto = TenantLoginInfoDto;
var ApplicationInfoDto = /** @class */ (function () {
    function ApplicationInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ApplicationInfoDto.prototype.init = function (data) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : undefined;
            if (data["features"]) {
                this.features = {};
                for (var key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key];
                }
            }
        }
    };
    ApplicationInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ApplicationInfoDto();
        result.init(data);
        return result;
    };
    ApplicationInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : undefined;
        if (this.features) {
            data["features"] = {};
            for (var key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data;
    };
    ApplicationInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ApplicationInfoDto();
        result.init(json);
        return result;
    };
    return ApplicationInfoDto;
}());
exports.ApplicationInfoDto = ApplicationInfoDto;
var EditionInfoDto = /** @class */ (function () {
    function EditionInfoDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EditionInfoDto.prototype.init = function (data) {
        if (data) {
            this.displayName = data["displayName"];
            this.trialDayCount = data["trialDayCount"];
            this.monthlyPrice = data["monthlyPrice"];
            this.annualPrice = data["annualPrice"];
            this.isHighestEdition = data["isHighestEdition"];
            this.isFree = data["isFree"];
            this.id = data["id"];
        }
    };
    EditionInfoDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EditionInfoDto();
        result.init(data);
        return result;
    };
    EditionInfoDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["trialDayCount"] = this.trialDayCount;
        data["monthlyPrice"] = this.monthlyPrice;
        data["annualPrice"] = this.annualPrice;
        data["isHighestEdition"] = this.isHighestEdition;
        data["isFree"] = this.isFree;
        data["id"] = this.id;
        return data;
    };
    EditionInfoDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EditionInfoDto();
        result.init(json);
        return result;
    };
    return EditionInfoDto;
}());
exports.EditionInfoDto = EditionInfoDto;
var AbpUserConfigurationDto = /** @class */ (function () {
    function AbpUserConfigurationDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserConfigurationDto.prototype.init = function (data) {
        if (data) {
            this.multiTenancy = data["multiTenancy"] ? AbpMultiTenancyConfigDto.fromJS(data["multiTenancy"]) : undefined;
            this.session = data["session"] ? AbpUserSessionConfigDto.fromJS(data["session"]) : undefined;
            this.localization = data["localization"] ? AbpUserLocalizationConfigDto.fromJS(data["localization"]) : undefined;
            this.features = data["features"] ? AbpUserFeatureConfigDto.fromJS(data["features"]) : undefined;
            this.auth = data["auth"] ? AbpUserAuthConfigDto.fromJS(data["auth"]) : undefined;
            this.nav = data["nav"] ? AbpUserNavConfigDto.fromJS(data["nav"]) : undefined;
            this.setting = data["setting"] ? AbpUserSettingConfigDto.fromJS(data["setting"]) : undefined;
            this.clock = data["clock"] ? AbpUserClockConfigDto.fromJS(data["clock"]) : undefined;
            this.timing = data["timing"] ? AbpUserTimingConfigDto.fromJS(data["timing"]) : undefined;
            this.security = data["security"] ? AbpUserSecurityConfigDto.fromJS(data["security"]) : undefined;
            if (data["custom"]) {
                this.custom = {};
                for (var key in data["custom"]) {
                    if (data["custom"].hasOwnProperty(key))
                        this.custom[key] = data["custom"][key];
                }
            }
        }
    };
    AbpUserConfigurationDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserConfigurationDto();
        result.init(data);
        return result;
    };
    AbpUserConfigurationDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["multiTenancy"] = this.multiTenancy ? this.multiTenancy.toJSON() : undefined;
        data["session"] = this.session ? this.session.toJSON() : undefined;
        data["localization"] = this.localization ? this.localization.toJSON() : undefined;
        data["features"] = this.features ? this.features.toJSON() : undefined;
        data["auth"] = this.auth ? this.auth.toJSON() : undefined;
        data["nav"] = this.nav ? this.nav.toJSON() : undefined;
        data["setting"] = this.setting ? this.setting.toJSON() : undefined;
        data["clock"] = this.clock ? this.clock.toJSON() : undefined;
        data["timing"] = this.timing ? this.timing.toJSON() : undefined;
        data["security"] = this.security ? this.security.toJSON() : undefined;
        if (this.custom) {
            data["custom"] = {};
            for (var key in this.custom) {
                if (this.custom.hasOwnProperty(key))
                    data["custom"][key] = this.custom[key];
            }
        }
        return data;
    };
    AbpUserConfigurationDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserConfigurationDto();
        result.init(json);
        return result;
    };
    return AbpUserConfigurationDto;
}());
exports.AbpUserConfigurationDto = AbpUserConfigurationDto;
var AbpMultiTenancyConfigDto = /** @class */ (function () {
    function AbpMultiTenancyConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpMultiTenancyConfigDto.prototype.init = function (data) {
        if (data) {
            this.isEnabled = data["isEnabled"];
            this.ignoreFeatureCheckForHostUsers = data["ignoreFeatureCheckForHostUsers"];
            this.sides = data["sides"] ? AbpMultiTenancySidesConfigDto.fromJS(data["sides"]) : undefined;
        }
    };
    AbpMultiTenancyConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpMultiTenancyConfigDto();
        result.init(data);
        return result;
    };
    AbpMultiTenancyConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        data["ignoreFeatureCheckForHostUsers"] = this.ignoreFeatureCheckForHostUsers;
        data["sides"] = this.sides ? this.sides.toJSON() : undefined;
        return data;
    };
    AbpMultiTenancyConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpMultiTenancyConfigDto();
        result.init(json);
        return result;
    };
    return AbpMultiTenancyConfigDto;
}());
exports.AbpMultiTenancyConfigDto = AbpMultiTenancyConfigDto;
var AbpUserSessionConfigDto = /** @class */ (function () {
    function AbpUserSessionConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserSessionConfigDto.prototype.init = function (data) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.multiTenancySide = data["multiTenancySide"];
        }
    };
    AbpUserSessionConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserSessionConfigDto();
        result.init(data);
        return result;
    };
    AbpUserSessionConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["multiTenancySide"] = this.multiTenancySide;
        return data;
    };
    AbpUserSessionConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserSessionConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserSessionConfigDto;
}());
exports.AbpUserSessionConfigDto = AbpUserSessionConfigDto;
var AbpUserLocalizationConfigDto = /** @class */ (function () {
    function AbpUserLocalizationConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserLocalizationConfigDto.prototype.init = function (data) {
        if (data) {
            this.currentCulture = data["currentCulture"] ? AbpUserCurrentCultureConfigDto.fromJS(data["currentCulture"]) : undefined;
            if (data["languages"] && data["languages"].constructor === Array) {
                this.languages = [];
                for (var _i = 0, _a = data["languages"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.languages.push(LanguageInfo.fromJS(item));
                }
            }
            this.currentLanguage = data["currentLanguage"] ? LanguageInfo.fromJS(data["currentLanguage"]) : undefined;
            if (data["sources"] && data["sources"].constructor === Array) {
                this.sources = [];
                for (var _b = 0, _c = data["sources"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.sources.push(AbpLocalizationSourceDto.fromJS(item));
                }
            }
            if (data["values"]) {
                this.values = {};
                for (var key in data["values"]) {
                    if (data["values"].hasOwnProperty(key))
                        this.values[key] = data["values"][key] !== undefined ? data["values"][key] : {};
                }
            }
        }
    };
    AbpUserLocalizationConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserLocalizationConfigDto();
        result.init(data);
        return result;
    };
    AbpUserLocalizationConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["currentCulture"] = this.currentCulture ? this.currentCulture.toJSON() : undefined;
        if (this.languages && this.languages.constructor === Array) {
            data["languages"] = [];
            for (var _i = 0, _a = this.languages; _i < _a.length; _i++) {
                var item = _a[_i];
                data["languages"].push(item.toJSON());
            }
        }
        data["currentLanguage"] = this.currentLanguage ? this.currentLanguage.toJSON() : undefined;
        if (this.sources && this.sources.constructor === Array) {
            data["sources"] = [];
            for (var _b = 0, _c = this.sources; _b < _c.length; _b++) {
                var item = _c[_b];
                data["sources"].push(item.toJSON());
            }
        }
        if (this.values) {
            data["values"] = {};
            for (var key in this.values) {
                if (this.values.hasOwnProperty(key))
                    data["values"][key] = this.values[key];
            }
        }
        return data;
    };
    AbpUserLocalizationConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserLocalizationConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserLocalizationConfigDto;
}());
exports.AbpUserLocalizationConfigDto = AbpUserLocalizationConfigDto;
var AbpUserFeatureConfigDto = /** @class */ (function () {
    function AbpUserFeatureConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserFeatureConfigDto.prototype.init = function (data) {
        if (data) {
            if (data["allFeatures"]) {
                this.allFeatures = {};
                for (var key in data["allFeatures"]) {
                    if (data["allFeatures"].hasOwnProperty(key))
                        this.allFeatures[key] = data["allFeatures"][key] ? AbpStringValueDto.fromJS(data["allFeatures"][key]) : new AbpStringValueDto();
                }
            }
        }
    };
    AbpUserFeatureConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserFeatureConfigDto();
        result.init(data);
        return result;
    };
    AbpUserFeatureConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.allFeatures) {
            data["allFeatures"] = {};
            for (var key in this.allFeatures) {
                if (this.allFeatures.hasOwnProperty(key))
                    data["allFeatures"][key] = this.allFeatures[key] ? this.allFeatures[key].toJSON() : undefined;
            }
        }
        return data;
    };
    AbpUserFeatureConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserFeatureConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserFeatureConfigDto;
}());
exports.AbpUserFeatureConfigDto = AbpUserFeatureConfigDto;
var AbpUserAuthConfigDto = /** @class */ (function () {
    function AbpUserAuthConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserAuthConfigDto.prototype.init = function (data) {
        if (data) {
            if (data["allPermissions"]) {
                this.allPermissions = {};
                for (var key in data["allPermissions"]) {
                    if (data["allPermissions"].hasOwnProperty(key))
                        this.allPermissions[key] = data["allPermissions"][key];
                }
            }
            if (data["grantedPermissions"]) {
                this.grantedPermissions = {};
                for (var key in data["grantedPermissions"]) {
                    if (data["grantedPermissions"].hasOwnProperty(key))
                        this.grantedPermissions[key] = data["grantedPermissions"][key];
                }
            }
        }
    };
    AbpUserAuthConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserAuthConfigDto();
        result.init(data);
        return result;
    };
    AbpUserAuthConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.allPermissions) {
            data["allPermissions"] = {};
            for (var key in this.allPermissions) {
                if (this.allPermissions.hasOwnProperty(key))
                    data["allPermissions"][key] = this.allPermissions[key];
            }
        }
        if (this.grantedPermissions) {
            data["grantedPermissions"] = {};
            for (var key in this.grantedPermissions) {
                if (this.grantedPermissions.hasOwnProperty(key))
                    data["grantedPermissions"][key] = this.grantedPermissions[key];
            }
        }
        return data;
    };
    AbpUserAuthConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserAuthConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserAuthConfigDto;
}());
exports.AbpUserAuthConfigDto = AbpUserAuthConfigDto;
var AbpUserNavConfigDto = /** @class */ (function () {
    function AbpUserNavConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserNavConfigDto.prototype.init = function (data) {
        if (data) {
            if (data["menus"]) {
                this.menus = {};
                for (var key in data["menus"]) {
                    if (data["menus"].hasOwnProperty(key))
                        this.menus[key] = data["menus"][key] ? UserMenu.fromJS(data["menus"][key]) : new UserMenu();
                }
            }
        }
    };
    AbpUserNavConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserNavConfigDto();
        result.init(data);
        return result;
    };
    AbpUserNavConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.menus) {
            data["menus"] = {};
            for (var key in this.menus) {
                if (this.menus.hasOwnProperty(key))
                    data["menus"][key] = this.menus[key] ? this.menus[key].toJSON() : undefined;
            }
        }
        return data;
    };
    AbpUserNavConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserNavConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserNavConfigDto;
}());
exports.AbpUserNavConfigDto = AbpUserNavConfigDto;
var AbpUserSettingConfigDto = /** @class */ (function () {
    function AbpUserSettingConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserSettingConfigDto.prototype.init = function (data) {
        if (data) {
            if (data["values"]) {
                this.values = {};
                for (var key in data["values"]) {
                    if (data["values"].hasOwnProperty(key))
                        this.values[key] = data["values"][key];
                }
            }
        }
    };
    AbpUserSettingConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserSettingConfigDto();
        result.init(data);
        return result;
    };
    AbpUserSettingConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data["values"] = {};
            for (var key in this.values) {
                if (this.values.hasOwnProperty(key))
                    data["values"][key] = this.values[key];
            }
        }
        return data;
    };
    AbpUserSettingConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserSettingConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserSettingConfigDto;
}());
exports.AbpUserSettingConfigDto = AbpUserSettingConfigDto;
var AbpUserClockConfigDto = /** @class */ (function () {
    function AbpUserClockConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserClockConfigDto.prototype.init = function (data) {
        if (data) {
            this.provider = data["provider"];
        }
    };
    AbpUserClockConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserClockConfigDto();
        result.init(data);
        return result;
    };
    AbpUserClockConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        return data;
    };
    AbpUserClockConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserClockConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserClockConfigDto;
}());
exports.AbpUserClockConfigDto = AbpUserClockConfigDto;
var AbpUserTimingConfigDto = /** @class */ (function () {
    function AbpUserTimingConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserTimingConfigDto.prototype.init = function (data) {
        if (data) {
            this.timeZoneInfo = data["timeZoneInfo"] ? AbpUserTimeZoneConfigDto.fromJS(data["timeZoneInfo"]) : undefined;
        }
    };
    AbpUserTimingConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserTimingConfigDto();
        result.init(data);
        return result;
    };
    AbpUserTimingConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneInfo"] = this.timeZoneInfo ? this.timeZoneInfo.toJSON() : undefined;
        return data;
    };
    AbpUserTimingConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserTimingConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserTimingConfigDto;
}());
exports.AbpUserTimingConfigDto = AbpUserTimingConfigDto;
var AbpUserSecurityConfigDto = /** @class */ (function () {
    function AbpUserSecurityConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserSecurityConfigDto.prototype.init = function (data) {
        if (data) {
            this.antiForgery = data["antiForgery"] ? AbpUserAntiForgeryConfigDto.fromJS(data["antiForgery"]) : undefined;
        }
    };
    AbpUserSecurityConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserSecurityConfigDto();
        result.init(data);
        return result;
    };
    AbpUserSecurityConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["antiForgery"] = this.antiForgery ? this.antiForgery.toJSON() : undefined;
        return data;
    };
    AbpUserSecurityConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserSecurityConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserSecurityConfigDto;
}());
exports.AbpUserSecurityConfigDto = AbpUserSecurityConfigDto;
var AbpMultiTenancySidesConfigDto = /** @class */ (function () {
    function AbpMultiTenancySidesConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpMultiTenancySidesConfigDto.prototype.init = function (data) {
        if (data) {
            this.host = data["host"];
            this.tenant = data["tenant"];
        }
    };
    AbpMultiTenancySidesConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpMultiTenancySidesConfigDto();
        result.init(data);
        return result;
    };
    AbpMultiTenancySidesConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["host"] = this.host;
        data["tenant"] = this.tenant;
        return data;
    };
    AbpMultiTenancySidesConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpMultiTenancySidesConfigDto();
        result.init(json);
        return result;
    };
    return AbpMultiTenancySidesConfigDto;
}());
exports.AbpMultiTenancySidesConfigDto = AbpMultiTenancySidesConfigDto;
var MultiTenancySides;
(function (MultiTenancySides) {
    MultiTenancySides[MultiTenancySides["Tenant"] = "Tenant"] = "Tenant";
    MultiTenancySides[MultiTenancySides["Host"] = "Host"] = "Host";
})(MultiTenancySides = exports.MultiTenancySides || (exports.MultiTenancySides = {}));
var AbpUserCurrentCultureConfigDto = /** @class */ (function () {
    function AbpUserCurrentCultureConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserCurrentCultureConfigDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
        }
    };
    AbpUserCurrentCultureConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserCurrentCultureConfigDto();
        result.init(data);
        return result;
    };
    AbpUserCurrentCultureConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data;
    };
    AbpUserCurrentCultureConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserCurrentCultureConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserCurrentCultureConfigDto;
}());
exports.AbpUserCurrentCultureConfigDto = AbpUserCurrentCultureConfigDto;
var LanguageInfo = /** @class */ (function () {
    function LanguageInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LanguageInfo.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.icon = data["icon"];
            this.isDefault = data["isDefault"];
            this.isDisabled = data["isDisabled"];
            this.isRightToLeft = data["isRightToLeft"];
        }
    };
    LanguageInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LanguageInfo();
        result.init(data);
        return result;
    };
    LanguageInfo.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["icon"] = this.icon;
        data["isDefault"] = this.isDefault;
        data["isDisabled"] = this.isDisabled;
        data["isRightToLeft"] = this.isRightToLeft;
        return data;
    };
    LanguageInfo.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LanguageInfo();
        result.init(json);
        return result;
    };
    return LanguageInfo;
}());
exports.LanguageInfo = LanguageInfo;
var AbpLocalizationSourceDto = /** @class */ (function () {
    function AbpLocalizationSourceDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpLocalizationSourceDto.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.type = data["type"];
        }
    };
    AbpLocalizationSourceDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpLocalizationSourceDto();
        result.init(data);
        return result;
    };
    AbpLocalizationSourceDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        return data;
    };
    AbpLocalizationSourceDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpLocalizationSourceDto();
        result.init(json);
        return result;
    };
    return AbpLocalizationSourceDto;
}());
exports.AbpLocalizationSourceDto = AbpLocalizationSourceDto;
var AbpStringValueDto = /** @class */ (function () {
    function AbpStringValueDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpStringValueDto.prototype.init = function (data) {
        if (data) {
            this.value = data["value"];
        }
    };
    AbpStringValueDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpStringValueDto();
        result.init(data);
        return result;
    };
    AbpStringValueDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    };
    AbpStringValueDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpStringValueDto();
        result.init(json);
        return result;
    };
    return AbpStringValueDto;
}());
exports.AbpStringValueDto = AbpStringValueDto;
var UserMenu = /** @class */ (function () {
    function UserMenu(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserMenu.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.customData = data["customData"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(UserMenuItem.fromJS(item));
                }
            }
        }
    };
    UserMenu.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserMenu();
        result.init(data);
        return result;
    };
    UserMenu.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["customData"] = this.customData;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    UserMenu.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserMenu();
        result.init(json);
        return result;
    };
    return UserMenu;
}());
exports.UserMenu = UserMenu;
var AbpUserTimeZoneConfigDto = /** @class */ (function () {
    function AbpUserTimeZoneConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserTimeZoneConfigDto.prototype.init = function (data) {
        if (data) {
            this.windows = data["windows"] ? AbpUserWindowsTimeZoneConfigDto.fromJS(data["windows"]) : undefined;
            this.iana = data["iana"] ? AbpUserIanaTimeZoneConfigDto.fromJS(data["iana"]) : undefined;
        }
    };
    AbpUserTimeZoneConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserTimeZoneConfigDto();
        result.init(data);
        return result;
    };
    AbpUserTimeZoneConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["windows"] = this.windows ? this.windows.toJSON() : undefined;
        data["iana"] = this.iana ? this.iana.toJSON() : undefined;
        return data;
    };
    AbpUserTimeZoneConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserTimeZoneConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserTimeZoneConfigDto;
}());
exports.AbpUserTimeZoneConfigDto = AbpUserTimeZoneConfigDto;
var AbpUserAntiForgeryConfigDto = /** @class */ (function () {
    function AbpUserAntiForgeryConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserAntiForgeryConfigDto.prototype.init = function (data) {
        if (data) {
            this.tokenCookieName = data["tokenCookieName"];
            this.tokenHeaderName = data["tokenHeaderName"];
        }
    };
    AbpUserAntiForgeryConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserAntiForgeryConfigDto();
        result.init(data);
        return result;
    };
    AbpUserAntiForgeryConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tokenCookieName"] = this.tokenCookieName;
        data["tokenHeaderName"] = this.tokenHeaderName;
        return data;
    };
    AbpUserAntiForgeryConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserAntiForgeryConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserAntiForgeryConfigDto;
}());
exports.AbpUserAntiForgeryConfigDto = AbpUserAntiForgeryConfigDto;
var UserMenuItem = /** @class */ (function () {
    function UserMenuItem(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserMenuItem.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.icon = data["icon"];
            this.displayName = data["displayName"];
            this.order = data["order"];
            this.url = data["url"];
            this.customData = data["customData"];
            this.target = data["target"];
            this.isEnabled = data["isEnabled"];
            this.isVisible = data["isVisible"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(UserMenuItem.fromJS(item));
                }
            }
        }
    };
    UserMenuItem.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserMenuItem();
        result.init(data);
        return result;
    };
    UserMenuItem.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["icon"] = this.icon;
        data["displayName"] = this.displayName;
        data["order"] = this.order;
        data["url"] = this.url;
        data["customData"] = this.customData;
        data["target"] = this.target;
        data["isEnabled"] = this.isEnabled;
        data["isVisible"] = this.isVisible;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    UserMenuItem.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserMenuItem();
        result.init(json);
        return result;
    };
    return UserMenuItem;
}());
exports.UserMenuItem = UserMenuItem;
var AbpUserWindowsTimeZoneConfigDto = /** @class */ (function () {
    function AbpUserWindowsTimeZoneConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserWindowsTimeZoneConfigDto.prototype.init = function (data) {
        if (data) {
            this.timeZoneId = data["timeZoneId"];
            this.baseUtcOffsetInMilliseconds = data["baseUtcOffsetInMilliseconds"];
            this.currentUtcOffsetInMilliseconds = data["currentUtcOffsetInMilliseconds"];
            this.isDaylightSavingTimeNow = data["isDaylightSavingTimeNow"];
        }
    };
    AbpUserWindowsTimeZoneConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserWindowsTimeZoneConfigDto();
        result.init(data);
        return result;
    };
    AbpUserWindowsTimeZoneConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneId"] = this.timeZoneId;
        data["baseUtcOffsetInMilliseconds"] = this.baseUtcOffsetInMilliseconds;
        data["currentUtcOffsetInMilliseconds"] = this.currentUtcOffsetInMilliseconds;
        data["isDaylightSavingTimeNow"] = this.isDaylightSavingTimeNow;
        return data;
    };
    AbpUserWindowsTimeZoneConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserWindowsTimeZoneConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserWindowsTimeZoneConfigDto;
}());
exports.AbpUserWindowsTimeZoneConfigDto = AbpUserWindowsTimeZoneConfigDto;
var AbpUserIanaTimeZoneConfigDto = /** @class */ (function () {
    function AbpUserIanaTimeZoneConfigDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AbpUserIanaTimeZoneConfigDto.prototype.init = function (data) {
        if (data) {
            this.timeZoneId = data["timeZoneId"];
        }
    };
    AbpUserIanaTimeZoneConfigDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AbpUserIanaTimeZoneConfigDto();
        result.init(data);
        return result;
    };
    AbpUserIanaTimeZoneConfigDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneId"] = this.timeZoneId;
        return data;
    };
    AbpUserIanaTimeZoneConfigDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AbpUserIanaTimeZoneConfigDto();
        result.init(json);
        return result;
    };
    return AbpUserIanaTimeZoneConfigDto;
}());
exports.AbpUserIanaTimeZoneConfigDto = AbpUserIanaTimeZoneConfigDto;
var UpdateUserSignInTokenOutput = /** @class */ (function () {
    function UpdateUserSignInTokenOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UpdateUserSignInTokenOutput.prototype.init = function (data) {
        if (data) {
            this.signInToken = data["signInToken"];
            this.encodedUserId = data["encodedUserId"];
            this.encodedTenantId = data["encodedTenantId"];
        }
    };
    UpdateUserSignInTokenOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateUserSignInTokenOutput();
        result.init(data);
        return result;
    };
    UpdateUserSignInTokenOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["signInToken"] = this.signInToken;
        data["encodedUserId"] = this.encodedUserId;
        data["encodedTenantId"] = this.encodedTenantId;
        return data;
    };
    UpdateUserSignInTokenOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateUserSignInTokenOutput();
        result.init(json);
        return result;
    };
    return UpdateUserSignInTokenOutput;
}());
exports.UpdateUserSignInTokenOutput = UpdateUserSignInTokenOutput;
var CreateOrUpdateSourceInput = /** @class */ (function () {
    function CreateOrUpdateSourceInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.source = new SourceEditDto();
        }
    }
    CreateOrUpdateSourceInput.prototype.init = function (data) {
        if (data) {
            this.source = data["source"] ? SourceEditDto.fromJS(data["source"]) : new SourceEditDto();
        }
    };
    CreateOrUpdateSourceInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateSourceInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateSourceInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source ? this.source.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateSourceInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateSourceInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateSourceInput;
}());
exports.CreateOrUpdateSourceInput = CreateOrUpdateSourceInput;
var SourceEditDto = /** @class */ (function () {
    function SourceEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SourceEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.sourceName = data["sourceName"];
            this.sourceCode = data["sourceCode"];
            this.discount = data["discount"];
        }
    };
    SourceEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SourceEditDto();
        result.init(data);
        return result;
    };
    SourceEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sourceName"] = this.sourceName;
        data["sourceCode"] = this.sourceCode;
        data["discount"] = this.discount;
        return data;
    };
    SourceEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SourceEditDto();
        result.init(json);
        return result;
    };
    return SourceEditDto;
}());
exports.SourceEditDto = SourceEditDto;
var SourceListDto = /** @class */ (function () {
    function SourceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SourceListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.sourceName = data["sourceName"];
            this.sourceCode = data["sourceCode"];
            this.discount = data["discount"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    SourceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SourceListDto();
        result.init(data);
        return result;
    };
    SourceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["sourceName"] = this.sourceName;
        data["sourceCode"] = this.sourceCode;
        data["discount"] = this.discount;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    SourceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SourceListDto();
        result.init(json);
        return result;
    };
    return SourceListDto;
}());
exports.SourceListDto = SourceListDto;
var GetSourceForEditOutput = /** @class */ (function () {
    function GetSourceForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetSourceForEditOutput.prototype.init = function (data) {
        if (data) {
            this.source = data["source"] ? SourceEditDto.fromJS(data["source"]) : undefined;
        }
    };
    GetSourceForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetSourceForEditOutput();
        result.init(data);
        return result;
    };
    GetSourceForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source ? this.source.toJSON() : undefined;
        return data;
    };
    GetSourceForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetSourceForEditOutput();
        result.init(json);
        return result;
    };
    return GetSourceForEditOutput;
}());
exports.GetSourceForEditOutput = GetSourceForEditOutput;
var PagedResultDtoOfSourceListDto = /** @class */ (function () {
    function PagedResultDtoOfSourceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfSourceListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(SourceListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfSourceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfSourceListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfSourceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfSourceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfSourceListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfSourceListDto;
}());
exports.PagedResultDtoOfSourceListDto = PagedResultDtoOfSourceListDto;
var EntityDto = /** @class */ (function () {
    function EntityDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EntityDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
        }
    };
    EntityDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EntityDto();
        result.init(data);
        return result;
    };
    EntityDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    };
    EntityDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EntityDto();
        result.init(json);
        return result;
    };
    return EntityDto;
}());
exports.EntityDto = EntityDto;
var CreateTenantInput = /** @class */ (function () {
    function CreateTenantInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateTenantInput.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.adminPassword = data["adminPassword"];
            this.connectionString = data["connectionString"];
            this.shouldChangePasswordOnNextLogin = data["shouldChangePasswordOnNextLogin"];
            this.sendActivationEmail = data["sendActivationEmail"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndUtc = data["subscriptionEndUtc"] ? moment(data["subscriptionEndUtc"].toString()) : undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
        }
    };
    CreateTenantInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateTenantInput();
        result.init(data);
        return result;
    };
    CreateTenantInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["adminPassword"] = this.adminPassword;
        data["connectionString"] = this.connectionString;
        data["shouldChangePasswordOnNextLogin"] = this.shouldChangePasswordOnNextLogin;
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndUtc"] = this.subscriptionEndUtc ? this.subscriptionEndUtc.toISOString() : undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        return data;
    };
    CreateTenantInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateTenantInput();
        result.init(json);
        return result;
    };
    return CreateTenantInput;
}());
exports.CreateTenantInput = CreateTenantInput;
var TenantEditDto = /** @class */ (function () {
    function TenantEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantEditDto.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.connectionString = data["connectionString"];
            this.editionId = data["editionId"];
            this.isActive = data["isActive"];
            this.subscriptionEndUtc = data["subscriptionEndUtc"] ? moment(data["subscriptionEndUtc"].toString()) : undefined;
            this.isInTrialPeriod = data["isInTrialPeriod"];
            this.id = data["id"];
        }
    };
    TenantEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantEditDto();
        result.init(data);
        return result;
    };
    TenantEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["connectionString"] = this.connectionString;
        data["editionId"] = this.editionId;
        data["isActive"] = this.isActive;
        data["subscriptionEndUtc"] = this.subscriptionEndUtc ? this.subscriptionEndUtc.toISOString() : undefined;
        data["isInTrialPeriod"] = this.isInTrialPeriod;
        data["id"] = this.id;
        return data;
    };
    TenantEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantEditDto();
        result.init(json);
        return result;
    };
    return TenantEditDto;
}());
exports.TenantEditDto = TenantEditDto;
var PagedResultDtoOfTenantListDto = /** @class */ (function () {
    function PagedResultDtoOfTenantListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTenantListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TenantListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTenantListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTenantListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTenantListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTenantListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTenantListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTenantListDto;
}());
exports.PagedResultDtoOfTenantListDto = PagedResultDtoOfTenantListDto;
var TenantListDto = /** @class */ (function () {
    function TenantListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantListDto.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.editionDisplayName = data["editionDisplayName"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.subscriptionEndUtc = data["subscriptionEndUtc"] ? moment(data["subscriptionEndUtc"].toString()) : undefined;
            this.editionId = data["editionId"];
            this.id = data["id"];
        }
    };
    TenantListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantListDto();
        result.init(data);
        return result;
    };
    TenantListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["editionDisplayName"] = this.editionDisplayName;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["subscriptionEndUtc"] = this.subscriptionEndUtc ? this.subscriptionEndUtc.toISOString() : undefined;
        data["editionId"] = this.editionId;
        data["id"] = this.id;
        return data;
    };
    TenantListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantListDto();
        result.init(json);
        return result;
    };
    return TenantListDto;
}());
exports.TenantListDto = TenantListDto;
var GetTenantFeaturesEditOutput = /** @class */ (function () {
    function GetTenantFeaturesEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTenantFeaturesEditOutput.prototype.init = function (data) {
        if (data) {
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (var _i = 0, _a = data["featureValues"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [];
                for (var _b = 0, _c = data["features"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.features.push(FlatFeatureDto.fromJS(item));
                }
            }
        }
    };
    GetTenantFeaturesEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTenantFeaturesEditOutput();
        result.init(data);
        return result;
    };
    GetTenantFeaturesEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (var _i = 0, _a = this.featureValues; _i < _a.length; _i++) {
                var item = _a[_i];
                data["featureValues"].push(item.toJSON());
            }
        }
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (var _b = 0, _c = this.features; _b < _c.length; _b++) {
                var item = _c[_b];
                data["features"].push(item.toJSON());
            }
        }
        return data;
    };
    GetTenantFeaturesEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTenantFeaturesEditOutput();
        result.init(json);
        return result;
    };
    return GetTenantFeaturesEditOutput;
}());
exports.GetTenantFeaturesEditOutput = GetTenantFeaturesEditOutput;
var UpdateTenantFeaturesInput = /** @class */ (function () {
    function UpdateTenantFeaturesInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.featureValues = [];
        }
    }
    UpdateTenantFeaturesInput.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            if (data["featureValues"] && data["featureValues"].constructor === Array) {
                this.featureValues = [];
                for (var _i = 0, _a = data["featureValues"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.featureValues.push(NameValueDto.fromJS(item));
                }
            }
        }
    };
    UpdateTenantFeaturesInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateTenantFeaturesInput();
        result.init(data);
        return result;
    };
    UpdateTenantFeaturesInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.featureValues && this.featureValues.constructor === Array) {
            data["featureValues"] = [];
            for (var _i = 0, _a = this.featureValues; _i < _a.length; _i++) {
                var item = _a[_i];
                data["featureValues"].push(item.toJSON());
            }
        }
        return data;
    };
    UpdateTenantFeaturesInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateTenantFeaturesInput();
        result.init(json);
        return result;
    };
    return UpdateTenantFeaturesInput;
}());
exports.UpdateTenantFeaturesInput = UpdateTenantFeaturesInput;
/** 创建租户的DTO信息 */
var CreateTenantDto = /** @class */ (function () {
    function CreateTenantDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateTenantDto.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.userName = data["userName"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            this.verificationCode = data["verificationCode"];
            this.tenantAdminPassword = data["tenantAdminPassword"];
        }
    };
    CreateTenantDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateTenantDto();
        result.init(data);
        return result;
    };
    CreateTenantDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["userName"] = this.userName;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        data["verificationCode"] = this.verificationCode;
        data["tenantAdminPassword"] = this.tenantAdminPassword;
        return data;
    };
    CreateTenantDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateTenantDto();
        result.init(json);
        return result;
    };
    return CreateTenantDto;
}());
exports.CreateTenantDto = CreateTenantDto;
var RegisterTenantResultDto = /** @class */ (function () {
    function RegisterTenantResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RegisterTenantResultDto.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.isActive = data["isActive"];
            this.useCaptchaOnUserLogin = data["useCaptchaOnUserLogin"];
        }
    };
    RegisterTenantResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RegisterTenantResultDto();
        result.init(data);
        return result;
    };
    RegisterTenantResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["isActive"] = this.isActive;
        data["useCaptchaOnUserLogin"] = this.useCaptchaOnUserLogin;
        return data;
    };
    RegisterTenantResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RegisterTenantResultDto();
        result.init(json);
        return result;
    };
    return RegisterTenantResultDto;
}());
exports.RegisterTenantResultDto = RegisterTenantResultDto;
var TenantSettingsEditDto = /** @class */ (function () {
    function TenantSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.userManagement = new TenantUserManagementSettingsEditDto();
            this.security = new SecuritySettingsEditDto();
        }
    }
    TenantSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.general = data["general"] ? GeneralSettingsEditDto.fromJS(data["general"]) : undefined;
            this.userManagement = data["userManagement"] ? TenantUserManagementSettingsEditDto.fromJS(data["userManagement"]) : new TenantUserManagementSettingsEditDto();
            this.email = data["email"] ? EmailSettingsEditDto.fromJS(data["email"]) : undefined;
            this.ldap = data["ldap"] ? LdapSettingsEditDto.fromJS(data["ldap"]) : undefined;
            this.security = data["security"] ? SecuritySettingsEditDto.fromJS(data["security"]) : new SecuritySettingsEditDto();
            this.billing = data["billing"] ? TenantBillingSettingsEditDto.fromJS(data["billing"]) : undefined;
        }
    };
    TenantSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantSettingsEditDto();
        result.init(data);
        return result;
    };
    TenantSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["general"] = this.general ? this.general.toJSON() : undefined;
        data["userManagement"] = this.userManagement ? this.userManagement.toJSON() : undefined;
        data["email"] = this.email ? this.email.toJSON() : undefined;
        data["ldap"] = this.ldap ? this.ldap.toJSON() : undefined;
        data["security"] = this.security ? this.security.toJSON() : undefined;
        data["billing"] = this.billing ? this.billing.toJSON() : undefined;
        return data;
    };
    TenantSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantSettingsEditDto();
        result.init(json);
        return result;
    };
    return TenantSettingsEditDto;
}());
exports.TenantSettingsEditDto = TenantSettingsEditDto;
var TenantUserManagementSettingsEditDto = /** @class */ (function () {
    function TenantUserManagementSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantUserManagementSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.allowSelfRegistration = data["allowSelfRegistration"];
            this.isNewRegisteredUserActiveByDefault = data["isNewRegisteredUserActiveByDefault"];
            this.isEmailConfirmationRequiredForLogin = data["isEmailConfirmationRequiredForLogin"];
            this.useCaptchaOnUserRegistration = data["useCaptchaOnUserRegistration"];
            this.captchaOnUserRegistrationType = data["captchaOnUserRegistrationType"];
            this.captchaOnUserRegistrationLength = data["captchaOnUserRegistrationLength"];
            this.useCaptchaOnUserLogin = data["useCaptchaOnUserLogin"];
            this.captchaOnUserLoginType = data["captchaOnUserLoginType"];
            this.captchaOnUserLoginLength = data["captchaOnUserLoginLength"];
        }
    };
    TenantUserManagementSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantUserManagementSettingsEditDto();
        result.init(data);
        return result;
    };
    TenantUserManagementSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["allowSelfRegistration"] = this.allowSelfRegistration;
        data["isNewRegisteredUserActiveByDefault"] = this.isNewRegisteredUserActiveByDefault;
        data["isEmailConfirmationRequiredForLogin"] = this.isEmailConfirmationRequiredForLogin;
        data["useCaptchaOnUserRegistration"] = this.useCaptchaOnUserRegistration;
        data["captchaOnUserRegistrationType"] = this.captchaOnUserRegistrationType;
        data["captchaOnUserRegistrationLength"] = this.captchaOnUserRegistrationLength;
        data["useCaptchaOnUserLogin"] = this.useCaptchaOnUserLogin;
        data["captchaOnUserLoginType"] = this.captchaOnUserLoginType;
        data["captchaOnUserLoginLength"] = this.captchaOnUserLoginLength;
        return data;
    };
    TenantUserManagementSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantUserManagementSettingsEditDto();
        result.init(json);
        return result;
    };
    return TenantUserManagementSettingsEditDto;
}());
exports.TenantUserManagementSettingsEditDto = TenantUserManagementSettingsEditDto;
var LdapSettingsEditDto = /** @class */ (function () {
    function LdapSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LdapSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.isModuleEnabled = data["isModuleEnabled"];
            this.isEnabled = data["isEnabled"];
            this.domain = data["domain"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    };
    LdapSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LdapSettingsEditDto();
        result.init(data);
        return result;
    };
    LdapSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isModuleEnabled"] = this.isModuleEnabled;
        data["isEnabled"] = this.isEnabled;
        data["domain"] = this.domain;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    };
    LdapSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LdapSettingsEditDto();
        result.init(json);
        return result;
    };
    return LdapSettingsEditDto;
}());
exports.LdapSettingsEditDto = LdapSettingsEditDto;
var TenantBillingSettingsEditDto = /** @class */ (function () {
    function TenantBillingSettingsEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TenantBillingSettingsEditDto.prototype.init = function (data) {
        if (data) {
            this.legalName = data["legalName"];
            this.address = data["address"];
            this.taxVatNo = data["taxVatNo"];
        }
    };
    TenantBillingSettingsEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TenantBillingSettingsEditDto();
        result.init(data);
        return result;
    };
    TenantBillingSettingsEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["legalName"] = this.legalName;
        data["address"] = this.address;
        data["taxVatNo"] = this.taxVatNo;
        return data;
    };
    TenantBillingSettingsEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TenantBillingSettingsEditDto();
        result.init(json);
        return result;
    };
    return TenantBillingSettingsEditDto;
}());
exports.TenantBillingSettingsEditDto = TenantBillingSettingsEditDto;
var CreateOrUpdateTicketInput = /** @class */ (function () {
    function CreateOrUpdateTicketInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticket = new TicketEditDto();
        }
    }
    CreateOrUpdateTicketInput.prototype.init = function (data) {
        if (data) {
            this.ticket = data["ticket"] ? TicketEditDto.fromJS(data["ticket"]) : new TicketEditDto();
        }
    };
    CreateOrUpdateTicketInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketInput;
}());
exports.CreateOrUpdateTicketInput = CreateOrUpdateTicketInput;
var TicketEditDto = /** @class */ (function () {
    function TicketEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.ticketName = data["ticketName"];
            this.ticketCode = data["ticketCode"];
            this.ticketMode = data["ticketMode"];
            this.ticketType = data["ticketType"];
            this.checkMethod = data["checkMethod"];
            this.ticketClassify = data["ticketClassify"];
            this.checkNum = data["checkNum"];
            this.effectiveLong = data["effectiveLong"];
            this.unitPrice = data["unitPrice"];
            this.ticketLength = data["ticketLength"];
            this.upperLimit = data["upperLimit"];
            this.lowerLimit = data["lowerLimit"];
            this.audioName = data["audioName"];
            this.auditStatus = data["auditStatus"];
            this.isEnabled = data["isEnabled"];
            this.sort = data["sort"];
        }
    };
    TicketEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketEditDto();
        result.init(data);
        return result;
    };
    TicketEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketName"] = this.ticketName;
        data["ticketCode"] = this.ticketCode;
        data["ticketMode"] = this.ticketMode;
        data["ticketType"] = this.ticketType;
        data["checkMethod"] = this.checkMethod;
        data["ticketClassify"] = this.ticketClassify;
        data["checkNum"] = this.checkNum;
        data["effectiveLong"] = this.effectiveLong;
        data["unitPrice"] = this.unitPrice;
        data["ticketLength"] = this.ticketLength;
        data["upperLimit"] = this.upperLimit;
        data["lowerLimit"] = this.lowerLimit;
        data["audioName"] = this.audioName;
        data["auditStatus"] = this.auditStatus;
        data["isEnabled"] = this.isEnabled;
        data["sort"] = this.sort;
        return data;
    };
    TicketEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketEditDto();
        result.init(json);
        return result;
    };
    return TicketEditDto;
}());
exports.TicketEditDto = TicketEditDto;
var TicketListDto = /** @class */ (function () {
    function TicketListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketName = data["ticketName"];
            this.ticketCode = data["ticketCode"];
            this.ticketMode = data["ticketMode"];
            this.ticketType = data["ticketType"];
            this.checkMethod = data["checkMethod"];
            this.ticketClassify = data["ticketClassify"];
            this.checkNum = data["checkNum"];
            this.effectiveLong = data["effectiveLong"];
            this.unitPrice = data["unitPrice"];
            this.ticketLength = data["ticketLength"];
            this.upperLimit = data["upperLimit"];
            this.lowerLimit = data["lowerLimit"];
            this.audioName = data["audioName"];
            this.auditStatus = data["auditStatus"];
            this.isEnabled = data["isEnabled"];
            this.sort = data["sort"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketListDto();
        result.init(data);
        return result;
    };
    TicketListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketName"] = this.ticketName;
        data["ticketCode"] = this.ticketCode;
        data["ticketMode"] = this.ticketMode;
        data["ticketType"] = this.ticketType;
        data["checkMethod"] = this.checkMethod;
        data["ticketClassify"] = this.ticketClassify;
        data["checkNum"] = this.checkNum;
        data["effectiveLong"] = this.effectiveLong;
        data["unitPrice"] = this.unitPrice;
        data["ticketLength"] = this.ticketLength;
        data["upperLimit"] = this.upperLimit;
        data["lowerLimit"] = this.lowerLimit;
        data["audioName"] = this.audioName;
        data["auditStatus"] = this.auditStatus;
        data["isEnabled"] = this.isEnabled;
        data["sort"] = this.sort;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketListDto();
        result.init(json);
        return result;
    };
    return TicketListDto;
}());
exports.TicketListDto = TicketListDto;
var GetTicketForEditOutput = /** @class */ (function () {
    function GetTicketForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticket = data["ticket"] ? TicketEditDto.fromJS(data["ticket"]) : undefined;
        }
    };
    GetTicketForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        return data;
    };
    GetTicketForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketForEditOutput;
}());
exports.GetTicketForEditOutput = GetTicketForEditOutput;
var GetTicketsInput = /** @class */ (function () {
    function GetTicketsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketsInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetTicketsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketsInput();
        result.init(data);
        return result;
    };
    GetTicketsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetTicketsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketsInput();
        result.init(json);
        return result;
    };
    return GetTicketsInput;
}());
exports.GetTicketsInput = GetTicketsInput;
var PagedResultDtoOfTicketListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketListDto;
}());
exports.PagedResultDtoOfTicketListDto = PagedResultDtoOfTicketListDto;
var UploadAudioDto = /** @class */ (function () {
    function UploadAudioDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UploadAudioDto.prototype.init = function (data) {
        if (data) {
            this.uri = data["uri"];
        }
    };
    UploadAudioDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UploadAudioDto();
        result.init(data);
        return result;
    };
    UploadAudioDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["uri"] = this.uri;
        return data;
    };
    UploadAudioDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UploadAudioDto();
        result.init(json);
        return result;
    };
    return UploadAudioDto;
}());
exports.UploadAudioDto = UploadAudioDto;
var CreateOrUpdateAccountInput = /** @class */ (function () {
    function CreateOrUpdateAccountInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.account = new AccountEditDto();
        }
    }
    CreateOrUpdateAccountInput.prototype.init = function (data) {
        if (data) {
            this.account = data["account"] ? AccountEditDto.fromJS(data["account"]) : new AccountEditDto();
        }
    };
    CreateOrUpdateAccountInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateAccountInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateAccountInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["account"] = this.account ? this.account.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateAccountInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateAccountInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateAccountInput;
}());
exports.CreateOrUpdateAccountInput = CreateOrUpdateAccountInput;
var AccountEditDto = /** @class */ (function () {
    function AccountEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AccountEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.accountNo = data["accountNo"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : undefined;
            this.quantity = data["quantity"];
            this.amount = data["amount"];
            this.accountStatus = data["accountStatus"];
            this.collectiorId = data["collectiorId"];
            this.collectionTime = data["collectionTime"] ? moment(data["collectionTime"].toString()) : undefined;
            this.payMethodId = data["payMethodId"];
            this.remark = data["remark"];
            this.voucherNo = data["voucherNo"];
            this.rAmount = data["rAmount"];
            this.totalAmount = data["totalAmount"];
            this.rQuantity = data["rQuantity"];
            this.totalQuantity = data["totalQuantity"];
        }
    };
    AccountEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AccountEditDto();
        result.init(data);
        return result;
    };
    AccountEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountNo"] = this.accountNo;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : undefined;
        data["quantity"] = this.quantity;
        data["amount"] = this.amount;
        data["accountStatus"] = this.accountStatus;
        data["collectiorId"] = this.collectiorId;
        data["collectionTime"] = this.collectionTime ? this.collectionTime.toISOString() : undefined;
        data["payMethodId"] = this.payMethodId;
        data["remark"] = this.remark;
        data["voucherNo"] = this.voucherNo;
        data["rAmount"] = this.rAmount;
        data["totalAmount"] = this.totalAmount;
        data["rQuantity"] = this.rQuantity;
        data["totalQuantity"] = this.totalQuantity;
        return data;
    };
    AccountEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AccountEditDto();
        result.init(json);
        return result;
    };
    return AccountEditDto;
}());
exports.AccountEditDto = AccountEditDto;
var AccountListDto = /** @class */ (function () {
    function AccountListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AccountListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.accountNo = data["accountNo"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : undefined;
            this.quantity = data["quantity"];
            this.amount = data["amount"];
            this.accountStatus = data["accountStatus"];
            this.collectiorId = data["collectiorId"];
            this.collectior = data["collectior"] ? User.fromJS(data["collectior"]) : undefined;
            this.collectionTime = data["collectionTime"] ? moment(data["collectionTime"].toString()) : undefined;
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.remark = data["remark"];
            this.voucherNo = data["voucherNo"];
            this.rAmount = data["rAmount"];
            this.totalAmount = data["totalAmount"];
            this.rQuantity = data["rQuantity"];
            this.totalQuantity = data["totalQuantity"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    AccountListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AccountListDto();
        result.init(data);
        return result;
    };
    AccountListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["accountNo"] = this.accountNo;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : undefined;
        data["quantity"] = this.quantity;
        data["amount"] = this.amount;
        data["accountStatus"] = this.accountStatus;
        data["collectiorId"] = this.collectiorId;
        data["collectior"] = this.collectior ? this.collectior.toJSON() : undefined;
        data["collectionTime"] = this.collectionTime ? this.collectionTime.toISOString() : undefined;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["remark"] = this.remark;
        data["voucherNo"] = this.voucherNo;
        data["rAmount"] = this.rAmount;
        data["totalAmount"] = this.totalAmount;
        data["rQuantity"] = this.rQuantity;
        data["totalQuantity"] = this.totalQuantity;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    AccountListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AccountListDto();
        result.init(json);
        return result;
    };
    return AccountListDto;
}());
exports.AccountListDto = AccountListDto;
/** 账单明细 */
var AccountDetailDto = /** @class */ (function () {
    function AccountDetailDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AccountDetailDto.prototype.init = function (data) {
        if (data) {
            this.activityNo = data["activityNo"];
            this.sourceId = data["sourceId"];
            this.source = data["source"] ? Source.fromJS(data["source"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.orgActivityId = data["orgActivityId"];
            this.activityDate = data["activityDate"] ? moment(data["activityDate"].toString()) : undefined;
            this.playDate = data["playDate"] ? moment(data["playDate"].toString()) : undefined;
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.buyer = data["buyer"];
            this.mobile = data["mobile"];
            this.payMethodId = data["payMethodId"];
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.voucherNo = data["voucherNo"];
            this.payStatus = data["payStatus"];
            this.activityType = data["activityType"];
            this.remark = data["remark"];
            this.isPrint = data["isPrint"];
            this.closed = data["closed"];
            this.totalQuantity = data["totalQuantity"];
            this.totalAmount = data["totalAmount"];
            this.accountsId = data["accountsId"];
            this.account = data["account"] ? Account.fromJS(data["account"]) : undefined;
            this.orderType = data["orderType"];
            if (data["tickets"] && data["tickets"].constructor === Array) {
                this.tickets = [];
                for (var _i = 0, _a = data["tickets"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.tickets.push(TicketDetailListDto.fromJS(item));
                }
            }
        }
    };
    AccountDetailDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AccountDetailDto();
        result.init(data);
        return result;
    };
    AccountDetailDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["activityNo"] = this.activityNo;
        data["sourceId"] = this.sourceId;
        data["source"] = this.source ? this.source.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["orgActivityId"] = this.orgActivityId;
        data["activityDate"] = this.activityDate ? this.activityDate.toISOString() : undefined;
        data["playDate"] = this.playDate ? this.playDate.toISOString() : undefined;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["buyer"] = this.buyer;
        data["mobile"] = this.mobile;
        data["payMethodId"] = this.payMethodId;
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["voucherNo"] = this.voucherNo;
        data["payStatus"] = this.payStatus;
        data["activityType"] = this.activityType;
        data["remark"] = this.remark;
        data["isPrint"] = this.isPrint;
        data["closed"] = this.closed;
        data["totalQuantity"] = this.totalQuantity;
        data["totalAmount"] = this.totalAmount;
        data["accountsId"] = this.accountsId;
        data["account"] = this.account ? this.account.toJSON() : undefined;
        data["orderType"] = this.orderType;
        if (this.tickets && this.tickets.constructor === Array) {
            data["tickets"] = [];
            for (var _i = 0, _a = this.tickets; _i < _a.length; _i++) {
                var item = _a[_i];
                data["tickets"].push(item.toJSON());
            }
        }
        return data;
    };
    AccountDetailDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AccountDetailDto();
        result.init(json);
        return result;
    };
    return AccountDetailDto;
}());
exports.AccountDetailDto = AccountDetailDto;
var TicketDetailListDto = /** @class */ (function () {
    function TicketDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketDetailListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketNo = data["ticketNo"];
            this.activityDetailId = data["activityDetailId"];
            this.activityDetail = data["activityDetail"] ? ActivityDetail.fromJS(data["activityDetail"]) : undefined;
            this.activityId = data["activityId"];
            this.activity = data["activity"] ? Activity.fromJS(data["activity"]) : undefined;
            this.orgActivityDetailId = data["orgActivityDetailId"];
            this.orgActivityId = data["orgActivityId"];
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.qrCode = data["qrCode"];
            this.checkingQuantity = data["checkingQuantity"];
            this.checkedQuantity = data["checkedQuantity"];
            this.startDateTime = data["startDateTime"] ? moment(data["startDateTime"].toString()) : undefined;
            this.endDateTime = data["endDateTime"] ? moment(data["endDateTime"].toString()) : undefined;
            this.checkMethod = data["checkMethod"];
            this.routeId = data["routeId"];
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.boatId = data["boatId"];
            this.ticketStatus = data["ticketStatus"];
            this.checkTime = data["checkTime"] ? moment(data["checkTime"].toString()) : undefined;
            this.isPrint = data["isPrint"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketDetailListDto();
        result.init(data);
        return result;
    };
    TicketDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketNo"] = this.ticketNo;
        data["activityDetailId"] = this.activityDetailId;
        data["activityDetail"] = this.activityDetail ? this.activityDetail.toJSON() : undefined;
        data["activityId"] = this.activityId;
        data["activity"] = this.activity ? this.activity.toJSON() : undefined;
        data["orgActivityDetailId"] = this.orgActivityDetailId;
        data["orgActivityId"] = this.orgActivityId;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["qrCode"] = this.qrCode;
        data["checkingQuantity"] = this.checkingQuantity;
        data["checkedQuantity"] = this.checkedQuantity;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : undefined;
        data["checkMethod"] = this.checkMethod;
        data["routeId"] = this.routeId;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["boatId"] = this.boatId;
        data["ticketStatus"] = this.ticketStatus;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : undefined;
        data["isPrint"] = this.isPrint;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketDetailListDto();
        result.init(json);
        return result;
    };
    return TicketDetailListDto;
}());
exports.TicketDetailListDto = TicketDetailListDto;
var TicketStatusEnum;
(function (TicketStatusEnum) {
    TicketStatusEnum[TicketStatusEnum["Activate"] = "Activate"] = "Activate";
    TicketStatusEnum[TicketStatusEnum["Used"] = "Used"] = "Used";
    TicketStatusEnum[TicketStatusEnum["TicketRefund"] = "TicketRefund"] = "TicketRefund";
})(TicketStatusEnum = exports.TicketStatusEnum || (exports.TicketStatusEnum = {}));
var GetAccountForEditOutput = /** @class */ (function () {
    function GetAccountForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetAccountForEditOutput.prototype.init = function (data) {
        if (data) {
            this.account = data["account"] ? AccountEditDto.fromJS(data["account"]) : undefined;
        }
    };
    GetAccountForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetAccountForEditOutput();
        result.init(data);
        return result;
    };
    GetAccountForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["account"] = this.account ? this.account.toJSON() : undefined;
        return data;
    };
    GetAccountForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetAccountForEditOutput();
        result.init(json);
        return result;
    };
    return GetAccountForEditOutput;
}());
exports.GetAccountForEditOutput = GetAccountForEditOutput;
var GetAccountsInput = /** @class */ (function () {
    function GetAccountsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetAccountsInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetAccountsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetAccountsInput();
        result.init(data);
        return result;
    };
    GetAccountsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetAccountsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetAccountsInput();
        result.init(json);
        return result;
    };
    return GetAccountsInput;
}());
exports.GetAccountsInput = GetAccountsInput;
var PagedResultDtoOfAccountListDto = /** @class */ (function () {
    function PagedResultDtoOfAccountListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfAccountListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(AccountListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfAccountListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfAccountListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfAccountListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfAccountListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfAccountListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfAccountListDto;
}());
exports.PagedResultDtoOfAccountListDto = PagedResultDtoOfAccountListDto;
var CreateOrUpdateTicketDetailInput = /** @class */ (function () {
    function CreateOrUpdateTicketDetailInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketDetail = new TicketDetailEditDto();
        }
    }
    CreateOrUpdateTicketDetailInput.prototype.init = function (data) {
        if (data) {
            this.ticketDetail = data["ticketDetail"] ? TicketDetailEditDto.fromJS(data["ticketDetail"]) : new TicketDetailEditDto();
        }
    };
    CreateOrUpdateTicketDetailInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketDetailInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketDetailInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketDetail"] = this.ticketDetail ? this.ticketDetail.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketDetailInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketDetailInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketDetailInput;
}());
exports.CreateOrUpdateTicketDetailInput = CreateOrUpdateTicketDetailInput;
var TicketDetailEditDto = /** @class */ (function () {
    function TicketDetailEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketDetailEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.ticketNo = data["ticketNo"];
            this.activityDetailId = data["activityDetailId"];
            this.activityId = data["activityId"];
            this.orgActivityDetailId = data["orgActivityDetailId"];
            this.orgActivityId = data["orgActivityId"];
            this.customerId = data["customerId"];
            this.ticketId = data["ticketId"];
            this.qrCode = data["qrCode"];
            this.checkingQuantity = data["checkingQuantity"];
            this.checkedQuantity = data["checkedQuantity"];
            this.startDateTime = data["startDateTime"] ? moment(data["startDateTime"].toString()) : undefined;
            this.endDateTime = data["endDateTime"] ? moment(data["endDateTime"].toString()) : undefined;
            this.checkMethod = data["checkMethod"];
            this.routeId = data["routeId"];
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.boatId = data["boatId"];
            this.ticketStatus = data["ticketStatus"];
            this.checkTime = data["checkTime"] ? moment(data["checkTime"].toString()) : undefined;
            this.isPrint = data["isPrint"];
        }
    };
    TicketDetailEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketDetailEditDto();
        result.init(data);
        return result;
    };
    TicketDetailEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketNo"] = this.ticketNo;
        data["activityDetailId"] = this.activityDetailId;
        data["activityId"] = this.activityId;
        data["orgActivityDetailId"] = this.orgActivityDetailId;
        data["orgActivityId"] = this.orgActivityId;
        data["customerId"] = this.customerId;
        data["ticketId"] = this.ticketId;
        data["qrCode"] = this.qrCode;
        data["checkingQuantity"] = this.checkingQuantity;
        data["checkedQuantity"] = this.checkedQuantity;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : undefined;
        data["checkMethod"] = this.checkMethod;
        data["routeId"] = this.routeId;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["boatId"] = this.boatId;
        data["ticketStatus"] = this.ticketStatus;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : undefined;
        data["isPrint"] = this.isPrint;
        return data;
    };
    TicketDetailEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketDetailEditDto();
        result.init(json);
        return result;
    };
    return TicketDetailEditDto;
}());
exports.TicketDetailEditDto = TicketDetailEditDto;
var GetTicketDetailForEditOutput = /** @class */ (function () {
    function GetTicketDetailForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketDetailForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketDetail = data["ticketDetail"] ? TicketDetailEditDto.fromJS(data["ticketDetail"]) : undefined;
        }
    };
    GetTicketDetailForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketDetailForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketDetailForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketDetail"] = this.ticketDetail ? this.ticketDetail.toJSON() : undefined;
        return data;
    };
    GetTicketDetailForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketDetailForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketDetailForEditOutput;
}());
exports.GetTicketDetailForEditOutput = GetTicketDetailForEditOutput;
var PagedResultDtoOfTicketDetailListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketDetailListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketDetailListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketDetailListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketDetailListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketDetailListDto;
}());
exports.PagedResultDtoOfTicketDetailListDto = PagedResultDtoOfTicketDetailListDto;
var CreateOrUpdateTicketDetailHistoryInput = /** @class */ (function () {
    function CreateOrUpdateTicketDetailHistoryInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketDetailHistory = new TicketDetailHistoryEditDto();
        }
    }
    CreateOrUpdateTicketDetailHistoryInput.prototype.init = function (data) {
        if (data) {
            this.ticketDetailHistory = data["ticketDetailHistory"] ? TicketDetailHistoryEditDto.fromJS(data["ticketDetailHistory"]) : new TicketDetailHistoryEditDto();
        }
    };
    CreateOrUpdateTicketDetailHistoryInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketDetailHistoryInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketDetailHistoryInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketDetailHistory"] = this.ticketDetailHistory ? this.ticketDetailHistory.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketDetailHistoryInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketDetailHistoryInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketDetailHistoryInput;
}());
exports.CreateOrUpdateTicketDetailHistoryInput = CreateOrUpdateTicketDetailHistoryInput;
var TicketDetailHistoryEditDto = /** @class */ (function () {
    function TicketDetailHistoryEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketDetailHistoryEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.ticketId = data["ticketId"];
            this.deviceId = data["deviceId"];
            this.deviceName = data["deviceName"];
            this.ticketDetailId = data["ticketDetailId"];
            this.ticketNo = data["ticketNo"];
            this.customerId = data["customerId"];
            this.visitValue = data["visitValue"];
            this.validationType = data["validationType"];
            this.ticketName = data["ticketName"];
            this.statusCode = data["statusCode"];
            this.statusText = data["statusText"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : undefined;
            this.year = data["year"];
            this.month = data["month"];
            this.day = data["day"];
            this.hour = data["hour"];
            this.minute = data["minute"];
            this.yearWeek = data["yearWeek"];
            this.weekDay = data["weekDay"];
            this.checkTime = data["checkTime"] ? moment(data["checkTime"].toString()) : undefined;
            this.checkerId = data["checkerId"];
            this.checker = data["checker"] ? User.fromJS(data["checker"]) : undefined;
            this.checkCount = data["checkCount"];
        }
    };
    TicketDetailHistoryEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketDetailHistoryEditDto();
        result.init(data);
        return result;
    };
    TicketDetailHistoryEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketId"] = this.ticketId;
        data["deviceId"] = this.deviceId;
        data["deviceName"] = this.deviceName;
        data["ticketDetailId"] = this.ticketDetailId;
        data["ticketNo"] = this.ticketNo;
        data["customerId"] = this.customerId;
        data["visitValue"] = this.visitValue;
        data["validationType"] = this.validationType;
        data["ticketName"] = this.ticketName;
        data["statusCode"] = this.statusCode;
        data["statusText"] = this.statusText;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : undefined;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["hour"] = this.hour;
        data["minute"] = this.minute;
        data["yearWeek"] = this.yearWeek;
        data["weekDay"] = this.weekDay;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : undefined;
        data["checkerId"] = this.checkerId;
        data["checker"] = this.checker ? this.checker.toJSON() : undefined;
        data["checkCount"] = this.checkCount;
        return data;
    };
    TicketDetailHistoryEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketDetailHistoryEditDto();
        result.init(json);
        return result;
    };
    return TicketDetailHistoryEditDto;
}());
exports.TicketDetailHistoryEditDto = TicketDetailHistoryEditDto;
var TicketDetailHistoryListDto = /** @class */ (function () {
    function TicketDetailHistoryListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketDetailHistoryListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.deviceId = data["deviceId"];
            this.device = data["device"] ? Device.fromJS(data["device"]) : undefined;
            this.deviceName = data["deviceName"];
            this.ticketDetailId = data["ticketDetailId"];
            this.ticketDetail = data["ticketDetail"] ? TicketDetail.fromJS(data["ticketDetail"]) : undefined;
            this.ticketNo = data["ticketNo"];
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.visitValue = data["visitValue"];
            this.validationType = data["validationType"];
            this.ticketName = data["ticketName"];
            this.statusCode = data["statusCode"];
            this.statusText = data["statusText"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : undefined;
            this.year = data["year"];
            this.month = data["month"];
            this.day = data["day"];
            this.hour = data["hour"];
            this.minute = data["minute"];
            this.yearWeek = data["yearWeek"];
            this.weekDay = data["weekDay"];
            this.checkTime = data["checkTime"] ? moment(data["checkTime"].toString()) : undefined;
            this.checkerId = data["checkerId"];
            this.checker = data["checker"] ? User.fromJS(data["checker"]) : undefined;
            this.checkCount = data["checkCount"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketDetailHistoryListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketDetailHistoryListDto();
        result.init(data);
        return result;
    };
    TicketDetailHistoryListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["deviceId"] = this.deviceId;
        data["device"] = this.device ? this.device.toJSON() : undefined;
        data["deviceName"] = this.deviceName;
        data["ticketDetailId"] = this.ticketDetailId;
        data["ticketDetail"] = this.ticketDetail ? this.ticketDetail.toJSON() : undefined;
        data["ticketNo"] = this.ticketNo;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["visitValue"] = this.visitValue;
        data["validationType"] = this.validationType;
        data["ticketName"] = this.ticketName;
        data["statusCode"] = this.statusCode;
        data["statusText"] = this.statusText;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : undefined;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["hour"] = this.hour;
        data["minute"] = this.minute;
        data["yearWeek"] = this.yearWeek;
        data["weekDay"] = this.weekDay;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : undefined;
        data["checkerId"] = this.checkerId;
        data["checker"] = this.checker ? this.checker.toJSON() : undefined;
        data["checkCount"] = this.checkCount;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketDetailHistoryListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketDetailHistoryListDto();
        result.init(json);
        return result;
    };
    return TicketDetailHistoryListDto;
}());
exports.TicketDetailHistoryListDto = TicketDetailHistoryListDto;
var TicketDetail = /** @class */ (function () {
    function TicketDetail(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketDetail.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketNo = data["ticketNo"];
            this.activityDetailId = data["activityDetailId"];
            this.activityDetail = data["activityDetail"] ? ActivityDetail.fromJS(data["activityDetail"]) : undefined;
            this.activityId = data["activityId"];
            this.orgActivityDetailId = data["orgActivityDetailId"];
            this.orgActivityId = data["orgActivityId"];
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.ticketId = data["ticketId"];
            this.qrCode = data["qrCode"];
            this.checkingQuantity = data["checkingQuantity"];
            this.checkedQuantity = data["checkedQuantity"];
            this.startDateTime = data["startDateTime"] ? moment(data["startDateTime"].toString()) : undefined;
            this.endDateTime = data["endDateTime"] ? moment(data["endDateTime"].toString()) : undefined;
            this.checkMethod = data["checkMethod"];
            this.routeId = data["routeId"];
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.boatId = data["boatId"];
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            this.ticketStatus = data["ticketStatus"];
            this.checkTime = data["checkTime"] ? moment(data["checkTime"].toString()) : undefined;
            this.isPrint = data["isPrint"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketDetail.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketDetail();
        result.init(data);
        return result;
    };
    TicketDetail.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketNo"] = this.ticketNo;
        data["activityDetailId"] = this.activityDetailId;
        data["activityDetail"] = this.activityDetail ? this.activityDetail.toJSON() : undefined;
        data["activityId"] = this.activityId;
        data["orgActivityDetailId"] = this.orgActivityDetailId;
        data["orgActivityId"] = this.orgActivityId;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["ticketId"] = this.ticketId;
        data["qrCode"] = this.qrCode;
        data["checkingQuantity"] = this.checkingQuantity;
        data["checkedQuantity"] = this.checkedQuantity;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : undefined;
        data["checkMethod"] = this.checkMethod;
        data["routeId"] = this.routeId;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["boatId"] = this.boatId;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        data["ticketStatus"] = this.ticketStatus;
        data["checkTime"] = this.checkTime ? this.checkTime.toISOString() : undefined;
        data["isPrint"] = this.isPrint;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketDetail.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketDetail();
        result.init(json);
        return result;
    };
    return TicketDetail;
}());
exports.TicketDetail = TicketDetail;
var GetTicketDetailHistoryForEditOutput = /** @class */ (function () {
    function GetTicketDetailHistoryForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketDetailHistoryForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketDetailHistory = data["ticketDetailHistory"] ? TicketDetailHistoryEditDto.fromJS(data["ticketDetailHistory"]) : undefined;
        }
    };
    GetTicketDetailHistoryForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketDetailHistoryForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketDetailHistoryForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketDetailHistory"] = this.ticketDetailHistory ? this.ticketDetailHistory.toJSON() : undefined;
        return data;
    };
    GetTicketDetailHistoryForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketDetailHistoryForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketDetailHistoryForEditOutput;
}());
exports.GetTicketDetailHistoryForEditOutput = GetTicketDetailHistoryForEditOutput;
var PagedResultDtoOfTicketDetailHistoryListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketDetailHistoryListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketDetailHistoryListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketDetailHistoryListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketDetailHistoryListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketDetailHistoryListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketDetailHistoryListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketDetailHistoryListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketDetailHistoryListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketDetailHistoryListDto;
}());
exports.PagedResultDtoOfTicketDetailHistoryListDto = PagedResultDtoOfTicketDetailHistoryListDto;
var CreateOrUpdateTicketIntroduceInput = /** @class */ (function () {
    function CreateOrUpdateTicketIntroduceInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketIntroduce = new TicketIntroduceEditDto();
        }
    }
    CreateOrUpdateTicketIntroduceInput.prototype.init = function (data) {
        if (data) {
            this.ticketIntroduce = data["ticketIntroduce"] ? TicketIntroduceEditDto.fromJS(data["ticketIntroduce"]) : new TicketIntroduceEditDto();
        }
    };
    CreateOrUpdateTicketIntroduceInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketIntroduceInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketIntroduceInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketIntroduce"] = this.ticketIntroduce ? this.ticketIntroduce.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketIntroduceInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketIntroduceInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketIntroduceInput;
}());
exports.CreateOrUpdateTicketIntroduceInput = CreateOrUpdateTicketIntroduceInput;
var TicketIntroduceEditDto = /** @class */ (function () {
    function TicketIntroduceEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketIntroduceEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.ticketId = data["ticketId"];
            this.scenicSpotId = data["scenicSpotId"];
            this.tradeName = data["tradeName"];
            this.tradeInfo = data["tradeInfo"];
            this.address = data["address"];
            this.coverMap = data["coverMap"];
            this.abstract = data["abstract"];
            this.notice = data["notice"];
            this.refundRule = data["refundRule"];
            this.isOnLine = data["isOnLine"];
        }
    };
    TicketIntroduceEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketIntroduceEditDto();
        result.init(data);
        return result;
    };
    TicketIntroduceEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketId"] = this.ticketId;
        data["scenicSpotId"] = this.scenicSpotId;
        data["tradeName"] = this.tradeName;
        data["tradeInfo"] = this.tradeInfo;
        data["address"] = this.address;
        data["coverMap"] = this.coverMap;
        data["abstract"] = this.abstract;
        data["notice"] = this.notice;
        data["refundRule"] = this.refundRule;
        data["isOnLine"] = this.isOnLine;
        return data;
    };
    TicketIntroduceEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketIntroduceEditDto();
        result.init(json);
        return result;
    };
    return TicketIntroduceEditDto;
}());
exports.TicketIntroduceEditDto = TicketIntroduceEditDto;
var TicketIntroduceListDto = /** @class */ (function () {
    function TicketIntroduceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketIntroduceListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.scenicSpotId = data["scenicSpotId"];
            this.scenicSpot = data["scenicSpot"] ? ScenicSpot.fromJS(data["scenicSpot"]) : undefined;
            this.tradeName = data["tradeName"];
            this.tradeInfo = data["tradeInfo"];
            this.address = data["address"];
            this.coverMap = data["coverMap"];
            this.abstract = data["abstract"];
            this.notice = data["notice"];
            this.refundRule = data["refundRule"];
            this.isOnLine = data["isOnLine"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketIntroduceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketIntroduceListDto();
        result.init(data);
        return result;
    };
    TicketIntroduceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["scenicSpotId"] = this.scenicSpotId;
        data["scenicSpot"] = this.scenicSpot ? this.scenicSpot.toJSON() : undefined;
        data["tradeName"] = this.tradeName;
        data["tradeInfo"] = this.tradeInfo;
        data["address"] = this.address;
        data["coverMap"] = this.coverMap;
        data["abstract"] = this.abstract;
        data["notice"] = this.notice;
        data["refundRule"] = this.refundRule;
        data["isOnLine"] = this.isOnLine;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketIntroduceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketIntroduceListDto();
        result.init(json);
        return result;
    };
    return TicketIntroduceListDto;
}());
exports.TicketIntroduceListDto = TicketIntroduceListDto;
var GetTicketIntroduceForEditOutput = /** @class */ (function () {
    function GetTicketIntroduceForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketIntroduceForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketIntroduce = data["ticketIntroduce"] ? TicketIntroduceEditDto.fromJS(data["ticketIntroduce"]) : undefined;
        }
    };
    GetTicketIntroduceForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketIntroduceForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketIntroduceForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketIntroduce"] = this.ticketIntroduce ? this.ticketIntroduce.toJSON() : undefined;
        return data;
    };
    GetTicketIntroduceForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketIntroduceForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketIntroduceForEditOutput;
}());
exports.GetTicketIntroduceForEditOutput = GetTicketIntroduceForEditOutput;
var PagedResultDtoOfTicketIntroduceListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketIntroduceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketIntroduceListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketIntroduceListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketIntroduceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketIntroduceListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketIntroduceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketIntroduceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketIntroduceListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketIntroduceListDto;
}());
exports.PagedResultDtoOfTicketIntroduceListDto = PagedResultDtoOfTicketIntroduceListDto;
var CreateOrUpdateTicketPriceInput = /** @class */ (function () {
    function CreateOrUpdateTicketPriceInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketPrice = new TicketPriceEditDto();
        }
    }
    CreateOrUpdateTicketPriceInput.prototype.init = function (data) {
        if (data) {
            this.ticketPrice = data["ticketPrice"] ? TicketPriceEditDto.fromJS(data["ticketPrice"]) : new TicketPriceEditDto();
        }
    };
    CreateOrUpdateTicketPriceInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketPriceInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketPriceInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketPrice"] = this.ticketPrice ? this.ticketPrice.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketPriceInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketPriceInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketPriceInput;
}());
exports.CreateOrUpdateTicketPriceInput = CreateOrUpdateTicketPriceInput;
var TicketPriceEditDto = /** @class */ (function () {
    function TicketPriceEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketPriceEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.ticketId = data["ticketId"];
            this.isEnabled = data["isEnabled"];
            this.sort = data["sort"];
            this.price = data["price"];
            this.discount = data["discount"];
            this.rDiscount = data["rDiscount"];
            this.upperTime = data["upperTime"] ? moment(data["upperTime"].toString()) : undefined;
            this.lowerTime = data["lowerTime"] ? moment(data["lowerTime"].toString()) : undefined;
            this.position = data["position"];
            this.ticketName = data["ticketName"];
            this.lowerTimeStr = data["lowerTimeStr"];
            this.upperTimeStr = data["upperTimeStr"];
        }
    };
    TicketPriceEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketPriceEditDto();
        result.init(data);
        return result;
    };
    TicketPriceEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ticketId"] = this.ticketId;
        data["isEnabled"] = this.isEnabled;
        data["sort"] = this.sort;
        data["price"] = this.price;
        data["discount"] = this.discount;
        data["rDiscount"] = this.rDiscount;
        data["upperTime"] = this.upperTime ? this.upperTime.toISOString() : undefined;
        data["lowerTime"] = this.lowerTime ? this.lowerTime.toISOString() : undefined;
        data["position"] = this.position;
        data["ticketName"] = this.ticketName;
        data["lowerTimeStr"] = this.lowerTimeStr;
        data["upperTimeStr"] = this.upperTimeStr;
        return data;
    };
    TicketPriceEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketPriceEditDto();
        result.init(json);
        return result;
    };
    return TicketPriceEditDto;
}());
exports.TicketPriceEditDto = TicketPriceEditDto;
var GetTicketPriceForEditOutput = /** @class */ (function () {
    function GetTicketPriceForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketPriceForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketPrice = data["ticketPrice"] ? TicketPriceEditDto.fromJS(data["ticketPrice"]) : undefined;
        }
    };
    GetTicketPriceForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketPriceForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketPriceForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketPrice"] = this.ticketPrice ? this.ticketPrice.toJSON() : undefined;
        return data;
    };
    GetTicketPriceForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketPriceForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketPriceForEditOutput;
}());
exports.GetTicketPriceForEditOutput = GetTicketPriceForEditOutput;
var PagedResultDtoOfTicketPriceListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketPriceListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketPriceListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketPriceListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketPriceListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketPriceListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketPriceListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketPriceListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketPriceListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketPriceListDto;
}());
exports.PagedResultDtoOfTicketPriceListDto = PagedResultDtoOfTicketPriceListDto;
var GetTicketPricesInput = /** @class */ (function () {
    function GetTicketPricesInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketPricesInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetTicketPricesInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketPricesInput();
        result.init(data);
        return result;
    };
    GetTicketPricesInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetTicketPricesInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketPricesInput();
        result.init(json);
        return result;
    };
    return GetTicketPricesInput;
}());
exports.GetTicketPricesInput = GetTicketPricesInput;
var CreateOrUpdateTicketRoleInput = /** @class */ (function () {
    function CreateOrUpdateTicketRoleInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketRole = new TicketRoleEditDto();
        }
    }
    CreateOrUpdateTicketRoleInput.prototype.init = function (data) {
        if (data) {
            this.ticketRole = data["ticketRole"] ? TicketRoleEditDto.fromJS(data["ticketRole"]) : new TicketRoleEditDto();
        }
    };
    CreateOrUpdateTicketRoleInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketRoleInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketRoleInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketRole"] = this.ticketRole ? this.ticketRole.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketRoleInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketRoleInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketRoleInput;
}());
exports.CreateOrUpdateTicketRoleInput = CreateOrUpdateTicketRoleInput;
/** 的列表DTO Yozeev.BusinessLogic.TicketRole */
var TicketRoleEditDto = /** @class */ (function () {
    function TicketRoleEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketRoleEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.roleId = data["roleId"];
            this.ticketPriceId = data["ticketPriceId"];
        }
    };
    TicketRoleEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketRoleEditDto();
        result.init(data);
        return result;
    };
    TicketRoleEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roleId"] = this.roleId;
        data["ticketPriceId"] = this.ticketPriceId;
        return data;
    };
    TicketRoleEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketRoleEditDto();
        result.init(json);
        return result;
    };
    return TicketRoleEditDto;
}());
exports.TicketRoleEditDto = TicketRoleEditDto;
/** 的编辑DTO Yozeev.BusinessLogic.TicketRole */
var TicketRoleListDto = /** @class */ (function () {
    function TicketRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketRoleListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.roleId = data["roleId"];
            this.role = data["role"] ? Role.fromJS(data["role"]) : undefined;
            this.ticketPriceId = data["ticketPriceId"];
            this.ticketPrice = data["ticketPrice"] ? TicketPrice.fromJS(data["ticketPrice"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketRoleListDto();
        result.init(data);
        return result;
    };
    TicketRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["roleId"] = this.roleId;
        data["role"] = this.role ? this.role.toJSON() : undefined;
        data["ticketPriceId"] = this.ticketPriceId;
        data["ticketPrice"] = this.ticketPrice ? this.ticketPrice.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketRoleListDto();
        result.init(json);
        return result;
    };
    return TicketRoleListDto;
}());
exports.TicketRoleListDto = TicketRoleListDto;
/** 读取可编辑的Dto */
var GetTicketRoleForEditOutput = /** @class */ (function () {
    function GetTicketRoleForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketRoleForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketRole = data["ticketRole"] ? TicketRoleEditDto.fromJS(data["ticketRole"]) : undefined;
        }
    };
    GetTicketRoleForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketRoleForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketRoleForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketRole"] = this.ticketRole ? this.ticketRole.toJSON() : undefined;
        return data;
    };
    GetTicketRoleForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketRoleForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketRoleForEditOutput;
}());
exports.GetTicketRoleForEditOutput = GetTicketRoleForEditOutput;
var PagedResultDtoOfTicketRoleListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketRoleListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketRoleListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketRoleListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketRoleListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketRoleListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketRoleListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketRoleListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketRoleListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketRoleListDto;
}());
exports.PagedResultDtoOfTicketRoleListDto = PagedResultDtoOfTicketRoleListDto;
var CreateOrUpdateTicketScheduleEnableInput = /** @class */ (function () {
    function CreateOrUpdateTicketScheduleEnableInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketScheduleEnable = new TicketScheduleEnableEditDto();
        }
    }
    CreateOrUpdateTicketScheduleEnableInput.prototype.init = function (data) {
        if (data) {
            this.ticketScheduleEnable = data["ticketScheduleEnable"] ? TicketScheduleEnableEditDto.fromJS(data["ticketScheduleEnable"]) : new TicketScheduleEnableEditDto();
        }
    };
    CreateOrUpdateTicketScheduleEnableInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketScheduleEnableInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketScheduleEnableInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketScheduleEnable"] = this.ticketScheduleEnable ? this.ticketScheduleEnable.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketScheduleEnableInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketScheduleEnableInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketScheduleEnableInput;
}());
exports.CreateOrUpdateTicketScheduleEnableInput = CreateOrUpdateTicketScheduleEnableInput;
var TicketScheduleEnableEditDto = /** @class */ (function () {
    function TicketScheduleEnableEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketScheduleEnableEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.scheduleId = data["scheduleId"];
            this.ticketPriceId = data["ticketPriceId"];
        }
    };
    TicketScheduleEnableEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketScheduleEnableEditDto();
        result.init(data);
        return result;
    };
    TicketScheduleEnableEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scheduleId"] = this.scheduleId;
        data["ticketPriceId"] = this.ticketPriceId;
        return data;
    };
    TicketScheduleEnableEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketScheduleEnableEditDto();
        result.init(json);
        return result;
    };
    return TicketScheduleEnableEditDto;
}());
exports.TicketScheduleEnableEditDto = TicketScheduleEnableEditDto;
var TicketScheduleEnableListDto = /** @class */ (function () {
    function TicketScheduleEnableListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketScheduleEnableListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.scheduleId = data["scheduleId"];
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.ticketPriceId = data["ticketPriceId"];
            this.ticketPrice = data["ticketPrice"] ? TicketPrice.fromJS(data["ticketPrice"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketScheduleEnableListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketScheduleEnableListDto();
        result.init(data);
        return result;
    };
    TicketScheduleEnableListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["scheduleId"] = this.scheduleId;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["ticketPriceId"] = this.ticketPriceId;
        data["ticketPrice"] = this.ticketPrice ? this.ticketPrice.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketScheduleEnableListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketScheduleEnableListDto();
        result.init(json);
        return result;
    };
    return TicketScheduleEnableListDto;
}());
exports.TicketScheduleEnableListDto = TicketScheduleEnableListDto;
var GetTicketScheduleEnableForEditOutput = /** @class */ (function () {
    function GetTicketScheduleEnableForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketScheduleEnableForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketScheduleEnable = data["ticketScheduleEnable"] ? TicketScheduleEnableEditDto.fromJS(data["ticketScheduleEnable"]) : undefined;
        }
    };
    GetTicketScheduleEnableForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketScheduleEnableForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketScheduleEnableForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketScheduleEnable"] = this.ticketScheduleEnable ? this.ticketScheduleEnable.toJSON() : undefined;
        return data;
    };
    GetTicketScheduleEnableForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketScheduleEnableForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketScheduleEnableForEditOutput;
}());
exports.GetTicketScheduleEnableForEditOutput = GetTicketScheduleEnableForEditOutput;
var PagedResultDtoOfTicketScheduleEnableListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketScheduleEnableListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketScheduleEnableListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketScheduleEnableListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketScheduleEnableListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketScheduleEnableListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketScheduleEnableListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketScheduleEnableListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketScheduleEnableListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketScheduleEnableListDto;
}());
exports.PagedResultDtoOfTicketScheduleEnableListDto = PagedResultDtoOfTicketScheduleEnableListDto;
var CreateOrUpdateTicketStationInput = /** @class */ (function () {
    function CreateOrUpdateTicketStationInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketStation = new TicketStationEditDto();
        }
    }
    CreateOrUpdateTicketStationInput.prototype.init = function (data) {
        if (data) {
            this.ticketStation = data["ticketStation"] ? TicketStationEditDto.fromJS(data["ticketStation"]) : new TicketStationEditDto();
        }
    };
    CreateOrUpdateTicketStationInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketStationInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketStationInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketStation"] = this.ticketStation ? this.ticketStation.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketStationInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketStationInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketStationInput;
}());
exports.CreateOrUpdateTicketStationInput = CreateOrUpdateTicketStationInput;
var TicketStationEditDto = /** @class */ (function () {
    function TicketStationEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketStationEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.scenicSpotId = data["scenicSpotId"];
            this.stationName = data["stationName"];
            this.remand = data["remand"];
        }
    };
    TicketStationEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketStationEditDto();
        result.init(data);
        return result;
    };
    TicketStationEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["scenicSpotId"] = this.scenicSpotId;
        data["stationName"] = this.stationName;
        data["remand"] = this.remand;
        return data;
    };
    TicketStationEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketStationEditDto();
        result.init(json);
        return result;
    };
    return TicketStationEditDto;
}());
exports.TicketStationEditDto = TicketStationEditDto;
var TicketStationListDto = /** @class */ (function () {
    function TicketStationListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketStationListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.scenicSpotId = data["scenicSpotId"];
            this.scenicSpot = data["scenicSpot"] ? ScenicSpot.fromJS(data["scenicSpot"]) : undefined;
            this.stationName = data["stationName"];
            this.remand = data["remand"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketStationListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketStationListDto();
        result.init(data);
        return result;
    };
    TicketStationListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["scenicSpotId"] = this.scenicSpotId;
        data["scenicSpot"] = this.scenicSpot ? this.scenicSpot.toJSON() : undefined;
        data["stationName"] = this.stationName;
        data["remand"] = this.remand;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketStationListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketStationListDto();
        result.init(json);
        return result;
    };
    return TicketStationListDto;
}());
exports.TicketStationListDto = TicketStationListDto;
var GetTicketStationForEditOutput = /** @class */ (function () {
    function GetTicketStationForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketStationForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketStation = data["ticketStation"] ? TicketStationEditDto.fromJS(data["ticketStation"]) : undefined;
        }
    };
    GetTicketStationForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketStationForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketStationForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketStation"] = this.ticketStation ? this.ticketStation.toJSON() : undefined;
        return data;
    };
    GetTicketStationForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketStationForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketStationForEditOutput;
}());
exports.GetTicketStationForEditOutput = GetTicketStationForEditOutput;
var PagedResultDtoOfTicketStationListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketStationListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketStationListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketStationListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketStationListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketStationListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketStationListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketStationListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketStationListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketStationListDto;
}());
exports.PagedResultDtoOfTicketStationListDto = PagedResultDtoOfTicketStationListDto;
var CreateOrUpdateTicketStationEnableInput = /** @class */ (function () {
    function CreateOrUpdateTicketStationEnableInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketStationEnable = new TicketStationEnableEditDto();
        }
    }
    CreateOrUpdateTicketStationEnableInput.prototype.init = function (data) {
        if (data) {
            this.ticketStationEnable = data["ticketStationEnable"] ? TicketStationEnableEditDto.fromJS(data["ticketStationEnable"]) : new TicketStationEnableEditDto();
        }
    };
    CreateOrUpdateTicketStationEnableInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketStationEnableInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketStationEnableInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketStationEnable"] = this.ticketStationEnable ? this.ticketStationEnable.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketStationEnableInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketStationEnableInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketStationEnableInput;
}());
exports.CreateOrUpdateTicketStationEnableInput = CreateOrUpdateTicketStationEnableInput;
var TicketStationEnableEditDto = /** @class */ (function () {
    function TicketStationEnableEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketStationEnableEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.stationId = data["stationId"];
            this.ticketId = data["ticketId"];
        }
    };
    TicketStationEnableEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketStationEnableEditDto();
        result.init(data);
        return result;
    };
    TicketStationEnableEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["stationId"] = this.stationId;
        data["ticketId"] = this.ticketId;
        return data;
    };
    TicketStationEnableEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketStationEnableEditDto();
        result.init(json);
        return result;
    };
    return TicketStationEnableEditDto;
}());
exports.TicketStationEnableEditDto = TicketStationEnableEditDto;
var TicketStationEnableListDto = /** @class */ (function () {
    function TicketStationEnableListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketStationEnableListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.stationId = data["stationId"];
            this.station = data["station"] ? TicketStation.fromJS(data["station"]) : undefined;
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketStationEnableListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketStationEnableListDto();
        result.init(data);
        return result;
    };
    TicketStationEnableListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["stationId"] = this.stationId;
        data["station"] = this.station ? this.station.toJSON() : undefined;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketStationEnableListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketStationEnableListDto();
        result.init(json);
        return result;
    };
    return TicketStationEnableListDto;
}());
exports.TicketStationEnableListDto = TicketStationEnableListDto;
var TicketStation = /** @class */ (function () {
    function TicketStation(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketStation.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.scenicSpotId = data["scenicSpotId"];
            this.scenicSpot = data["scenicSpot"] ? ScenicSpot.fromJS(data["scenicSpot"]) : undefined;
            this.stationName = data["stationName"];
            this.remand = data["remand"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketStation.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketStation();
        result.init(data);
        return result;
    };
    TicketStation.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["scenicSpotId"] = this.scenicSpotId;
        data["scenicSpot"] = this.scenicSpot ? this.scenicSpot.toJSON() : undefined;
        data["stationName"] = this.stationName;
        data["remand"] = this.remand;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketStation.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketStation();
        result.init(json);
        return result;
    };
    return TicketStation;
}());
exports.TicketStation = TicketStation;
var GetTicketStationEnableForEditOutput = /** @class */ (function () {
    function GetTicketStationEnableForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketStationEnableForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketStationEnable = data["ticketStationEnable"] ? TicketStationEnableEditDto.fromJS(data["ticketStationEnable"]) : undefined;
        }
    };
    GetTicketStationEnableForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketStationEnableForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketStationEnableForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketStationEnable"] = this.ticketStationEnable ? this.ticketStationEnable.toJSON() : undefined;
        return data;
    };
    GetTicketStationEnableForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketStationEnableForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketStationEnableForEditOutput;
}());
exports.GetTicketStationEnableForEditOutput = GetTicketStationEnableForEditOutput;
var PagedResultDtoOfTicketStationEnableListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketStationEnableListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketStationEnableListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketStationEnableListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketStationEnableListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketStationEnableListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketStationEnableListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketStationEnableListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketStationEnableListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketStationEnableListDto;
}());
exports.PagedResultDtoOfTicketStationEnableListDto = PagedResultDtoOfTicketStationEnableListDto;
var CreateOrUpdateTicketUserEnableInput = /** @class */ (function () {
    function CreateOrUpdateTicketUserEnableInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.ticketUserEnable = new TicketUserEnableEditDto();
        }
    }
    CreateOrUpdateTicketUserEnableInput.prototype.init = function (data) {
        if (data) {
            this.ticketUserEnable = data["ticketUserEnable"] ? TicketUserEnableEditDto.fromJS(data["ticketUserEnable"]) : new TicketUserEnableEditDto();
        }
    };
    CreateOrUpdateTicketUserEnableInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTicketUserEnableInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTicketUserEnableInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketUserEnable"] = this.ticketUserEnable ? this.ticketUserEnable.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTicketUserEnableInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTicketUserEnableInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTicketUserEnableInput;
}());
exports.CreateOrUpdateTicketUserEnableInput = CreateOrUpdateTicketUserEnableInput;
var TicketUserEnableEditDto = /** @class */ (function () {
    function TicketUserEnableEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketUserEnableEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.saleUserId = data["saleUserId"];
            this.ticketId = data["ticketId"];
            this.ticketPriceId = data["ticketPriceId"];
        }
    };
    TicketUserEnableEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketUserEnableEditDto();
        result.init(data);
        return result;
    };
    TicketUserEnableEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["saleUserId"] = this.saleUserId;
        data["ticketId"] = this.ticketId;
        data["ticketPriceId"] = this.ticketPriceId;
        return data;
    };
    TicketUserEnableEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketUserEnableEditDto();
        result.init(json);
        return result;
    };
    return TicketUserEnableEditDto;
}());
exports.TicketUserEnableEditDto = TicketUserEnableEditDto;
var TicketUserEnableListDto = /** @class */ (function () {
    function TicketUserEnableListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketUserEnableListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.saleUserId = data["saleUserId"];
            this.saleUser = data["saleUser"] ? User.fromJS(data["saleUser"]) : undefined;
            this.ticketId = data["ticketId"];
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.ticketPriceId = data["ticketPriceId"];
            this.ticketPrice = data["ticketPrice"] ? TicketPrice.fromJS(data["ticketPrice"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TicketUserEnableListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketUserEnableListDto();
        result.init(data);
        return result;
    };
    TicketUserEnableListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["saleUserId"] = this.saleUserId;
        data["saleUser"] = this.saleUser ? this.saleUser.toJSON() : undefined;
        data["ticketId"] = this.ticketId;
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["ticketPriceId"] = this.ticketPriceId;
        data["ticketPrice"] = this.ticketPrice ? this.ticketPrice.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TicketUserEnableListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketUserEnableListDto();
        result.init(json);
        return result;
    };
    return TicketUserEnableListDto;
}());
exports.TicketUserEnableListDto = TicketUserEnableListDto;
var GetTicketUserEnableForEditOutput = /** @class */ (function () {
    function GetTicketUserEnableForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTicketUserEnableForEditOutput.prototype.init = function (data) {
        if (data) {
            this.ticketUserEnable = data["ticketUserEnable"] ? TicketUserEnableEditDto.fromJS(data["ticketUserEnable"]) : undefined;
        }
    };
    GetTicketUserEnableForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTicketUserEnableForEditOutput();
        result.init(data);
        return result;
    };
    GetTicketUserEnableForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketUserEnable"] = this.ticketUserEnable ? this.ticketUserEnable.toJSON() : undefined;
        return data;
    };
    GetTicketUserEnableForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTicketUserEnableForEditOutput();
        result.init(json);
        return result;
    };
    return GetTicketUserEnableForEditOutput;
}());
exports.GetTicketUserEnableForEditOutput = GetTicketUserEnableForEditOutput;
var PagedResultDtoOfTicketUserEnableListDto = /** @class */ (function () {
    function PagedResultDtoOfTicketUserEnableListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTicketUserEnableListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TicketUserEnableListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTicketUserEnableListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTicketUserEnableListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTicketUserEnableListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTicketUserEnableListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTicketUserEnableListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTicketUserEnableListDto;
}());
exports.PagedResultDtoOfTicketUserEnableListDto = PagedResultDtoOfTicketUserEnableListDto;
var SettingScopes;
(function (SettingScopes) {
    SettingScopes[SettingScopes["Application"] = "Application"] = "Application";
    SettingScopes[SettingScopes["Tenant"] = "Tenant"] = "Tenant";
    SettingScopes[SettingScopes["User"] = "User"] = "User";
    SettingScopes[SettingScopes["All"] = "All"] = "All";
})(SettingScopes = exports.SettingScopes || (exports.SettingScopes = {}));
var ListResultDtoOfNameValueDto = /** @class */ (function () {
    function ListResultDtoOfNameValueDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfNameValueDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(NameValueDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfNameValueDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfNameValueDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfNameValueDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfNameValueDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfNameValueDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfNameValueDto;
}());
exports.ListResultDtoOfNameValueDto = ListResultDtoOfNameValueDto;
var CreateOrUpdateTravelAgencyInput = /** @class */ (function () {
    function CreateOrUpdateTravelAgencyInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.travelAgency = new TravelAgencyEditDto();
        }
    }
    CreateOrUpdateTravelAgencyInput.prototype.init = function (data) {
        if (data) {
            this.travelAgency = data["travelAgency"] ? TravelAgencyEditDto.fromJS(data["travelAgency"]) : new TravelAgencyEditDto();
        }
    };
    CreateOrUpdateTravelAgencyInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTravelAgencyInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTravelAgencyInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["travelAgency"] = this.travelAgency ? this.travelAgency.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTravelAgencyInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTravelAgencyInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTravelAgencyInput;
}());
exports.CreateOrUpdateTravelAgencyInput = CreateOrUpdateTravelAgencyInput;
var TravelAgencyEditDto = /** @class */ (function () {
    function TravelAgencyEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TravelAgencyEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.travelName = data["travelName"];
            this.mobile = data["mobile"];
            this.contacts = data["contacts"];
            this.isEnabled = data["isEnabled"];
            this.discount = data["discount"];
            this.payMethod = data["payMethod"];
            this.totalSum = data["totalSum"];
            this.prepaidAmount = data["prepaidAmount"];
            this.alarmAmount = data["alarmAmount"];
            this.upperLimit = data["upperLimit"];
            this.lowerlimit = data["lowerlimit"];
        }
    };
    TravelAgencyEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TravelAgencyEditDto();
        result.init(data);
        return result;
    };
    TravelAgencyEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["travelName"] = this.travelName;
        data["mobile"] = this.mobile;
        data["contacts"] = this.contacts;
        data["isEnabled"] = this.isEnabled;
        data["discount"] = this.discount;
        data["payMethod"] = this.payMethod;
        data["totalSum"] = this.totalSum;
        data["prepaidAmount"] = this.prepaidAmount;
        data["alarmAmount"] = this.alarmAmount;
        data["upperLimit"] = this.upperLimit;
        data["lowerlimit"] = this.lowerlimit;
        return data;
    };
    TravelAgencyEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TravelAgencyEditDto();
        result.init(json);
        return result;
    };
    return TravelAgencyEditDto;
}());
exports.TravelAgencyEditDto = TravelAgencyEditDto;
var TravelAgencyListDto = /** @class */ (function () {
    function TravelAgencyListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TravelAgencyListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.travelName = data["travelName"];
            this.mobile = data["mobile"];
            this.contacts = data["contacts"];
            this.isEnabled = data["isEnabled"];
            this.discount = data["discount"];
            this.payMethod = data["payMethod"];
            this.totalSum = data["totalSum"];
            this.prepaidAmount = data["prepaidAmount"];
            this.alarmAmount = data["alarmAmount"];
            this.upperLimit = data["upperLimit"];
            this.lowerlimit = data["lowerlimit"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TravelAgencyListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TravelAgencyListDto();
        result.init(data);
        return result;
    };
    TravelAgencyListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["travelName"] = this.travelName;
        data["mobile"] = this.mobile;
        data["contacts"] = this.contacts;
        data["isEnabled"] = this.isEnabled;
        data["discount"] = this.discount;
        data["payMethod"] = this.payMethod;
        data["totalSum"] = this.totalSum;
        data["prepaidAmount"] = this.prepaidAmount;
        data["alarmAmount"] = this.alarmAmount;
        data["upperLimit"] = this.upperLimit;
        data["lowerlimit"] = this.lowerlimit;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TravelAgencyListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TravelAgencyListDto();
        result.init(json);
        return result;
    };
    return TravelAgencyListDto;
}());
exports.TravelAgencyListDto = TravelAgencyListDto;
var GetTravelAgencyForEditOutput = /** @class */ (function () {
    function GetTravelAgencyForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTravelAgencyForEditOutput.prototype.init = function (data) {
        if (data) {
            this.travelAgency = data["travelAgency"] ? TravelAgencyEditDto.fromJS(data["travelAgency"]) : undefined;
        }
    };
    GetTravelAgencyForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTravelAgencyForEditOutput();
        result.init(data);
        return result;
    };
    GetTravelAgencyForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["travelAgency"] = this.travelAgency ? this.travelAgency.toJSON() : undefined;
        return data;
    };
    GetTravelAgencyForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTravelAgencyForEditOutput();
        result.init(json);
        return result;
    };
    return GetTravelAgencyForEditOutput;
}());
exports.GetTravelAgencyForEditOutput = GetTravelAgencyForEditOutput;
var PagedResultDtoOfTravelAgencyListDto = /** @class */ (function () {
    function PagedResultDtoOfTravelAgencyListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTravelAgencyListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TravelAgencyListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTravelAgencyListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTravelAgencyListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTravelAgencyListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTravelAgencyListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTravelAgencyListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTravelAgencyListDto;
}());
exports.PagedResultDtoOfTravelAgencyListDto = PagedResultDtoOfTravelAgencyListDto;
var GetTravelAgencysInput = /** @class */ (function () {
    function GetTravelAgencysInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTravelAgencysInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetTravelAgencysInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTravelAgencysInput();
        result.init(data);
        return result;
    };
    GetTravelAgencysInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetTravelAgencysInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTravelAgencysInput();
        result.init(json);
        return result;
    };
    return GetTravelAgencysInput;
}());
exports.GetTravelAgencysInput = GetTravelAgencysInput;
var CreateOrUpdateTravelTicketDetailInput = /** @class */ (function () {
    function CreateOrUpdateTravelTicketDetailInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.travelTicketDetail = new TravelTicketDetailEditDto();
        }
    }
    CreateOrUpdateTravelTicketDetailInput.prototype.init = function (data) {
        if (data) {
            this.travelTicketDetail = data["travelTicketDetail"] ? TravelTicketDetailEditDto.fromJS(data["travelTicketDetail"]) : new TravelTicketDetailEditDto();
        }
    };
    CreateOrUpdateTravelTicketDetailInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateTravelTicketDetailInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateTravelTicketDetailInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["travelTicketDetail"] = this.travelTicketDetail ? this.travelTicketDetail.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateTravelTicketDetailInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateTravelTicketDetailInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateTravelTicketDetailInput;
}());
exports.CreateOrUpdateTravelTicketDetailInput = CreateOrUpdateTravelTicketDetailInput;
var TravelTicketDetailEditDto = /** @class */ (function () {
    function TravelTicketDetailEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TravelTicketDetailEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.customerId = data["customerId"];
            this.travelAgencyId = data["travelAgencyId"];
            this.activityTempId = data["activityTempId"];
            this.activityTempDetailId = data["activityTempDetailId"];
        }
    };
    TravelTicketDetailEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TravelTicketDetailEditDto();
        result.init(data);
        return result;
    };
    TravelTicketDetailEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customerId"] = this.customerId;
        data["travelAgencyId"] = this.travelAgencyId;
        data["activityTempId"] = this.activityTempId;
        data["activityTempDetailId"] = this.activityTempDetailId;
        return data;
    };
    TravelTicketDetailEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TravelTicketDetailEditDto();
        result.init(json);
        return result;
    };
    return TravelTicketDetailEditDto;
}());
exports.TravelTicketDetailEditDto = TravelTicketDetailEditDto;
var TravelTicketDetailListDto = /** @class */ (function () {
    function TravelTicketDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TravelTicketDetailListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.customerId = data["customerId"];
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.travelAgencyId = data["travelAgencyId"];
            this.travelAgency = data["travelAgency"] ? TravelAgency.fromJS(data["travelAgency"]) : undefined;
            this.activityTempId = data["activityTempId"];
            this.activityTemp = data["activityTemp"] ? ActivityTemp.fromJS(data["activityTemp"]) : undefined;
            this.activityTempDetailId = data["activityTempDetailId"];
            this.activityTempDetail = data["activityTempDetail"] ? ActivityTempDetail.fromJS(data["activityTempDetail"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    TravelTicketDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TravelTicketDetailListDto();
        result.init(data);
        return result;
    };
    TravelTicketDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["customerId"] = this.customerId;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["travelAgencyId"] = this.travelAgencyId;
        data["travelAgency"] = this.travelAgency ? this.travelAgency.toJSON() : undefined;
        data["activityTempId"] = this.activityTempId;
        data["activityTemp"] = this.activityTemp ? this.activityTemp.toJSON() : undefined;
        data["activityTempDetailId"] = this.activityTempDetailId;
        data["activityTempDetail"] = this.activityTempDetail ? this.activityTempDetail.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    TravelTicketDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TravelTicketDetailListDto();
        result.init(json);
        return result;
    };
    return TravelTicketDetailListDto;
}());
exports.TravelTicketDetailListDto = TravelTicketDetailListDto;
var GetTravelTicketDetailForEditOutput = /** @class */ (function () {
    function GetTravelTicketDetailForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetTravelTicketDetailForEditOutput.prototype.init = function (data) {
        if (data) {
            this.travelTicketDetail = data["travelTicketDetail"] ? TravelTicketDetailEditDto.fromJS(data["travelTicketDetail"]) : undefined;
        }
    };
    GetTravelTicketDetailForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetTravelTicketDetailForEditOutput();
        result.init(data);
        return result;
    };
    GetTravelTicketDetailForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["travelTicketDetail"] = this.travelTicketDetail ? this.travelTicketDetail.toJSON() : undefined;
        return data;
    };
    GetTravelTicketDetailForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetTravelTicketDetailForEditOutput();
        result.init(json);
        return result;
    };
    return GetTravelTicketDetailForEditOutput;
}());
exports.GetTravelTicketDetailForEditOutput = GetTravelTicketDetailForEditOutput;
var PagedResultDtoOfTravelTicketDetailListDto = /** @class */ (function () {
    function PagedResultDtoOfTravelTicketDetailListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfTravelTicketDetailListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TravelTicketDetailListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfTravelTicketDetailListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfTravelTicketDetailListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfTravelTicketDetailListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfTravelTicketDetailListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfTravelTicketDetailListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfTravelTicketDetailListDto;
}());
exports.PagedResultDtoOfTravelTicketDetailListDto = PagedResultDtoOfTravelTicketDetailListDto;
/** 用户信息新增和编辑时用Dto */
var CreateOrUpdateUserInput = /** @class */ (function () {
    function CreateOrUpdateUserInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.assignedRoleNames = [];
        }
    }
    CreateOrUpdateUserInput.prototype.init = function (data) {
        if (data) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : undefined;
            if (data["assignedRoleNames"] && data["assignedRoleNames"].constructor === Array) {
                this.assignedRoleNames = [];
                for (var _i = 0, _a = data["assignedRoleNames"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.assignedRoleNames.push(item);
                }
            }
            if (data["organizationUnits"] && data["organizationUnits"].constructor === Array) {
                this.organizationUnits = [];
                for (var _b = 0, _c = data["organizationUnits"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.organizationUnits.push(item);
                }
            }
            this.sendActivationEmail = data["sendActivationEmail"];
            this.setRandomPassword = data["setRandomPassword"];
            this.branchId = data["branchId"];
        }
    };
    CreateOrUpdateUserInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateUserInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : undefined;
        if (this.assignedRoleNames && this.assignedRoleNames.constructor === Array) {
            data["assignedRoleNames"] = [];
            for (var _i = 0, _a = this.assignedRoleNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data["assignedRoleNames"].push(item);
            }
        }
        if (this.organizationUnits && this.organizationUnits.constructor === Array) {
            data["organizationUnits"] = [];
            for (var _b = 0, _c = this.organizationUnits; _b < _c.length; _b++) {
                var item = _c[_b];
                data["organizationUnits"].push(item);
            }
        }
        data["sendActivationEmail"] = this.sendActivationEmail;
        data["setRandomPassword"] = this.setRandomPassword;
        data["branchId"] = this.branchId;
        return data;
    };
    CreateOrUpdateUserInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateUserInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateUserInput;
}());
exports.CreateOrUpdateUserInput = CreateOrUpdateUserInput;
/** 用户信息编辑用Dto */
var UserEditDto = /** @class */ (function () {
    function UserEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.password = data["password"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
            this.needToChangeThePassword = data["needToChangeThePassword"];
            this.profilePictureId = data["profilePictureId"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            this.isActive = data["isActive"];
            this.branchId = data["branchId"];
        }
    };
    UserEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserEditDto();
        result.init(data);
        return result;
    };
    UserEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        data["needToChangeThePassword"] = this.needToChangeThePassword;
        data["profilePictureId"] = this.profilePictureId;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        data["isActive"] = this.isActive;
        data["branchId"] = this.branchId;
        return data;
    };
    UserEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserEditDto();
        result.init(json);
        return result;
    };
    return UserEditDto;
}());
exports.UserEditDto = UserEditDto;
var GetUserForEditTreeOutput = /** @class */ (function () {
    function GetUserForEditTreeOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetUserForEditTreeOutput.prototype.init = function (data) {
        if (data) {
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (var _i = 0, _a = data["roles"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roles.push(UserRoleDto.fromJS(item));
                }
            }
            if (data["allOrganizationUnits"] && data["allOrganizationUnits"].constructor === Array) {
                this.allOrganizationUnits = [];
                for (var _b = 0, _c = data["allOrganizationUnits"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.allOrganizationUnits.push(OrganizationUnitListDto.fromJS(item));
                }
            }
            if (data["memberedOrganizationUnits"] && data["memberedOrganizationUnits"].constructor === Array) {
                this.memberedOrganizationUnits = [];
                for (var _d = 0, _e = data["memberedOrganizationUnits"]; _d < _e.length; _d++) {
                    var item = _e[_d];
                    this.memberedOrganizationUnits.push(item);
                }
            }
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
        }
    };
    GetUserForEditTreeOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetUserForEditTreeOutput();
        result.init(data);
        return result;
    };
    GetUserForEditTreeOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["user"] = this.user ? this.user.toJSON() : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (var _i = 0, _a = this.roles; _i < _a.length; _i++) {
                var item = _a[_i];
                data["roles"].push(item.toJSON());
            }
        }
        if (this.allOrganizationUnits && this.allOrganizationUnits.constructor === Array) {
            data["allOrganizationUnits"] = [];
            for (var _b = 0, _c = this.allOrganizationUnits; _b < _c.length; _b++) {
                var item = _c[_b];
                data["allOrganizationUnits"].push(item.toJSON());
            }
        }
        if (this.memberedOrganizationUnits && this.memberedOrganizationUnits.constructor === Array) {
            data["memberedOrganizationUnits"] = [];
            for (var _d = 0, _e = this.memberedOrganizationUnits; _d < _e.length; _d++) {
                var item = _e[_d];
                data["memberedOrganizationUnits"].push(item);
            }
        }
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        return data;
    };
    GetUserForEditTreeOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetUserForEditTreeOutput();
        result.init(json);
        return result;
    };
    return GetUserForEditTreeOutput;
}());
exports.GetUserForEditTreeOutput = GetUserForEditTreeOutput;
var UserRoleDto = /** @class */ (function () {
    function UserRoleDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserRoleDto.prototype.init = function (data) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
            this.roleDisplayName = data["roleDisplayName"];
            this.isAssigned = data["isAssigned"];
        }
    };
    UserRoleDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserRoleDto();
        result.init(data);
        return result;
    };
    UserRoleDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        data["roleDisplayName"] = this.roleDisplayName;
        data["isAssigned"] = this.isAssigned;
        return data;
    };
    UserRoleDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserRoleDto();
        result.init(json);
        return result;
    };
    return UserRoleDto;
}());
exports.UserRoleDto = UserRoleDto;
var PagedResultDtoOfUserListDto = /** @class */ (function () {
    function PagedResultDtoOfUserListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfUserListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(UserListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfUserListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfUserListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfUserListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfUserListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfUserListDto;
}());
exports.PagedResultDtoOfUserListDto = PagedResultDtoOfUserListDto;
/** 用户信息列表Dto */
var UserListDto = /** @class */ (function () {
    function UserListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserListDto.prototype.init = function (data) {
        if (data) {
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isEmailConfirmed = data["isEmailConfirmed"];
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (var _i = 0, _a = data["roles"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roles.push(UserListRoleDto.fromJS(item));
                }
            }
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    };
    UserListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserListDto();
        result.init(data);
        return result;
    };
    UserListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (var _i = 0, _a = this.roles; _i < _a.length; _i++) {
                var item = _a[_i];
                data["roles"].push(item.toJSON());
            }
        }
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data;
    };
    UserListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserListDto();
        result.init(json);
        return result;
    };
    return UserListDto;
}());
exports.UserListDto = UserListDto;
var UserListRoleDto = /** @class */ (function () {
    function UserListRoleDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserListRoleDto.prototype.init = function (data) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleName = data["roleName"];
        }
    };
    UserListRoleDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserListRoleDto();
        result.init(data);
        return result;
    };
    UserListRoleDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleName"] = this.roleName;
        return data;
    };
    UserListRoleDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserListRoleDto();
        result.init(json);
        return result;
    };
    return UserListRoleDto;
}());
exports.UserListRoleDto = UserListRoleDto;
var GetUserPermissionsTreeForEditOutput = /** @class */ (function () {
    function GetUserPermissionsTreeForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetUserPermissionsTreeForEditOutput.prototype.init = function (data) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (var _i = 0, _a = data["permissions"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.permissions.push(FlatPermissionDto.fromJS(item));
                }
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (var _b = 0, _c = data["grantedPermissionNames"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    };
    GetUserPermissionsTreeForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetUserPermissionsTreeForEditOutput();
        result.init(data);
        return result;
    };
    GetUserPermissionsTreeForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (var _i = 0, _a = this.permissions; _i < _a.length; _i++) {
                var item = _a[_i];
                data["permissions"].push(item.toJSON());
            }
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (var _b = 0, _c = this.grantedPermissionNames; _b < _c.length; _b++) {
                var item = _c[_b];
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    };
    GetUserPermissionsTreeForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetUserPermissionsTreeForEditOutput();
        result.init(json);
        return result;
    };
    return GetUserPermissionsTreeForEditOutput;
}());
exports.GetUserPermissionsTreeForEditOutput = GetUserPermissionsTreeForEditOutput;
var GetUserForEditOutput = /** @class */ (function () {
    function GetUserForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetUserForEditOutput.prototype.init = function (data) {
        if (data) {
            this.profilePictureId = data["profilePictureId"];
            this.user = data["user"] ? UserEditDto.fromJS(data["user"]) : undefined;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (var _i = 0, _a = data["roles"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.roles.push(UserRoleDto.fromJS(item));
                }
            }
            if (data["allOrganizationUnits"] && data["allOrganizationUnits"].constructor === Array) {
                this.allOrganizationUnits = [];
                for (var _b = 0, _c = data["allOrganizationUnits"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.allOrganizationUnits.push(OrganizationUnitListDto.fromJS(item));
                }
            }
            if (data["memberedOrganizationUnits"] && data["memberedOrganizationUnits"].constructor === Array) {
                this.memberedOrganizationUnits = [];
                for (var _d = 0, _e = data["memberedOrganizationUnits"]; _d < _e.length; _d++) {
                    var item = _e[_d];
                    this.memberedOrganizationUnits.push(item);
                }
            }
        }
    };
    GetUserForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetUserForEditOutput();
        result.init(data);
        return result;
    };
    GetUserForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["profilePictureId"] = this.profilePictureId;
        data["user"] = this.user ? this.user.toJSON() : undefined;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (var _i = 0, _a = this.roles; _i < _a.length; _i++) {
                var item = _a[_i];
                data["roles"].push(item.toJSON());
            }
        }
        if (this.allOrganizationUnits && this.allOrganizationUnits.constructor === Array) {
            data["allOrganizationUnits"] = [];
            for (var _b = 0, _c = this.allOrganizationUnits; _b < _c.length; _b++) {
                var item = _c[_b];
                data["allOrganizationUnits"].push(item.toJSON());
            }
        }
        if (this.memberedOrganizationUnits && this.memberedOrganizationUnits.constructor === Array) {
            data["memberedOrganizationUnits"] = [];
            for (var _d = 0, _e = this.memberedOrganizationUnits; _d < _e.length; _d++) {
                var item = _e[_d];
                data["memberedOrganizationUnits"].push(item);
            }
        }
        return data;
    };
    GetUserForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetUserForEditOutput();
        result.init(json);
        return result;
    };
    return GetUserForEditOutput;
}());
exports.GetUserForEditOutput = GetUserForEditOutput;
var GetUserPermissionsForEditOutput = /** @class */ (function () {
    function GetUserPermissionsForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetUserPermissionsForEditOutput.prototype.init = function (data) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [];
                for (var _i = 0, _a = data["permissions"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.permissions.push(FlatPermissionDto.fromJS(item));
                }
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (var _b = 0, _c = data["grantedPermissionNames"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    };
    GetUserPermissionsForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetUserPermissionsForEditOutput();
        result.init(data);
        return result;
    };
    GetUserPermissionsForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (var _i = 0, _a = this.permissions; _i < _a.length; _i++) {
                var item = _a[_i];
                data["permissions"].push(item.toJSON());
            }
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (var _b = 0, _c = this.grantedPermissionNames; _b < _c.length; _b++) {
                var item = _c[_b];
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    };
    GetUserPermissionsForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetUserPermissionsForEditOutput();
        result.init(json);
        return result;
    };
    return GetUserPermissionsForEditOutput;
}());
exports.GetUserPermissionsForEditOutput = GetUserPermissionsForEditOutput;
var NullableIdDtoOfInt64 = /** @class */ (function () {
    function NullableIdDtoOfInt64(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NullableIdDtoOfInt64.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
        }
    };
    NullableIdDtoOfInt64.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NullableIdDtoOfInt64();
        result.init(data);
        return result;
    };
    NullableIdDtoOfInt64.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    };
    NullableIdDtoOfInt64.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NullableIdDtoOfInt64();
        result.init(json);
        return result;
    };
    return NullableIdDtoOfInt64;
}());
exports.NullableIdDtoOfInt64 = NullableIdDtoOfInt64;
var EntityDtoOfInt64 = /** @class */ (function () {
    function EntityDtoOfInt64(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EntityDtoOfInt64.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
        }
    };
    EntityDtoOfInt64.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EntityDtoOfInt64();
        result.init(data);
        return result;
    };
    EntityDtoOfInt64.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    };
    EntityDtoOfInt64.prototype.clone = function () {
        var json = this.toJSON();
        var result = new EntityDtoOfInt64();
        result.init(json);
        return result;
    };
    return EntityDtoOfInt64;
}());
exports.EntityDtoOfInt64 = EntityDtoOfInt64;
var UpdateUserPermissionsInput = /** @class */ (function () {
    function UpdateUserPermissionsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.grantedPermissionNames = [];
        }
    }
    UpdateUserPermissionsInput.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [];
                for (var _i = 0, _a = data["grantedPermissionNames"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.grantedPermissionNames.push(item);
                }
            }
        }
    };
    UpdateUserPermissionsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UpdateUserPermissionsInput();
        result.init(data);
        return result;
    };
    UpdateUserPermissionsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (var _i = 0, _a = this.grantedPermissionNames; _i < _a.length; _i++) {
                var item = _a[_i];
                data["grantedPermissionNames"].push(item);
            }
        }
        return data;
    };
    UpdateUserPermissionsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UpdateUserPermissionsInput();
        result.init(json);
        return result;
    };
    return UpdateUserPermissionsInput;
}());
exports.UpdateUserPermissionsInput = UpdateUserPermissionsInput;
var PagedResultDtoOfLinkedUserDto = /** @class */ (function () {
    function PagedResultDtoOfLinkedUserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfLinkedUserDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(LinkedUserDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfLinkedUserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfLinkedUserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfLinkedUserDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfLinkedUserDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfLinkedUserDto;
}());
exports.PagedResultDtoOfLinkedUserDto = PagedResultDtoOfLinkedUserDto;
var LinkedUserDto = /** @class */ (function () {
    function LinkedUserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LinkedUserDto.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.tenancyName = data["tenancyName"];
            this.username = data["username"];
            this.id = data["id"];
        }
    };
    LinkedUserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LinkedUserDto();
        result.init(data);
        return result;
    };
    LinkedUserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["tenancyName"] = this.tenancyName;
        data["username"] = this.username;
        data["id"] = this.id;
        return data;
    };
    LinkedUserDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LinkedUserDto();
        result.init(json);
        return result;
    };
    return LinkedUserDto;
}());
exports.LinkedUserDto = LinkedUserDto;
var ListResultDtoOfLinkedUserDto = /** @class */ (function () {
    function ListResultDtoOfLinkedUserDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfLinkedUserDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(LinkedUserDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfLinkedUserDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfLinkedUserDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfLinkedUserDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfLinkedUserDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfLinkedUserDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfLinkedUserDto;
}());
exports.ListResultDtoOfLinkedUserDto = ListResultDtoOfLinkedUserDto;
var LinkToUserInput = /** @class */ (function () {
    function LinkToUserInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    LinkToUserInput.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.usernameOrEmailAddress = data["usernameOrEmailAddress"];
            this.password = data["password"];
        }
    };
    LinkToUserInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new LinkToUserInput();
        result.init(data);
        return result;
    };
    LinkToUserInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["usernameOrEmailAddress"] = this.usernameOrEmailAddress;
        data["password"] = this.password;
        return data;
    };
    LinkToUserInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new LinkToUserInput();
        result.init(json);
        return result;
    };
    return LinkToUserInput;
}());
exports.LinkToUserInput = LinkToUserInput;
var UnlinkUserInput = /** @class */ (function () {
    function UnlinkUserInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UnlinkUserInput.prototype.init = function (data) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
        }
    };
    UnlinkUserInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UnlinkUserInput();
        result.init(data);
        return result;
    };
    UnlinkUserInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        return data;
    };
    UnlinkUserInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UnlinkUserInput();
        result.init(json);
        return result;
    };
    return UnlinkUserInput;
}());
exports.UnlinkUserInput = UnlinkUserInput;
var ListResultDtoOfUserLoginAttemptDto = /** @class */ (function () {
    function ListResultDtoOfUserLoginAttemptDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ListResultDtoOfUserLoginAttemptDto.prototype.init = function (data) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(UserLoginAttemptDto.fromJS(item));
                }
            }
        }
    };
    ListResultDtoOfUserLoginAttemptDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(data);
        return result;
    };
    ListResultDtoOfUserLoginAttemptDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    ListResultDtoOfUserLoginAttemptDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ListResultDtoOfUserLoginAttemptDto();
        result.init(json);
        return result;
    };
    return ListResultDtoOfUserLoginAttemptDto;
}());
exports.ListResultDtoOfUserLoginAttemptDto = ListResultDtoOfUserLoginAttemptDto;
var UserLoginAttemptDto = /** @class */ (function () {
    function UserLoginAttemptDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    UserLoginAttemptDto.prototype.init = function (data) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.result = data["result"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
        }
    };
    UserLoginAttemptDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new UserLoginAttemptDto();
        result.init(data);
        return result;
    };
    UserLoginAttemptDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["result"] = this.result;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        return data;
    };
    UserLoginAttemptDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new UserLoginAttemptDto();
        result.init(json);
        return result;
    };
    return UserLoginAttemptDto;
}());
exports.UserLoginAttemptDto = UserLoginAttemptDto;
var CreateOrUpdateVerifiableSetInput = /** @class */ (function () {
    function CreateOrUpdateVerifiableSetInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.verifiableSet = new VerifiableSetEditDto();
        }
    }
    CreateOrUpdateVerifiableSetInput.prototype.init = function (data) {
        if (data) {
            this.verifiableSet = data["verifiableSet"] ? VerifiableSetEditDto.fromJS(data["verifiableSet"]) : new VerifiableSetEditDto();
        }
    };
    CreateOrUpdateVerifiableSetInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateVerifiableSetInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateVerifiableSetInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["verifiableSet"] = this.verifiableSet ? this.verifiableSet.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateVerifiableSetInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateVerifiableSetInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateVerifiableSetInput;
}());
exports.CreateOrUpdateVerifiableSetInput = CreateOrUpdateVerifiableSetInput;
var VerifiableSetEditDto = /** @class */ (function () {
    function VerifiableSetEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    VerifiableSetEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.deviceId = data["deviceId"];
            this.verifiableType = data["verifiableType"];
            this.isEnabled = data["isEnabled"];
        }
    };
    VerifiableSetEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new VerifiableSetEditDto();
        result.init(data);
        return result;
    };
    VerifiableSetEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceId"] = this.deviceId;
        data["verifiableType"] = this.verifiableType;
        data["isEnabled"] = this.isEnabled;
        return data;
    };
    VerifiableSetEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new VerifiableSetEditDto();
        result.init(json);
        return result;
    };
    return VerifiableSetEditDto;
}());
exports.VerifiableSetEditDto = VerifiableSetEditDto;
var VerifiableSetListDto = /** @class */ (function () {
    function VerifiableSetListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    VerifiableSetListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.deviceId = data["deviceId"];
            this.verifiableType = data["verifiableType"];
            this.isEnabled = data["isEnabled"];
            this.device = data["device"] ? Device.fromJS(data["device"]) : undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    VerifiableSetListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new VerifiableSetListDto();
        result.init(data);
        return result;
    };
    VerifiableSetListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["deviceId"] = this.deviceId;
        data["verifiableType"] = this.verifiableType;
        data["isEnabled"] = this.isEnabled;
        data["device"] = this.device ? this.device.toJSON() : undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    VerifiableSetListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new VerifiableSetListDto();
        result.init(json);
        return result;
    };
    return VerifiableSetListDto;
}());
exports.VerifiableSetListDto = VerifiableSetListDto;
var GetVerifiableSetForEditOutput = /** @class */ (function () {
    function GetVerifiableSetForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetVerifiableSetForEditOutput.prototype.init = function (data) {
        if (data) {
            this.verifiableSet = data["verifiableSet"] ? VerifiableSetEditDto.fromJS(data["verifiableSet"]) : undefined;
        }
    };
    GetVerifiableSetForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetVerifiableSetForEditOutput();
        result.init(data);
        return result;
    };
    GetVerifiableSetForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["verifiableSet"] = this.verifiableSet ? this.verifiableSet.toJSON() : undefined;
        return data;
    };
    GetVerifiableSetForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetVerifiableSetForEditOutput();
        result.init(json);
        return result;
    };
    return GetVerifiableSetForEditOutput;
}());
exports.GetVerifiableSetForEditOutput = GetVerifiableSetForEditOutput;
var PagedResultDtoOfVerifiableSetListDto = /** @class */ (function () {
    function PagedResultDtoOfVerifiableSetListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfVerifiableSetListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(VerifiableSetListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfVerifiableSetListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfVerifiableSetListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfVerifiableSetListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfVerifiableSetListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfVerifiableSetListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfVerifiableSetListDto;
}());
exports.PagedResultDtoOfVerifiableSetListDto = PagedResultDtoOfVerifiableSetListDto;
var GetLatestWebLogsOutput = /** @class */ (function () {
    function GetLatestWebLogsOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetLatestWebLogsOutput.prototype.init = function (data) {
        if (data) {
            if (data["latestWebLogLines"] && data["latestWebLogLines"].constructor === Array) {
                this.latestWebLogLines = [];
                for (var _i = 0, _a = data["latestWebLogLines"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.latestWebLogLines.push(item);
                }
            }
        }
    };
    GetLatestWebLogsOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetLatestWebLogsOutput();
        result.init(data);
        return result;
    };
    GetLatestWebLogsOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.latestWebLogLines && this.latestWebLogLines.constructor === Array) {
            data["latestWebLogLines"] = [];
            for (var _i = 0, _a = this.latestWebLogLines; _i < _a.length; _i++) {
                var item = _a[_i];
                data["latestWebLogLines"].push(item);
            }
        }
        return data;
    };
    GetLatestWebLogsOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetLatestWebLogsOutput();
        result.init(json);
        return result;
    };
    return GetLatestWebLogsOutput;
}());
exports.GetLatestWebLogsOutput = GetLatestWebLogsOutput;
var CreateOrUpdateWechatAppConfigInput = /** @class */ (function () {
    function CreateOrUpdateWechatAppConfigInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.wechatAppConfig = new WechatAppConfigEditDto();
        }
    }
    CreateOrUpdateWechatAppConfigInput.prototype.init = function (data) {
        if (data) {
            this.wechatAppConfig = data["wechatAppConfig"] ? WechatAppConfigEditDto.fromJS(data["wechatAppConfig"]) : new WechatAppConfigEditDto();
        }
    };
    CreateOrUpdateWechatAppConfigInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateWechatAppConfigInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateWechatAppConfigInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["wechatAppConfig"] = this.wechatAppConfig ? this.wechatAppConfig.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateWechatAppConfigInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateWechatAppConfigInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateWechatAppConfigInput;
}());
exports.CreateOrUpdateWechatAppConfigInput = CreateOrUpdateWechatAppConfigInput;
var WechatAppConfigEditDto = /** @class */ (function () {
    function WechatAppConfigEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    WechatAppConfigEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.appId = data["appId"];
            this.appSecret = data["appSecret"];
            this.token = data["token"];
            this.encodingAESKey = data["encodingAESKey"];
            this.name = data["name"];
            this.appOrgId = data["appOrgId"];
            this.appType = data["appType"];
            this.qrCodeUrl = data["qrCodeUrl"];
        }
    };
    WechatAppConfigEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new WechatAppConfigEditDto();
        result.init(data);
        return result;
    };
    WechatAppConfigEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["appId"] = this.appId;
        data["appSecret"] = this.appSecret;
        data["token"] = this.token;
        data["encodingAESKey"] = this.encodingAESKey;
        data["name"] = this.name;
        data["appOrgId"] = this.appOrgId;
        data["appType"] = this.appType;
        data["qrCodeUrl"] = this.qrCodeUrl;
        return data;
    };
    WechatAppConfigEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new WechatAppConfigEditDto();
        result.init(json);
        return result;
    };
    return WechatAppConfigEditDto;
}());
exports.WechatAppConfigEditDto = WechatAppConfigEditDto;
var WechatAppTypeEnum;
(function (WechatAppTypeEnum) {
    WechatAppTypeEnum[WechatAppTypeEnum["\u8BA2\u9605\u53F7"] = "订阅号"] = "\u8BA2\u9605\u53F7";
    WechatAppTypeEnum[WechatAppTypeEnum["\u8BA4\u8BC1\u8BA2\u9605\u53F7"] = "认证订阅号"] = "\u8BA4\u8BC1\u8BA2\u9605\u53F7";
    WechatAppTypeEnum[WechatAppTypeEnum["\u670D\u52A1\u53F7"] = "服务号"] = "\u670D\u52A1\u53F7";
    WechatAppTypeEnum[WechatAppTypeEnum["\u8BA4\u8BC1\u670D\u52A1\u53F7"] = "认证服务号"] = "\u8BA4\u8BC1\u670D\u52A1\u53F7";
})(WechatAppTypeEnum = exports.WechatAppTypeEnum || (exports.WechatAppTypeEnum = {}));
var WechatAppConfigListDto = /** @class */ (function () {
    function WechatAppConfigListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    WechatAppConfigListDto.prototype.init = function (data) {
        if (data) {
            this.appId = data["appId"];
            this.name = data["name"];
            this.appType = data["appType"];
            this.appTypeStr = data["appTypeStr"];
            this.qrCodeUrl = data["qrCodeUrl"];
            this.registered = data["registered"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    WechatAppConfigListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new WechatAppConfigListDto();
        result.init(data);
        return result;
    };
    WechatAppConfigListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["name"] = this.name;
        data["appType"] = this.appType;
        data["appTypeStr"] = this.appTypeStr;
        data["qrCodeUrl"] = this.qrCodeUrl;
        data["registered"] = this.registered;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    WechatAppConfigListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new WechatAppConfigListDto();
        result.init(json);
        return result;
    };
    return WechatAppConfigListDto;
}());
exports.WechatAppConfigListDto = WechatAppConfigListDto;
var GetWechatAppConfigForEditOutput = /** @class */ (function () {
    function GetWechatAppConfigForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetWechatAppConfigForEditOutput.prototype.init = function (data) {
        if (data) {
            this.wechatAppConfig = data["wechatAppConfig"] ? WechatAppConfigEditDto.fromJS(data["wechatAppConfig"]) : undefined;
            if (data["wechatAppTypeList"] && data["wechatAppTypeList"].constructor === Array) {
                this.wechatAppTypeList = [];
                for (var _i = 0, _a = data["wechatAppTypeList"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.wechatAppTypeList.push(KeyValuePairOfStringAndInt32.fromJS(item));
                }
            }
        }
    };
    GetWechatAppConfigForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetWechatAppConfigForEditOutput();
        result.init(data);
        return result;
    };
    GetWechatAppConfigForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["wechatAppConfig"] = this.wechatAppConfig ? this.wechatAppConfig.toJSON() : undefined;
        if (this.wechatAppTypeList && this.wechatAppTypeList.constructor === Array) {
            data["wechatAppTypeList"] = [];
            for (var _i = 0, _a = this.wechatAppTypeList; _i < _a.length; _i++) {
                var item = _a[_i];
                data["wechatAppTypeList"].push(item.toJSON());
            }
        }
        return data;
    };
    GetWechatAppConfigForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetWechatAppConfigForEditOutput();
        result.init(json);
        return result;
    };
    return GetWechatAppConfigForEditOutput;
}());
exports.GetWechatAppConfigForEditOutput = GetWechatAppConfigForEditOutput;
var KeyValuePairOfStringAndInt32 = /** @class */ (function () {
    function KeyValuePairOfStringAndInt32(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    KeyValuePairOfStringAndInt32.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.value = data["value"];
        }
    };
    KeyValuePairOfStringAndInt32.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new KeyValuePairOfStringAndInt32();
        result.init(data);
        return result;
    };
    KeyValuePairOfStringAndInt32.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    };
    KeyValuePairOfStringAndInt32.prototype.clone = function () {
        var json = this.toJSON();
        var result = new KeyValuePairOfStringAndInt32();
        result.init(json);
        return result;
    };
    return KeyValuePairOfStringAndInt32;
}());
exports.KeyValuePairOfStringAndInt32 = KeyValuePairOfStringAndInt32;
var PagedResultDtoOfWechatAppConfigListDto = /** @class */ (function () {
    function PagedResultDtoOfWechatAppConfigListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfWechatAppConfigListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(WechatAppConfigListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfWechatAppConfigListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfWechatAppConfigListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfWechatAppConfigListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfWechatAppConfigListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfWechatAppConfigListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfWechatAppConfigListDto;
}());
exports.PagedResultDtoOfWechatAppConfigListDto = PagedResultDtoOfWechatAppConfigListDto;
var GetImageTextMaterialsInput = /** @class */ (function () {
    function GetImageTextMaterialsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetImageTextMaterialsInput.prototype.init = function (data) {
        if (data) {
            this.appId = data["appId"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetImageTextMaterialsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetImageTextMaterialsInput();
        result.init(data);
        return result;
    };
    GetImageTextMaterialsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetImageTextMaterialsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetImageTextMaterialsInput();
        result.init(json);
        return result;
    };
    return GetImageTextMaterialsInput;
}());
exports.GetImageTextMaterialsInput = GetImageTextMaterialsInput;
var PagedResultDtoOfMediaList_News_Item = /** @class */ (function () {
    function PagedResultDtoOfMediaList_News_Item(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfMediaList_News_Item.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(MediaList_News_Item.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfMediaList_News_Item.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfMediaList_News_Item();
        result.init(data);
        return result;
    };
    PagedResultDtoOfMediaList_News_Item.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfMediaList_News_Item.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfMediaList_News_Item();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfMediaList_News_Item;
}());
exports.PagedResultDtoOfMediaList_News_Item = PagedResultDtoOfMediaList_News_Item;
var MediaList_News_Item = /** @class */ (function () {
    function MediaList_News_Item(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MediaList_News_Item.prototype.init = function (data) {
        if (data) {
            this.media_id = data["media_id"];
            this.content = data["content"] ? Media_News_Content.fromJS(data["content"]) : undefined;
            this.update_time = data["update_time"];
        }
    };
    MediaList_News_Item.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MediaList_News_Item();
        result.init(data);
        return result;
    };
    MediaList_News_Item.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["media_id"] = this.media_id;
        data["content"] = this.content ? this.content.toJSON() : undefined;
        data["update_time"] = this.update_time;
        return data;
    };
    MediaList_News_Item.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MediaList_News_Item();
        result.init(json);
        return result;
    };
    return MediaList_News_Item;
}());
exports.MediaList_News_Item = MediaList_News_Item;
var Media_News_Content = /** @class */ (function () {
    function Media_News_Content(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Media_News_Content.prototype.init = function (data) {
        if (data) {
            if (data["news_item"] && data["news_item"].constructor === Array) {
                this.news_item = [];
                for (var _i = 0, _a = data["news_item"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.news_item.push(Media_News_Content_Item.fromJS(item));
                }
            }
        }
    };
    Media_News_Content.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Media_News_Content();
        result.init(data);
        return result;
    };
    Media_News_Content.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.news_item && this.news_item.constructor === Array) {
            data["news_item"] = [];
            for (var _i = 0, _a = this.news_item; _i < _a.length; _i++) {
                var item = _a[_i];
                data["news_item"].push(item.toJSON());
            }
        }
        return data;
    };
    Media_News_Content.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Media_News_Content();
        result.init(json);
        return result;
    };
    return Media_News_Content;
}());
exports.Media_News_Content = Media_News_Content;
var Media_News_Content_Item = /** @class */ (function () {
    function Media_News_Content_Item(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Media_News_Content_Item.prototype.init = function (data) {
        if (data) {
            this.url = data["url"];
            this.thumb_url = data["thumb_url"];
            this.thumb_media_id = data["thumb_media_id"];
            this.author = data["author"];
            this.title = data["title"];
            this.content_source_url = data["content_source_url"];
            this.content = data["content"];
            this.digest = data["digest"];
            this.show_cover_pic = data["show_cover_pic"];
            this.need_open_comment = data["need_open_comment"];
            this.only_fans_can_comment = data["only_fans_can_comment"];
        }
    };
    Media_News_Content_Item.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Media_News_Content_Item();
        result.init(data);
        return result;
    };
    Media_News_Content_Item.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["thumb_url"] = this.thumb_url;
        data["thumb_media_id"] = this.thumb_media_id;
        data["author"] = this.author;
        data["title"] = this.title;
        data["content_source_url"] = this.content_source_url;
        data["content"] = this.content;
        data["digest"] = this.digest;
        data["show_cover_pic"] = this.show_cover_pic;
        data["need_open_comment"] = this.need_open_comment;
        data["only_fans_can_comment"] = this.only_fans_can_comment;
        return data;
    };
    Media_News_Content_Item.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Media_News_Content_Item();
        result.init(json);
        return result;
    };
    return Media_News_Content_Item;
}());
exports.Media_News_Content_Item = Media_News_Content_Item;
var GetOtherMaterialsInput = /** @class */ (function () {
    function GetOtherMaterialsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetOtherMaterialsInput.prototype.init = function (data) {
        if (data) {
            this.appId = data["appId"];
            this.materialType = data["materialType"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetOtherMaterialsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetOtherMaterialsInput();
        result.init(data);
        return result;
    };
    GetOtherMaterialsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        data["materialType"] = this.materialType;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetOtherMaterialsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetOtherMaterialsInput();
        result.init(json);
        return result;
    };
    return GetOtherMaterialsInput;
}());
exports.GetOtherMaterialsInput = GetOtherMaterialsInput;
var UploadMediaFileType;
(function (UploadMediaFileType) {
    UploadMediaFileType[UploadMediaFileType["Image"] = "image"] = "Image";
    UploadMediaFileType[UploadMediaFileType["Voice"] = "voice"] = "Voice";
    UploadMediaFileType[UploadMediaFileType["Video"] = "video"] = "Video";
    UploadMediaFileType[UploadMediaFileType["Thumb"] = "thumb"] = "Thumb";
    UploadMediaFileType[UploadMediaFileType["News"] = "news"] = "News";
})(UploadMediaFileType = exports.UploadMediaFileType || (exports.UploadMediaFileType = {}));
var PagedResultDtoOfMediaList_Others_Item = /** @class */ (function () {
    function PagedResultDtoOfMediaList_Others_Item(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfMediaList_Others_Item.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(MediaList_Others_Item.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfMediaList_Others_Item.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfMediaList_Others_Item();
        result.init(data);
        return result;
    };
    PagedResultDtoOfMediaList_Others_Item.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfMediaList_Others_Item.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfMediaList_Others_Item();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfMediaList_Others_Item;
}());
exports.PagedResultDtoOfMediaList_Others_Item = PagedResultDtoOfMediaList_Others_Item;
var MediaList_Others_Item = /** @class */ (function () {
    function MediaList_Others_Item(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MediaList_Others_Item.prototype.init = function (data) {
        if (data) {
            this.media_id = data["media_id"];
            this.name = data["name"];
            this.update_time = data["update_time"];
            this.url = data["url"];
        }
    };
    MediaList_Others_Item.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MediaList_Others_Item();
        result.init(data);
        return result;
    };
    MediaList_Others_Item.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["media_id"] = this.media_id;
        data["name"] = this.name;
        data["update_time"] = this.update_time;
        data["url"] = this.url;
        return data;
    };
    MediaList_Others_Item.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MediaList_Others_Item();
        result.init(json);
        return result;
    };
    return MediaList_Others_Item;
}());
exports.MediaList_Others_Item = MediaList_Others_Item;
/** 创建或编辑菜单 */
var CreateOrEditWechatMenuInput = /** @class */ (function () {
    function CreateOrEditWechatMenuInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CreateOrEditWechatMenuInput.prototype.init = function (data) {
        if (data) {
            this.appId = data["appId"];
            if (data["menu"] && data["menu"].constructor === Array) {
                this.menu = [];
                for (var _i = 0, _a = data["menu"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.menu.push(MenuFull_RootButton.fromJS(item));
                }
            }
            this.matchRule = data["matchRule"] ? MenuMatchRule.fromJS(data["matchRule"]) : undefined;
        }
    };
    CreateOrEditWechatMenuInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrEditWechatMenuInput();
        result.init(data);
        return result;
    };
    CreateOrEditWechatMenuInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        if (this.menu && this.menu.constructor === Array) {
            data["menu"] = [];
            for (var _i = 0, _a = this.menu; _i < _a.length; _i++) {
                var item = _a[_i];
                data["menu"].push(item.toJSON());
            }
        }
        data["matchRule"] = this.matchRule ? this.matchRule.toJSON() : undefined;
        return data;
    };
    CreateOrEditWechatMenuInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrEditWechatMenuInput();
        result.init(json);
        return result;
    };
    return CreateOrEditWechatMenuInput;
}());
exports.CreateOrEditWechatMenuInput = CreateOrEditWechatMenuInput;
var MenuFull_RootButton = /** @class */ (function () {
    function MenuFull_RootButton(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MenuFull_RootButton.prototype.init = function (data) {
        if (data) {
            this.type = data["type"];
            this.key = data["key"];
            this.name = data["name"];
            this.url = data["url"];
            this.news_info = data["news_info"] ? NewsInfo.fromJS(data["news_info"]) : undefined;
            this.appid = data["appid"];
            this.pagepath = data["pagepath"];
            this.media_id = data["media_id"];
            if (data["sub_button"] && data["sub_button"].constructor === Array) {
                this.sub_button = [];
                for (var _i = 0, _a = data["sub_button"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.sub_button.push(MenuFull_RootButton.fromJS(item));
                }
            }
        }
    };
    MenuFull_RootButton.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MenuFull_RootButton();
        result.init(data);
        return result;
    };
    MenuFull_RootButton.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["key"] = this.key;
        data["name"] = this.name;
        data["url"] = this.url;
        data["news_info"] = this.news_info ? this.news_info.toJSON() : undefined;
        data["appid"] = this.appid;
        data["pagepath"] = this.pagepath;
        data["media_id"] = this.media_id;
        if (this.sub_button && this.sub_button.constructor === Array) {
            data["sub_button"] = [];
            for (var _i = 0, _a = this.sub_button; _i < _a.length; _i++) {
                var item = _a[_i];
                data["sub_button"].push(item.toJSON());
            }
        }
        return data;
    };
    MenuFull_RootButton.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MenuFull_RootButton();
        result.init(json);
        return result;
    };
    return MenuFull_RootButton;
}());
exports.MenuFull_RootButton = MenuFull_RootButton;
var MenuMatchRule = /** @class */ (function () {
    function MenuMatchRule(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    MenuMatchRule.prototype.init = function (data) {
        if (data) {
            this.tag_id = data["tag_id"];
            this.group_id = data["group_id"];
            this.sex = data["sex"];
            this.country = data["country"];
            this.province = data["province"];
            this.city = data["city"];
            this.client_platform_type = data["client_platform_type"];
            this.language = data["language"];
        }
    };
    MenuMatchRule.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new MenuMatchRule();
        result.init(data);
        return result;
    };
    MenuMatchRule.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["tag_id"] = this.tag_id;
        data["group_id"] = this.group_id;
        data["sex"] = this.sex;
        data["country"] = this.country;
        data["province"] = this.province;
        data["city"] = this.city;
        data["client_platform_type"] = this.client_platform_type;
        data["language"] = this.language;
        return data;
    };
    MenuMatchRule.prototype.clone = function () {
        var json = this.toJSON();
        var result = new MenuMatchRule();
        result.init(json);
        return result;
    };
    return MenuMatchRule;
}());
exports.MenuMatchRule = MenuMatchRule;
var NewsInfo = /** @class */ (function () {
    function NewsInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NewsInfo.prototype.init = function (data) {
        if (data) {
            if (data["list"] && data["list"].constructor === Array) {
                this.list = [];
                for (var _i = 0, _a = data["list"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.list.push(NewsInfoItem.fromJS(item));
                }
            }
        }
    };
    NewsInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NewsInfo();
        result.init(data);
        return result;
    };
    NewsInfo.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.list && this.list.constructor === Array) {
            data["list"] = [];
            for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
                var item = _a[_i];
                data["list"].push(item.toJSON());
            }
        }
        return data;
    };
    NewsInfo.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NewsInfo();
        result.init(json);
        return result;
    };
    return NewsInfo;
}());
exports.NewsInfo = NewsInfo;
var NewsInfoItem = /** @class */ (function () {
    function NewsInfoItem(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    NewsInfoItem.prototype.init = function (data) {
        if (data) {
            this.title = data["title"];
            this.author = data["author"];
            this.digest = data["digest"];
            this.show_cover = data["show_cover"];
            this.cover_url = data["cover_url"];
            this.content_url = data["content_url"];
            this.source_url = data["source_url"];
        }
    };
    NewsInfoItem.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new NewsInfoItem();
        result.init(data);
        return result;
    };
    NewsInfoItem.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["author"] = this.author;
        data["digest"] = this.digest;
        data["show_cover"] = this.show_cover;
        data["cover_url"] = this.cover_url;
        data["content_url"] = this.content_url;
        data["source_url"] = this.source_url;
        return data;
    };
    NewsInfoItem.prototype.clone = function () {
        var json = this.toJSON();
        var result = new NewsInfoItem();
        result.init(json);
        return result;
    };
    return NewsInfoItem;
}());
exports.NewsInfoItem = NewsInfoItem;
var GetWechatMenuForEditOutput = /** @class */ (function () {
    function GetWechatMenuForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetWechatMenuForEditOutput.prototype.init = function (data) {
        if (data) {
            this.menu = data["menu"];
            this.conditionalmenu = data["conditionalmenu"];
            if (data["menuTypeList"] && data["menuTypeList"].constructor === Array) {
                this.menuTypeList = [];
                for (var _i = 0, _a = data["menuTypeList"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.menuTypeList.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
        }
    };
    GetWechatMenuForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetWechatMenuForEditOutput();
        result.init(data);
        return result;
    };
    GetWechatMenuForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["menu"] = this.menu;
        data["conditionalmenu"] = this.conditionalmenu;
        if (this.menuTypeList && this.menuTypeList.constructor === Array) {
            data["menuTypeList"] = [];
            for (var _i = 0, _a = this.menuTypeList; _i < _a.length; _i++) {
                var item = _a[_i];
                data["menuTypeList"].push(item.toJSON());
            }
        }
        return data;
    };
    GetWechatMenuForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetWechatMenuForEditOutput();
        result.init(json);
        return result;
    };
    return GetWechatMenuForEditOutput;
}());
exports.GetWechatMenuForEditOutput = GetWechatMenuForEditOutput;
var CreateOrUpdateWharfInput = /** @class */ (function () {
    function CreateOrUpdateWharfInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.wharf = new WharfEditDto();
        }
    }
    CreateOrUpdateWharfInput.prototype.init = function (data) {
        if (data) {
            this.wharf = data["wharf"] ? WharfEditDto.fromJS(data["wharf"]) : new WharfEditDto();
        }
    };
    CreateOrUpdateWharfInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CreateOrUpdateWharfInput();
        result.init(data);
        return result;
    };
    CreateOrUpdateWharfInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["wharf"] = this.wharf ? this.wharf.toJSON() : undefined;
        return data;
    };
    CreateOrUpdateWharfInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CreateOrUpdateWharfInput();
        result.init(json);
        return result;
    };
    return CreateOrUpdateWharfInput;
}());
exports.CreateOrUpdateWharfInput = CreateOrUpdateWharfInput;
var WharfEditDto = /** @class */ (function () {
    function WharfEditDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    WharfEditDto.prototype.init = function (data) {
        if (data) {
            this.id = data["id"];
            this.wharfName = data["wharfName"];
            this.wharfNo = data["wharfNo"];
            this.wharfLeader = data["wharfLeader"];
            this.leaderMobile = data["leaderMobile"];
            this.wharfPosition = data["wharfPosition"];
            this.isEenable = data["isEenable"];
        }
    };
    WharfEditDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new WharfEditDto();
        result.init(data);
        return result;
    };
    WharfEditDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["wharfName"] = this.wharfName;
        data["wharfNo"] = this.wharfNo;
        data["wharfLeader"] = this.wharfLeader;
        data["leaderMobile"] = this.leaderMobile;
        data["wharfPosition"] = this.wharfPosition;
        data["isEenable"] = this.isEenable;
        return data;
    };
    WharfEditDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new WharfEditDto();
        result.init(json);
        return result;
    };
    return WharfEditDto;
}());
exports.WharfEditDto = WharfEditDto;
var WharfListDto = /** @class */ (function () {
    function WharfListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    WharfListDto.prototype.init = function (data) {
        if (data) {
            this.branchId = data["branchId"];
            this.wharfName = data["wharfName"];
            this.wharfNo = data["wharfNo"];
            this.wharfLeader = data["wharfLeader"];
            this.leaderMobile = data["leaderMobile"];
            this.wharfPosition = data["wharfPosition"];
            this.isEenable = data["isEenable"];
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : undefined;
            this.branch = data["branch"] ? Branch.fromJS(data["branch"]) : undefined;
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    };
    WharfListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new WharfListDto();
        result.init(data);
        return result;
    };
    WharfListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["branchId"] = this.branchId;
        data["wharfName"] = this.wharfName;
        data["wharfNo"] = this.wharfNo;
        data["wharfLeader"] = this.wharfLeader;
        data["leaderMobile"] = this.leaderMobile;
        data["wharfPosition"] = this.wharfPosition;
        data["isEenable"] = this.isEenable;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : undefined;
        data["branch"] = this.branch ? this.branch.toJSON() : undefined;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data;
    };
    WharfListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new WharfListDto();
        result.init(json);
        return result;
    };
    return WharfListDto;
}());
exports.WharfListDto = WharfListDto;
var GetWharfForEditOutput = /** @class */ (function () {
    function GetWharfForEditOutput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetWharfForEditOutput.prototype.init = function (data) {
        if (data) {
            this.wharf = data["wharf"] ? WharfEditDto.fromJS(data["wharf"]) : undefined;
        }
    };
    GetWharfForEditOutput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetWharfForEditOutput();
        result.init(data);
        return result;
    };
    GetWharfForEditOutput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["wharf"] = this.wharf ? this.wharf.toJSON() : undefined;
        return data;
    };
    GetWharfForEditOutput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetWharfForEditOutput();
        result.init(json);
        return result;
    };
    return GetWharfForEditOutput;
}());
exports.GetWharfForEditOutput = GetWharfForEditOutput;
var GetWharfsInput = /** @class */ (function () {
    function GetWharfsInput(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetWharfsInput.prototype.init = function (data) {
        if (data) {
            if (data["queryData"] && data["queryData"].constructor === Array) {
                this.queryData = [];
                for (var _i = 0, _a = data["queryData"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.queryData.push(QueryData.fromJS(item));
                }
            }
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    };
    GetWharfsInput.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetWharfsInput();
        result.init(data);
        return result;
    };
    GetWharfsInput.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.queryData && this.queryData.constructor === Array) {
            data["queryData"] = [];
            for (var _i = 0, _a = this.queryData; _i < _a.length; _i++) {
                var item = _a[_i];
                data["queryData"].push(item.toJSON());
            }
        }
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data;
    };
    GetWharfsInput.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetWharfsInput();
        result.init(json);
        return result;
    };
    return GetWharfsInput;
}());
exports.GetWharfsInput = GetWharfsInput;
var PagedResultDtoOfWharfListDto = /** @class */ (function () {
    function PagedResultDtoOfWharfListDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfWharfListDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(WharfListDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfWharfListDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfWharfListDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfWharfListDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfWharfListDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfWharfListDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfWharfListDto;
}());
exports.PagedResultDtoOfWharfListDto = PagedResultDtoOfWharfListDto;
var BoatRunningStatusDto = /** @class */ (function () {
    function BoatRunningStatusDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BoatRunningStatusDto.prototype.init = function (data) {
        if (data) {
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.saled = data["saled"];
            this.rate = data["rate"];
        }
    };
    BoatRunningStatusDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BoatRunningStatusDto();
        result.init(data);
        return result;
    };
    BoatRunningStatusDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["saled"] = this.saled;
        data["rate"] = this.rate;
        return data;
    };
    BoatRunningStatusDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BoatRunningStatusDto();
        result.init(json);
        return result;
    };
    return BoatRunningStatusDto;
}());
exports.BoatRunningStatusDto = BoatRunningStatusDto;
var AnalyticType;
(function (AnalyticType) {
    AnalyticType[AnalyticType["Daily"] = "Daily"] = "Daily";
    AnalyticType[AnalyticType["Weekly"] = "Weekly"] = "Weekly";
    AnalyticType[AnalyticType["Monthly"] = "Monthly"] = "Monthly";
    AnalyticType[AnalyticType["Yearly"] = "Yearly"] = "Yearly";
})(AnalyticType = exports.AnalyticType || (exports.AnalyticType = {}));
/** 首页营收状况Dto */
var RevenueAnalyticsResultDto = /** @class */ (function () {
    function RevenueAnalyticsResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    RevenueAnalyticsResultDto.prototype.init = function (data) {
        if (data) {
            this.customerAnal = data["customerAnal"] ? CustomerAnalytics.fromJS(data["customerAnal"]) : undefined;
            this.financeAnal = data["financeAnal"] ? FinanceAnalytics.fromJS(data["financeAnal"]) : undefined;
        }
    };
    RevenueAnalyticsResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new RevenueAnalyticsResultDto();
        result.init(data);
        return result;
    };
    RevenueAnalyticsResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["customerAnal"] = this.customerAnal ? this.customerAnal.toJSON() : undefined;
        data["financeAnal"] = this.financeAnal ? this.financeAnal.toJSON() : undefined;
        return data;
    };
    RevenueAnalyticsResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new RevenueAnalyticsResultDto();
        result.init(json);
        return result;
    };
    return RevenueAnalyticsResultDto;
}());
exports.RevenueAnalyticsResultDto = RevenueAnalyticsResultDto;
var CustomerAnalytics = /** @class */ (function () {
    function CustomerAnalytics(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    CustomerAnalytics.prototype.init = function (data) {
        if (data) {
            if (data["timeSpan"] && data["timeSpan"].constructor === Array) {
                this.timeSpan = [];
                for (var _i = 0, _a = data["timeSpan"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.timeSpan.push(item);
                }
            }
            if (data["count"] && data["count"].constructor === Array) {
                this.count = [];
                for (var _b = 0, _c = data["count"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.count.push(item);
                }
            }
            this.totalCount = data["totalCount"];
        }
    };
    CustomerAnalytics.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new CustomerAnalytics();
        result.init(data);
        return result;
    };
    CustomerAnalytics.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.timeSpan && this.timeSpan.constructor === Array) {
            data["timeSpan"] = [];
            for (var _i = 0, _a = this.timeSpan; _i < _a.length; _i++) {
                var item = _a[_i];
                data["timeSpan"].push(item);
            }
        }
        if (this.count && this.count.constructor === Array) {
            data["count"] = [];
            for (var _b = 0, _c = this.count; _b < _c.length; _b++) {
                var item = _c[_b];
                data["count"].push(item);
            }
        }
        data["totalCount"] = this.totalCount;
        return data;
    };
    CustomerAnalytics.prototype.clone = function () {
        var json = this.toJSON();
        var result = new CustomerAnalytics();
        result.init(json);
        return result;
    };
    return CustomerAnalytics;
}());
exports.CustomerAnalytics = CustomerAnalytics;
var FinanceAnalytics = /** @class */ (function () {
    function FinanceAnalytics(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    FinanceAnalytics.prototype.init = function (data) {
        if (data) {
            if (data["timeSpan"] && data["timeSpan"].constructor === Array) {
                this.timeSpan = [];
                for (var _i = 0, _a = data["timeSpan"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.timeSpan.push(item);
                }
            }
            if (data["amount"] && data["amount"].constructor === Array) {
                this.amount = [];
                for (var _b = 0, _c = data["amount"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.amount.push(item);
                }
            }
            this.totalAmount = data["totalAmount"];
        }
    };
    FinanceAnalytics.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new FinanceAnalytics();
        result.init(data);
        return result;
    };
    FinanceAnalytics.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        if (this.timeSpan && this.timeSpan.constructor === Array) {
            data["timeSpan"] = [];
            for (var _i = 0, _a = this.timeSpan; _i < _a.length; _i++) {
                var item = _a[_i];
                data["timeSpan"].push(item);
            }
        }
        if (this.amount && this.amount.constructor === Array) {
            data["amount"] = [];
            for (var _b = 0, _c = this.amount; _b < _c.length; _b++) {
                var item = _c[_b];
                data["amount"].push(item);
            }
        }
        data["totalAmount"] = this.totalAmount;
        return data;
    };
    FinanceAnalytics.prototype.clone = function () {
        var json = this.toJSON();
        var result = new FinanceAnalytics();
        result.init(json);
        return result;
    };
    return FinanceAnalytics;
}());
exports.FinanceAnalytics = FinanceAnalytics;
var ScheduleAnalResultDto = /** @class */ (function () {
    function ScheduleAnalResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleAnalResultDto.prototype.init = function (data) {
        if (data) {
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
        }
    };
    ScheduleAnalResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleAnalResultDto();
        result.init(data);
        return result;
    };
    ScheduleAnalResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        return data;
    };
    ScheduleAnalResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleAnalResultDto();
        result.init(json);
        return result;
    };
    return ScheduleAnalResultDto;
}());
exports.ScheduleAnalResultDto = ScheduleAnalResultDto;
var TicketRatesResult = /** @class */ (function () {
    function TicketRatesResult(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TicketRatesResult.prototype.init = function (data) {
        if (data) {
            this.ticketTypeId = data["ticketTypeId"];
            this.ticketTypeName = data["ticketTypeName"];
            this.count = data["count"];
        }
    };
    TicketRatesResult.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TicketRatesResult();
        result.init(data);
        return result;
    };
    TicketRatesResult.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticketTypeId"] = this.ticketTypeId;
        data["ticketTypeName"] = this.ticketTypeName;
        data["count"] = this.count;
        return data;
    };
    TicketRatesResult.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TicketRatesResult();
        result.init(json);
        return result;
    };
    return TicketRatesResult;
}());
exports.TicketRatesResult = TicketRatesResult;
var StatsPagedResultDtoOfGetOrderSourceResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfGetOrderSourceResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfGetOrderSourceResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? GetOrderSourceResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(GetOrderSourceResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfGetOrderSourceResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfGetOrderSourceResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfGetOrderSourceResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfGetOrderSourceResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfGetOrderSourceResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfGetOrderSourceResultDto;
}());
exports.StatsPagedResultDtoOfGetOrderSourceResultDto = StatsPagedResultDtoOfGetOrderSourceResultDto;
var GetOrderSourceResultDto = /** @class */ (function () {
    function GetOrderSourceResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetOrderSourceResultDto.prototype.init = function (data) {
        if (data) {
            this.source = data["source"] ? Source.fromJS(data["source"]) : undefined;
            this.saleCount = data["saleCount"];
            this.refundCount = data["refundCount"];
            this.totalCount = data["totalCount"];
            this.saleAmount = data["saleAmount"];
            this.refundAmount = data["refundAmount"];
            this.totalAmount = data["totalAmount"];
        }
    };
    GetOrderSourceResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetOrderSourceResultDto();
        result.init(data);
        return result;
    };
    GetOrderSourceResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["source"] = this.source ? this.source.toJSON() : undefined;
        data["saleCount"] = this.saleCount;
        data["refundCount"] = this.refundCount;
        data["totalCount"] = this.totalCount;
        data["saleAmount"] = this.saleAmount;
        data["refundAmount"] = this.refundAmount;
        data["totalAmount"] = this.totalAmount;
        return data;
    };
    GetOrderSourceResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetOrderSourceResultDto();
        result.init(json);
        return result;
    };
    return GetOrderSourceResultDto;
}());
exports.GetOrderSourceResultDto = GetOrderSourceResultDto;
var StatsPagedResultDtoOfGetPayMethodResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfGetPayMethodResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfGetPayMethodResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? GetPayMethodResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(GetPayMethodResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfGetPayMethodResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfGetPayMethodResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfGetPayMethodResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfGetPayMethodResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfGetPayMethodResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfGetPayMethodResultDto;
}());
exports.StatsPagedResultDtoOfGetPayMethodResultDto = StatsPagedResultDtoOfGetPayMethodResultDto;
var GetPayMethodResultDto = /** @class */ (function () {
    function GetPayMethodResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    GetPayMethodResultDto.prototype.init = function (data) {
        if (data) {
            this.payMethod = data["payMethod"] ? PayMethod.fromJS(data["payMethod"]) : undefined;
            this.saleCount = data["saleCount"];
            this.refundCount = data["refundCount"];
            this.totalCount = data["totalCount"];
            this.saleAmount = data["saleAmount"];
            this.refundAmount = data["refundAmount"];
            this.totalAmount = data["totalAmount"];
        }
    };
    GetPayMethodResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new GetPayMethodResultDto();
        result.init(data);
        return result;
    };
    GetPayMethodResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["payMethod"] = this.payMethod ? this.payMethod.toJSON() : undefined;
        data["saleCount"] = this.saleCount;
        data["refundCount"] = this.refundCount;
        data["totalCount"] = this.totalCount;
        data["saleAmount"] = this.saleAmount;
        data["refundAmount"] = this.refundAmount;
        data["totalAmount"] = this.totalAmount;
        return data;
    };
    GetPayMethodResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new GetPayMethodResultDto();
        result.init(json);
        return result;
    };
    return GetPayMethodResultDto;
}());
exports.GetPayMethodResultDto = GetPayMethodResultDto;
var StatsPagedResultDtoOfScheduleResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfScheduleResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfScheduleResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? ScheduleResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfScheduleResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfScheduleResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfScheduleResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfScheduleResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfScheduleResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfScheduleResultDto;
}());
exports.StatsPagedResultDtoOfScheduleResultDto = StatsPagedResultDtoOfScheduleResultDto;
/** 航线统计Dto */
var ScheduleResultDto = /** @class */ (function () {
    function ScheduleResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleResultDto.prototype.init = function (data) {
        if (data) {
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boatCount = data["boatCount"];
            if (data["boats"] && data["boats"].constructor === Array) {
                this.boats = [];
                for (var _i = 0, _a = data["boats"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.boats.push(BoatInfo.fromJS(item));
                }
            }
            this.saleCount = data["saleCount"];
            this.refundCount = data["refundCount"];
            this.totalCount = data["totalCount"];
            this.saleAmount = data["saleAmount"];
            this.refundAmount = data["refundAmount"];
            this.totalAmount = data["totalAmount"];
        }
    };
    ScheduleResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleResultDto();
        result.init(data);
        return result;
    };
    ScheduleResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boatCount"] = this.boatCount;
        if (this.boats && this.boats.constructor === Array) {
            data["boats"] = [];
            for (var _i = 0, _a = this.boats; _i < _a.length; _i++) {
                var item = _a[_i];
                data["boats"].push(item.toJSON());
            }
        }
        data["saleCount"] = this.saleCount;
        data["refundCount"] = this.refundCount;
        data["totalCount"] = this.totalCount;
        data["saleAmount"] = this.saleAmount;
        data["refundAmount"] = this.refundAmount;
        data["totalAmount"] = this.totalAmount;
        return data;
    };
    ScheduleResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleResultDto();
        result.init(json);
        return result;
    };
    return ScheduleResultDto;
}());
exports.ScheduleResultDto = ScheduleResultDto;
/** 游船航次信息 */
var BoatInfo = /** @class */ (function () {
    function BoatInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    BoatInfo.prototype.init = function (data) {
        if (data) {
            this.boatName = data["boatName"];
            this.count = data["count"];
        }
    };
    BoatInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new BoatInfo();
        result.init(data);
        return result;
    };
    BoatInfo.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["boatName"] = this.boatName;
        data["count"] = this.count;
        return data;
    };
    BoatInfo.prototype.clone = function () {
        var json = this.toJSON();
        var result = new BoatInfo();
        result.init(json);
        return result;
    };
    return BoatInfo;
}());
exports.BoatInfo = BoatInfo;
var StatsPagedResultDtoOfScheduleDetailResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfScheduleDetailResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfScheduleDetailResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? ScheduleDetailResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleDetailResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfScheduleDetailResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfScheduleDetailResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfScheduleDetailResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfScheduleDetailResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfScheduleDetailResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfScheduleDetailResultDto;
}());
exports.StatsPagedResultDtoOfScheduleDetailResultDto = StatsPagedResultDtoOfScheduleDetailResultDto;
/** 航线统计详情 */
var ScheduleDetailResultDto = /** @class */ (function () {
    function ScheduleDetailResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleDetailResultDto.prototype.init = function (data) {
        if (data) {
            this.scheduleId = data["scheduleId"];
            this.scheduleCode = data["scheduleCode"];
            this.saleDate = data["saleDate"] ? moment(data["saleDate"].toString()) : undefined;
            this.startTime = data["startTime"] ? moment(data["startTime"].toString()) : undefined;
            this.endTime = data["endTime"] ? moment(data["endTime"].toString()) : undefined;
            this.seatQuantity = data["seatQuantity"];
            this.surplusQuantity = data["surplusQuantity"];
            this.scheduleStatus = data["scheduleStatus"];
            this.auditStatus = data["auditStatus"];
            this.checkStartTime = data["checkStartTime"] ? moment(data["checkStartTime"].toString()) : undefined;
            this.checkEndTime = data["checkEndTime"] ? moment(data["checkEndTime"].toString()) : undefined;
            this.reserveQuantity = data["reserveQuantity"];
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            if (data["tickets"] && data["tickets"].constructor === Array) {
                this.tickets = [];
                for (var _i = 0, _a = data["tickets"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.tickets.push(Ticket.fromJS(item));
                }
            }
            this.saledCount = data["saledCount"];
        }
    };
    ScheduleDetailResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleDetailResultDto();
        result.init(data);
        return result;
    };
    ScheduleDetailResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["scheduleId"] = this.scheduleId;
        data["scheduleCode"] = this.scheduleCode;
        data["saleDate"] = this.saleDate ? this.saleDate.toISOString() : undefined;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : undefined;
        data["seatQuantity"] = this.seatQuantity;
        data["surplusQuantity"] = this.surplusQuantity;
        data["scheduleStatus"] = this.scheduleStatus;
        data["auditStatus"] = this.auditStatus;
        data["checkStartTime"] = this.checkStartTime ? this.checkStartTime.toISOString() : undefined;
        data["checkEndTime"] = this.checkEndTime ? this.checkEndTime.toISOString() : undefined;
        data["reserveQuantity"] = this.reserveQuantity;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        if (this.tickets && this.tickets.constructor === Array) {
            data["tickets"] = [];
            for (var _i = 0, _a = this.tickets; _i < _a.length; _i++) {
                var item = _a[_i];
                data["tickets"].push(item.toJSON());
            }
        }
        data["saledCount"] = this.saledCount;
        return data;
    };
    ScheduleDetailResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleDetailResultDto();
        result.init(json);
        return result;
    };
    return ScheduleDetailResultDto;
}());
exports.ScheduleDetailResultDto = ScheduleDetailResultDto;
var StatsPagedResultDtoOfScheduleCheckResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfScheduleCheckResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfScheduleCheckResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? ScheduleCheckResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleCheckResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfScheduleCheckResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfScheduleCheckResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfScheduleCheckResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfScheduleCheckResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfScheduleCheckResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfScheduleCheckResultDto;
}());
exports.StatsPagedResultDtoOfScheduleCheckResultDto = StatsPagedResultDtoOfScheduleCheckResultDto;
var ScheduleCheckResultDto = /** @class */ (function () {
    function ScheduleCheckResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleCheckResultDto.prototype.init = function (data) {
        if (data) {
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            this.wharf = data["wharf"] ? Wharf.fromJS(data["wharf"]) : undefined;
            this.totalQuantity = data["totalQuantity"];
            this.checkedQuantity = data["checkedQuantity"];
            this.uncheckedQuantity = data["uncheckedQuantity"];
        }
    };
    ScheduleCheckResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleCheckResultDto();
        result.init(data);
        return result;
    };
    ScheduleCheckResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        data["wharf"] = this.wharf ? this.wharf.toJSON() : undefined;
        data["totalQuantity"] = this.totalQuantity;
        data["checkedQuantity"] = this.checkedQuantity;
        data["uncheckedQuantity"] = this.uncheckedQuantity;
        return data;
    };
    ScheduleCheckResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleCheckResultDto();
        result.init(json);
        return result;
    };
    return ScheduleCheckResultDto;
}());
exports.ScheduleCheckResultDto = ScheduleCheckResultDto;
var PagedResultDtoOfScheduleCheckDetailDto = /** @class */ (function () {
    function PagedResultDtoOfScheduleCheckDetailDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfScheduleCheckDetailDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleCheckDetailDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfScheduleCheckDetailDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfScheduleCheckDetailDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfScheduleCheckDetailDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfScheduleCheckDetailDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfScheduleCheckDetailDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfScheduleCheckDetailDto;
}());
exports.PagedResultDtoOfScheduleCheckDetailDto = PagedResultDtoOfScheduleCheckDetailDto;
var ScheduleCheckDetailDto = /** @class */ (function () {
    function ScheduleCheckDetailDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleCheckDetailDto.prototype.init = function (data) {
        if (data) {
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.ticketDetail = data["ticketDetail"] ? TicketDetail.fromJS(data["ticketDetail"]) : undefined;
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
        }
    };
    ScheduleCheckDetailDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleCheckDetailDto();
        result.init(data);
        return result;
    };
    ScheduleCheckDetailDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["ticketDetail"] = this.ticketDetail ? this.ticketDetail.toJSON() : undefined;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        return data;
    };
    ScheduleCheckDetailDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleCheckDetailDto();
        result.init(json);
        return result;
    };
    return ScheduleCheckDetailDto;
}());
exports.ScheduleCheckDetailDto = ScheduleCheckDetailDto;
var StatsPagedResultDtoOfScheduleTicketResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfScheduleTicketResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfScheduleTicketResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? ScheduleTicketResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleTicketResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfScheduleTicketResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfScheduleTicketResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfScheduleTicketResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfScheduleTicketResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfScheduleTicketResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfScheduleTicketResultDto;
}());
exports.StatsPagedResultDtoOfScheduleTicketResultDto = StatsPagedResultDtoOfScheduleTicketResultDto;
var ScheduleTicketResultDto = /** @class */ (function () {
    function ScheduleTicketResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleTicketResultDto.prototype.init = function (data) {
        if (data) {
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.route = data["route"] ? Route.fromJS(data["route"]) : undefined;
            this.boat = data["boat"] ? Boat.fromJS(data["boat"]) : undefined;
            this.saleCount = data["saleCount"];
            this.refundCount = data["refundCount"];
            this.totalCount = data["totalCount"];
            this.saleAmount = data["saleAmount"];
            this.refundAmount = data["refundAmount"];
            this.totalAmount = data["totalAmount"];
        }
    };
    ScheduleTicketResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleTicketResultDto();
        result.init(data);
        return result;
    };
    ScheduleTicketResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["route"] = this.route ? this.route.toJSON() : undefined;
        data["boat"] = this.boat ? this.boat.toJSON() : undefined;
        data["saleCount"] = this.saleCount;
        data["refundCount"] = this.refundCount;
        data["totalCount"] = this.totalCount;
        data["saleAmount"] = this.saleAmount;
        data["refundAmount"] = this.refundAmount;
        data["totalAmount"] = this.totalAmount;
        return data;
    };
    ScheduleTicketResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleTicketResultDto();
        result.init(json);
        return result;
    };
    return ScheduleTicketResultDto;
}());
exports.ScheduleTicketResultDto = ScheduleTicketResultDto;
var PagedResultDtoOfScheduleTicketDetailResultDto = /** @class */ (function () {
    function PagedResultDtoOfScheduleTicketDetailResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PagedResultDtoOfScheduleTicketDetailResultDto.prototype.init = function (data) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleTicketDetailResultDto.fromJS(item));
                }
            }
        }
    };
    PagedResultDtoOfScheduleTicketDetailResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PagedResultDtoOfScheduleTicketDetailResultDto();
        result.init(data);
        return result;
    };
    PagedResultDtoOfScheduleTicketDetailResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    PagedResultDtoOfScheduleTicketDetailResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new PagedResultDtoOfScheduleTicketDetailResultDto();
        result.init(json);
        return result;
    };
    return PagedResultDtoOfScheduleTicketDetailResultDto;
}());
exports.PagedResultDtoOfScheduleTicketDetailResultDto = PagedResultDtoOfScheduleTicketDetailResultDto;
var ScheduleTicketDetailResultDto = /** @class */ (function () {
    function ScheduleTicketDetailResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ScheduleTicketDetailResultDto.prototype.init = function (data) {
        if (data) {
            this.ticket = data["ticket"] ? Ticket.fromJS(data["ticket"]) : undefined;
            this.schedule = data["schedule"] ? Schedule.fromJS(data["schedule"]) : undefined;
            this.ticketDetail = data["ticketDetail"] ? TicketDetail.fromJS(data["ticketDetail"]) : undefined;
            this.customer = data["customer"] ? Customer.fromJS(data["customer"]) : undefined;
            this.salePrice = data["salePrice"];
        }
    };
    ScheduleTicketDetailResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ScheduleTicketDetailResultDto();
        result.init(data);
        return result;
    };
    ScheduleTicketDetailResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["ticket"] = this.ticket ? this.ticket.toJSON() : undefined;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : undefined;
        data["ticketDetail"] = this.ticketDetail ? this.ticketDetail.toJSON() : undefined;
        data["customer"] = this.customer ? this.customer.toJSON() : undefined;
        data["salePrice"] = this.salePrice;
        return data;
    };
    ScheduleTicketDetailResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ScheduleTicketDetailResultDto();
        result.init(json);
        return result;
    };
    return ScheduleTicketDetailResultDto;
}());
exports.ScheduleTicketDetailResultDto = ScheduleTicketDetailResultDto;
var StatsPagedResultDtoOfSellerDailyResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfSellerDailyResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfSellerDailyResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? SellerDailyResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(SellerDailyResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfSellerDailyResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfSellerDailyResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfSellerDailyResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfSellerDailyResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfSellerDailyResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfSellerDailyResultDto;
}());
exports.StatsPagedResultDtoOfSellerDailyResultDto = StatsPagedResultDtoOfSellerDailyResultDto;
var SellerDailyResultDto = /** @class */ (function () {
    function SellerDailyResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SellerDailyResultDto.prototype.init = function (data) {
        if (data) {
            this.saler = data["saler"] ? User.fromJS(data["saler"]) : undefined;
            this.cashSaleAmount = data["cashSaleAmount"];
            this.weiChatSaleAmount = data["weiChatSaleAmount"];
            this.cardSaleAmount = data["cardSaleAmount"];
            this.zhiFuBaoSaleAmount = data["zhiFuBaoSaleAmount"];
            this.cashRefundAmount = data["cashRefundAmount"];
            this.weiChatRefundAmount = data["weiChatRefundAmount"];
            this.cardRefundAmount = data["cardRefundAmount"];
            this.zhiFuBaoRefundAmount = data["zhiFuBaoRefundAmount"];
            this.saleCount = data["saleCount"];
            this.refundCount = data["refundCount"];
            this.totalCount = data["totalCount"];
            this.totalSaleAmount = data["totalSaleAmount"];
            this.totalRefundAmount = data["totalRefundAmount"];
            this.totalAmount = data["totalAmount"];
        }
    };
    SellerDailyResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SellerDailyResultDto();
        result.init(data);
        return result;
    };
    SellerDailyResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["saler"] = this.saler ? this.saler.toJSON() : undefined;
        data["cashSaleAmount"] = this.cashSaleAmount;
        data["weiChatSaleAmount"] = this.weiChatSaleAmount;
        data["cardSaleAmount"] = this.cardSaleAmount;
        data["zhiFuBaoSaleAmount"] = this.zhiFuBaoSaleAmount;
        data["cashRefundAmount"] = this.cashRefundAmount;
        data["weiChatRefundAmount"] = this.weiChatRefundAmount;
        data["cardRefundAmount"] = this.cardRefundAmount;
        data["zhiFuBaoRefundAmount"] = this.zhiFuBaoRefundAmount;
        data["saleCount"] = this.saleCount;
        data["refundCount"] = this.refundCount;
        data["totalCount"] = this.totalCount;
        data["totalSaleAmount"] = this.totalSaleAmount;
        data["totalRefundAmount"] = this.totalRefundAmount;
        data["totalAmount"] = this.totalAmount;
        return data;
    };
    SellerDailyResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SellerDailyResultDto();
        result.init(json);
        return result;
    };
    return SellerDailyResultDto;
}());
exports.SellerDailyResultDto = SellerDailyResultDto;
var StatsPagedResultDtoOfSellerTicketResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfSellerTicketResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfSellerTicketResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? SellerTicketResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(SellerTicketResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfSellerTicketResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfSellerTicketResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfSellerTicketResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfSellerTicketResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfSellerTicketResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfSellerTicketResultDto;
}());
exports.StatsPagedResultDtoOfSellerTicketResultDto = StatsPagedResultDtoOfSellerTicketResultDto;
/** 售票员售票统计 */
var SellerTicketResultDto = /** @class */ (function () {
    function SellerTicketResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SellerTicketResultDto.prototype.init = function (data) {
        if (data) {
            this.saler = data["saler"] ? User.fromJS(data["saler"]) : undefined;
            this.cashSaleAmount = data["cashSaleAmount"];
            this.weiChatSaleAmount = data["weiChatSaleAmount"];
            this.cardSaleAmount = data["cardSaleAmount"];
            this.zhiFuBaoSaleAmount = data["zhiFuBaoSaleAmount"];
            this.cashRefundAmount = data["cashRefundAmount"];
            this.weiChatRefundAmount = data["weiChatRefundAmount"];
            this.cardRefundAmount = data["cardRefundAmount"];
            this.zhiFuBaoRefundAmount = data["zhiFuBaoRefundAmount"];
            this.cashSaleCount = data["cashSaleCount"];
            this.weiChatSaleCount = data["weiChatSaleCount"];
            this.cardSaleCount = data["cardSaleCount"];
            this.zhiFuBaoSaleCount = data["zhiFuBaoSaleCount"];
            this.cashRefundCount = data["cashRefundCount"];
            this.weiChatRefundCount = data["weiChatRefundCount"];
            this.cardRefundCount = data["cardRefundCount"];
            this.zhiFuBaoRefundCount = data["zhiFuBaoRefundCount"];
            this.cashTotalAmount = data["cashTotalAmount"];
            this.cashTotalCount = data["cashTotalCount"];
            this.weiChatTotalAmount = data["weiChatTotalAmount"];
            this.weiChatTotalCount = data["weiChatTotalCount"];
            this.cardTotalAmount = data["cardTotalAmount"];
            this.cardTotalCount = data["cardTotalCount"];
            this.zhiFuBaoTotalCount = data["zhiFuBaoTotalCount"];
            this.zhiFuBaoTotalAmount = data["zhiFuBaoTotalAmount"];
        }
    };
    SellerTicketResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SellerTicketResultDto();
        result.init(data);
        return result;
    };
    SellerTicketResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["saler"] = this.saler ? this.saler.toJSON() : undefined;
        data["cashSaleAmount"] = this.cashSaleAmount;
        data["weiChatSaleAmount"] = this.weiChatSaleAmount;
        data["cardSaleAmount"] = this.cardSaleAmount;
        data["zhiFuBaoSaleAmount"] = this.zhiFuBaoSaleAmount;
        data["cashRefundAmount"] = this.cashRefundAmount;
        data["weiChatRefundAmount"] = this.weiChatRefundAmount;
        data["cardRefundAmount"] = this.cardRefundAmount;
        data["zhiFuBaoRefundAmount"] = this.zhiFuBaoRefundAmount;
        data["cashSaleCount"] = this.cashSaleCount;
        data["weiChatSaleCount"] = this.weiChatSaleCount;
        data["cardSaleCount"] = this.cardSaleCount;
        data["zhiFuBaoSaleCount"] = this.zhiFuBaoSaleCount;
        data["cashRefundCount"] = this.cashRefundCount;
        data["weiChatRefundCount"] = this.weiChatRefundCount;
        data["cardRefundCount"] = this.cardRefundCount;
        data["zhiFuBaoRefundCount"] = this.zhiFuBaoRefundCount;
        data["cashTotalAmount"] = this.cashTotalAmount;
        data["cashTotalCount"] = this.cashTotalCount;
        data["weiChatTotalAmount"] = this.weiChatTotalAmount;
        data["weiChatTotalCount"] = this.weiChatTotalCount;
        data["cardTotalAmount"] = this.cardTotalAmount;
        data["cardTotalCount"] = this.cardTotalCount;
        data["zhiFuBaoTotalCount"] = this.zhiFuBaoTotalCount;
        data["zhiFuBaoTotalAmount"] = this.zhiFuBaoTotalAmount;
        return data;
    };
    SellerTicketResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SellerTicketResultDto();
        result.init(json);
        return result;
    };
    return SellerTicketResultDto;
}());
exports.SellerTicketResultDto = SellerTicketResultDto;
var StatsPagedResultDtoOfScheduleTicketDetailResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfScheduleTicketDetailResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfScheduleTicketDetailResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? ScheduleTicketDetailResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(ScheduleTicketDetailResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfScheduleTicketDetailResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfScheduleTicketDetailResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfScheduleTicketDetailResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfScheduleTicketDetailResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfScheduleTicketDetailResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfScheduleTicketDetailResultDto;
}());
exports.StatsPagedResultDtoOfScheduleTicketDetailResultDto = StatsPagedResultDtoOfScheduleTicketDetailResultDto;
var StatsPagedResultDtoOfTravelAgencyResultDto = /** @class */ (function () {
    function StatsPagedResultDtoOfTravelAgencyResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    StatsPagedResultDtoOfTravelAgencyResultDto.prototype.init = function (data) {
        if (data) {
            this.total = data["total"] ? TravelAgencyResultDto.fromJS(data["total"]) : undefined;
            if (data["filters"]) {
                this.filters = {};
                for (var key in data["filters"]) {
                    if (data["filters"].hasOwnProperty(key))
                        this.filters[key] = data["filters"][key] !== undefined ? data["filters"][key] : [];
                }
            }
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [];
                for (var _i = 0, _a = data["items"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.items.push(TravelAgencyResultDto.fromJS(item));
                }
            }
        }
    };
    StatsPagedResultDtoOfTravelAgencyResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new StatsPagedResultDtoOfTravelAgencyResultDto();
        result.init(data);
        return result;
    };
    StatsPagedResultDtoOfTravelAgencyResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["total"] = this.total ? this.total.toJSON() : undefined;
        if (this.filters) {
            data["filters"] = {};
            for (var key in this.filters) {
                if (this.filters.hasOwnProperty(key))
                    data["filters"][key] = this.filters[key];
            }
        }
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                data["items"].push(item.toJSON());
            }
        }
        return data;
    };
    StatsPagedResultDtoOfTravelAgencyResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new StatsPagedResultDtoOfTravelAgencyResultDto();
        result.init(json);
        return result;
    };
    return StatsPagedResultDtoOfTravelAgencyResultDto;
}());
exports.StatsPagedResultDtoOfTravelAgencyResultDto = StatsPagedResultDtoOfTravelAgencyResultDto;
var TravelAgencyResultDto = /** @class */ (function () {
    function TravelAgencyResultDto(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    TravelAgencyResultDto.prototype.init = function (data) {
        if (data) {
            this.travelAgency = data["travelAgency"] ? TravelAgency.fromJS(data["travelAgency"]) : undefined;
            this.saleCount = data["saleCount"];
            this.refundCount = data["refundCount"];
            this.totalCount = data["totalCount"];
            this.cashAmount = data["cashAmount"];
            this.cardAmount = data["cardAmount"];
            this.weiChatAmount = data["weiChatAmount"];
            this.zhiFuBaoAmount = data["zhiFuBaoAmount"];
            this.totalAmount = data["totalAmount"];
            this.cashRefund = data["cashRefund"];
            this.cardRefund = data["cardRefund"];
            this.weiChatRefund = data["weiChatRefund"];
            this.zhiFuBaoRefund = data["zhiFuBaoRefund"];
            this.totalRefund = data["totalRefund"];
            this.totalAll = data["totalAll"];
        }
    };
    TravelAgencyResultDto.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new TravelAgencyResultDto();
        result.init(data);
        return result;
    };
    TravelAgencyResultDto.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["travelAgency"] = this.travelAgency ? this.travelAgency.toJSON() : undefined;
        data["saleCount"] = this.saleCount;
        data["refundCount"] = this.refundCount;
        data["totalCount"] = this.totalCount;
        data["cashAmount"] = this.cashAmount;
        data["cardAmount"] = this.cardAmount;
        data["weiChatAmount"] = this.weiChatAmount;
        data["zhiFuBaoAmount"] = this.zhiFuBaoAmount;
        data["totalAmount"] = this.totalAmount;
        data["cashRefund"] = this.cashRefund;
        data["cardRefund"] = this.cardRefund;
        data["weiChatRefund"] = this.weiChatRefund;
        data["zhiFuBaoRefund"] = this.zhiFuBaoRefund;
        data["totalRefund"] = this.totalRefund;
        data["totalAll"] = this.totalAll;
        return data;
    };
    TravelAgencyResultDto.prototype.clone = function () {
        var json = this.toJSON();
        var result = new TravelAgencyResultDto();
        result.init(json);
        return result;
    };
    return TravelAgencyResultDto;
}());
exports.TravelAgencyResultDto = TravelAgencyResultDto;
var ActivateAccountModel = /** @class */ (function () {
    function ActivateAccountModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivateAccountModel.prototype.init = function (data) {
        if (data) {
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.userId = data["userId"];
            this.verificationCode = data["verificationCode"];
            this.activateType = data["activateType"];
        }
    };
    ActivateAccountModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivateAccountModel();
        result.init(data);
        return result;
    };
    ActivateAccountModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["userId"] = this.userId;
        data["verificationCode"] = this.verificationCode;
        data["activateType"] = this.activateType;
        return data;
    };
    ActivateAccountModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivateAccountModel();
        result.init(json);
        return result;
    };
    return ActivateAccountModel;
}());
exports.ActivateAccountModel = ActivateAccountModel;
var ActivateType;
(function (ActivateType) {
    ActivateType[ActivateType["NewAccount"] = "NewAccount"] = "NewAccount";
    ActivateType[ActivateType["BindExistAccount"] = "BindExistAccount"] = "BindExistAccount";
})(ActivateType = exports.ActivateType || (exports.ActivateType = {}));
var ActivateAccountResultModel = /** @class */ (function () {
    function ActivateAccountResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ActivateAccountResultModel.prototype.init = function (data) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.userId = data["userId"];
        }
    };
    ActivateAccountResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ActivateAccountResultModel();
        result.init(data);
        return result;
    };
    ActivateAccountResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        return data;
    };
    ActivateAccountResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ActivateAccountResultModel();
        result.init(json);
        return result;
    };
    return ActivateAccountResultModel;
}());
exports.ActivateAccountResultModel = ActivateAccountResultModel;
var AuthenticateModel = /** @class */ (function () {
    function AuthenticateModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.sourceCode = "Reception";
        }
    }
    AuthenticateModel.prototype.init = function (data) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.password = data["password"];
            this.verificationCode = data["verificationCode"];
            this.rememberClient = data["rememberClient"];
            this.returnUrl = data["returnUrl"];
            this.sourceCode = data["sourceCode"] !== undefined ? data["sourceCode"] : "Reception";
        }
    };
    AuthenticateModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuthenticateModel();
        result.init(data);
        return result;
    };
    AuthenticateModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["verificationCode"] = this.verificationCode;
        data["rememberClient"] = this.rememberClient;
        data["returnUrl"] = this.returnUrl;
        data["sourceCode"] = this.sourceCode;
        return data;
    };
    AuthenticateModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuthenticateModel();
        result.init(json);
        return result;
    };
    return AuthenticateModel;
}());
exports.AuthenticateModel = AuthenticateModel;
var AuthenticateResultModel = /** @class */ (function () {
    function AuthenticateResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AuthenticateResultModel.prototype.init = function (data) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.userId = data["userId"];
            this.shouldResetPassword = data["shouldResetPassword"];
            this.passwordResetCode = data["passwordResetCode"];
            this.returnUrl = data["returnUrl"];
            this.waitingForActivation = data["waitingForActivation"];
        }
    };
    AuthenticateResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AuthenticateResultModel();
        result.init(data);
        return result;
    };
    AuthenticateResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        data["shouldResetPassword"] = this.shouldResetPassword;
        data["passwordResetCode"] = this.passwordResetCode;
        data["returnUrl"] = this.returnUrl;
        data["waitingForActivation"] = this.waitingForActivation;
        return data;
    };
    AuthenticateResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AuthenticateResultModel();
        result.init(json);
        return result;
    };
    return AuthenticateResultModel;
}());
exports.AuthenticateResultModel = AuthenticateResultModel;
var ExternalAuthenticateModel = /** @class */ (function () {
    function ExternalAuthenticateModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExternalAuthenticateModel.prototype.init = function (data) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
        }
    };
    ExternalAuthenticateModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    };
    ExternalAuthenticateModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        return data;
    };
    ExternalAuthenticateModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExternalAuthenticateModel();
        result.init(json);
        return result;
    };
    return ExternalAuthenticateModel;
}());
exports.ExternalAuthenticateModel = ExternalAuthenticateModel;
var ExternalAuthenticateResultModel = /** @class */ (function () {
    function ExternalAuthenticateResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExternalAuthenticateResultModel.prototype.init = function (data) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
            this.userId = data["userId"];
        }
    };
    ExternalAuthenticateResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    };
    ExternalAuthenticateResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        data["userId"] = this.userId;
        return data;
    };
    ExternalAuthenticateResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExternalAuthenticateResultModel();
        result.init(json);
        return result;
    };
    return ExternalAuthenticateResultModel;
}());
exports.ExternalAuthenticateResultModel = ExternalAuthenticateResultModel;
var ExternalLoginProviderInfoModel = /** @class */ (function () {
    function ExternalLoginProviderInfoModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ExternalLoginProviderInfoModel.prototype.init = function (data) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
            if (data["additionalParams"]) {
                this.additionalParams = {};
                for (var key in data["additionalParams"]) {
                    if (data["additionalParams"].hasOwnProperty(key))
                        this.additionalParams[key] = data["additionalParams"][key];
                }
            }
        }
    };
    ExternalLoginProviderInfoModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    };
    ExternalLoginProviderInfoModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        if (this.additionalParams) {
            data["additionalParams"] = {};
            for (var key in this.additionalParams) {
                if (this.additionalParams.hasOwnProperty(key))
                    data["additionalParams"][key] = this.additionalParams[key];
            }
        }
        return data;
    };
    ExternalLoginProviderInfoModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ExternalLoginProviderInfoModel();
        result.init(json);
        return result;
    };
    return ExternalLoginProviderInfoModel;
}());
exports.ExternalLoginProviderInfoModel = ExternalLoginProviderInfoModel;
var ImpersonatedAuthenticateResultModel = /** @class */ (function () {
    function ImpersonatedAuthenticateResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ImpersonatedAuthenticateResultModel.prototype.init = function (data) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    };
    ImpersonatedAuthenticateResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ImpersonatedAuthenticateResultModel();
        result.init(data);
        return result;
    };
    ImpersonatedAuthenticateResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data;
    };
    ImpersonatedAuthenticateResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new ImpersonatedAuthenticateResultModel();
        result.init(json);
        return result;
    };
    return ImpersonatedAuthenticateResultModel;
}());
exports.ImpersonatedAuthenticateResultModel = ImpersonatedAuthenticateResultModel;
var SwitchedAccountAuthenticateResultModel = /** @class */ (function () {
    function SwitchedAccountAuthenticateResultModel(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    SwitchedAccountAuthenticateResultModel.prototype.init = function (data) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
        }
    };
    SwitchedAccountAuthenticateResultModel.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new SwitchedAccountAuthenticateResultModel();
        result.init(data);
        return result;
    };
    SwitchedAccountAuthenticateResultModel.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        return data;
    };
    SwitchedAccountAuthenticateResultModel.prototype.clone = function () {
        var json = this.toJSON();
        var result = new SwitchedAccountAuthenticateResultModel();
        result.init(json);
        return result;
    };
    return SwitchedAccountAuthenticateResultModel;
}());
exports.SwitchedAccountAuthenticateResultModel = SwitchedAccountAuthenticateResultModel;
var Login = /** @class */ (function () {
    function Login(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
        if (!data) {
            this.sourceCode = "Reception";
        }
    }
    Login.prototype.init = function (data) {
        if (data) {
            this.loginName = data["loginName"];
            this.loginPwd = data["loginPwd"];
            this.verificationCode = data["verificationCode"];
            this.rememberClient = data["rememberClient"];
            this.returnUrl = data["returnUrl"];
            this.sourceCode = data["sourceCode"] !== undefined ? data["sourceCode"] : "Reception";
        }
    };
    Login.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Login();
        result.init(data);
        return result;
    };
    Login.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["loginName"] = this.loginName;
        data["loginPwd"] = this.loginPwd;
        data["verificationCode"] = this.verificationCode;
        data["rememberClient"] = this.rememberClient;
        data["returnUrl"] = this.returnUrl;
        data["sourceCode"] = this.sourceCode;
        return data;
    };
    Login.prototype.clone = function () {
        var json = this.toJSON();
        var result = new Login();
        result.init(json);
        return result;
    };
    return Login;
}());
exports.Login = Login;
var CaptchaType;
(function (CaptchaType) {
    CaptchaType[CaptchaType["Defulat"] = "Defulat"] = "Defulat";
    CaptchaType[CaptchaType["HostTenantRegister"] = "HostTenantRegister"] = "HostTenantRegister";
    CaptchaType[CaptchaType["HostUserLogin"] = "HostUserLogin"] = "HostUserLogin";
    CaptchaType[CaptchaType["TenantUserRegister"] = "TenantUserRegister"] = "TenantUserRegister";
    CaptchaType[CaptchaType["TenantUserLogin"] = "TenantUserLogin"] = "TenantUserLogin";
})(CaptchaType = exports.CaptchaType || (exports.CaptchaType = {}));
var AjaxResult = /** @class */ (function () {
    function AjaxResult(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AjaxResult.prototype.init = function (data) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.message = data["message"];
            this.absoluteUri = data["absoluteUri"];
            this.isException = data["isException"];
            this.primaryId = data["primaryId"];
            this.data = data["data"];
        }
    };
    AjaxResult.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AjaxResult();
        result.init(data);
        return result;
    };
    AjaxResult.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        data["absoluteUri"] = this.absoluteUri;
        data["isException"] = this.isException;
        data["primaryId"] = this.primaryId;
        data["data"] = this.data;
        return data;
    };
    AjaxResult.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AjaxResult();
        result.init(json);
        return result;
    };
    return AjaxResult;
}());
exports.AjaxResult = AjaxResult;
var AccessTokenResult = /** @class */ (function () {
    function AccessTokenResult(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AccessTokenResult.prototype.init = function (data) {
        if (data) {
            this.access_token = data["access_token"];
            this.expires_in = data["expires_in"];
            this.errcode = data["errcode"];
            this.errorCodeValue = data["errorCodeValue"];
            this.errmsg = data["errmsg"];
            this.p2PData = data["p2PData"];
        }
    };
    AccessTokenResult.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AccessTokenResult();
        result.init(data);
        return result;
    };
    AccessTokenResult.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["access_token"] = this.access_token;
        data["expires_in"] = this.expires_in;
        data["errcode"] = this.errcode;
        data["errorCodeValue"] = this.errorCodeValue;
        data["errmsg"] = this.errmsg;
        data["p2PData"] = this.p2PData;
        return data;
    };
    AccessTokenResult.prototype.clone = function () {
        var json = this.toJSON();
        var result = new AccessTokenResult();
        result.init(json);
        return result;
    };
    return AccessTokenResult;
}());
exports.AccessTokenResult = AccessTokenResult;
var ReturnCode;
(function (ReturnCode) {
    ReturnCode[ReturnCode["\u8BF7\u6C42\u6210\u529F"] = "系统繁忙此时请开发者稍候再试"] = "\u8BF7\u6C42\u6210\u529F";
    ReturnCode[ReturnCode["\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u5DF2\u6CE8\u9500"] = "请求成功"] = "\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u5DF2\u6CE8\u9500";
    ReturnCode[ReturnCode["\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u4E0D\u5B58\u5728\u6216\u4F01\u4E1A\u4FE1\u606F\u672A\u66F4\u65B0"] = "获取access_token时AppSecret错误或者access_token无效"] = "\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u4E0D\u5B58\u5728\u6216\u4F01\u4E1A\u4FE1\u606F\u672A\u66F4\u65B0";
    ReturnCode[ReturnCode["\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u59D3\u540D\u4E0D\u4E00\u81F4"] = "不合法的凭证类型"] = "\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u59D3\u540D\u4E0D\u4E00\u81F4";
    ReturnCode[ReturnCode["\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u8EAB\u4EFD\u8BC1\u53F7\u7801\u4E0D\u4E00\u81F4"] = "不合法的OpenID"] = "\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u8EAB\u4EFD\u8BC1\u53F7\u7801\u4E0D\u4E00\u81F4";
    ReturnCode[ReturnCode["\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u8EAB\u4EFD\u8BC1\u53F7\u7801_\u5DE5\u5546\u6570\u636E\u672A\u66F4\u65B0_\u8BF75_15\u4E2A\u5DE5\u4F5C\u65E5\u4E4B\u540E\u5C1D\u8BD5"] = "不合法的媒体文件类型"] = "\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u8EAB\u4EFD\u8BC1\u53F7\u7801_\u5DE5\u5546\u6570\u636E\u672A\u66F4\u65B0_\u8BF75_15\u4E2A\u5DE5\u4F5C\u65E5\u4E4B\u540E\u5C1D\u8BD5";
    ReturnCode[ReturnCode["\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u4FE1\u606F\u6216\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u4FE1\u606F\u4E0D\u4E00\u81F4"] = "不合法的文件类型"] = "\u5DE5\u5546\u6570\u636E\u8FD4\u56DE_\u4F01\u4E1A\u4FE1\u606F\u6216\u6CD5\u5B9A\u4EE3\u8868\u4EBA\u4FE1\u606F\u4E0D\u4E00\u81F4";
    ReturnCode[ReturnCode["\u5BF9\u65B9\u4E0D\u662F\u7C89\u4E1D"] = "不合法的文件大小"] = "\u5BF9\u65B9\u4E0D\u662F\u7C89\u4E1D";
    ReturnCode[ReturnCode["\u53D1\u9001\u6D88\u606F\u5931\u8D25_\u5BF9\u65B9\u5173\u95ED\u4E86\u63A5\u6536\u6D88\u606F"] = "不合法的媒体文件id"] = "\u53D1\u9001\u6D88\u606F\u5931\u8D25_\u5BF9\u65B9\u5173\u95ED\u4E86\u63A5\u6536\u6D88\u606F";
    ReturnCode[ReturnCode["\u53D1\u9001\u6D88\u606F\u5931\u8D25_48\u5C0F\u65F6\u5185\u7528\u6237\u672A\u4E92\u52A8"] = "不合法的消息类型_40008"] = "\u53D1\u9001\u6D88\u606F\u5931\u8D25_48\u5C0F\u65F6\u5185\u7528\u6237\u672A\u4E92\u52A8";
    ReturnCode[ReturnCode["POST\u53C2\u6570\u975E\u6CD5"] = "不合法的图片文件大小"] = "POST\u53C2\u6570\u975E\u6CD5";
    ReturnCode[ReturnCode["\u83B7\u53D6access_token\u65F6AppSecret\u9519\u8BEF\u6216\u8005access_token\u65E0\u6548"] = "不合法的语音文件大小"] = "\u83B7\u53D6access_token\u65F6AppSecret\u9519\u8BEF\u6216\u8005access_token\u65E0\u6548";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u51ED\u8BC1\u7C7B\u578B"] = "不合法的视频文件大小"] = "\u4E0D\u5408\u6CD5\u7684\u51ED\u8BC1\u7C7B\u578B";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684OpenID"] = "不合法的缩略图文件大小"] = "\u4E0D\u5408\u6CD5\u7684OpenID";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5A92\u4F53\u6587\u4EF6\u7C7B\u578B"] = "不合法的APPID"] = "\u4E0D\u5408\u6CD5\u7684\u5A92\u4F53\u6587\u4EF6\u7C7B\u578B";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6587\u4EF6\u7C7B\u578B"] = "不合法的access_token"] = "\u4E0D\u5408\u6CD5\u7684\u6587\u4EF6\u7C7B\u578B";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6587\u4EF6\u5927\u5C0F"] = "不合法的菜单类型"] = "\u4E0D\u5408\u6CD5\u7684\u6587\u4EF6\u5927\u5C0F";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5A92\u4F53\u6587\u4EF6id"] = "不合法的按钮个数1"] = "\u4E0D\u5408\u6CD5\u7684\u5A92\u4F53\u6587\u4EF6id";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6D88\u606F\u7C7B\u578B_40008"] = "不合法的按钮个数2"] = "\u4E0D\u5408\u6CD5\u7684\u6D88\u606F\u7C7B\u578B_40008";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u56FE\u7247\u6587\u4EF6\u5927\u5C0F"] = "不合法的按钮名字长度"] = "\u4E0D\u5408\u6CD5\u7684\u56FE\u7247\u6587\u4EF6\u5927\u5C0F";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u8BED\u97F3\u6587\u4EF6\u5927\u5C0F"] = "不合法的按钮KEY长度"] = "\u4E0D\u5408\u6CD5\u7684\u8BED\u97F3\u6587\u4EF6\u5927\u5C0F";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u89C6\u9891\u6587\u4EF6\u5927\u5C0F"] = "不合法的按钮URL长度"] = "\u4E0D\u5408\u6CD5\u7684\u89C6\u9891\u6587\u4EF6\u5927\u5C0F";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u7F29\u7565\u56FE\u6587\u4EF6\u5927\u5C0F"] = "不合法的菜单版本号"] = "\u4E0D\u5408\u6CD5\u7684\u7F29\u7565\u56FE\u6587\u4EF6\u5927\u5C0F";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684APPID"] = "不合法的子菜单级数"] = "\u4E0D\u5408\u6CD5\u7684APPID";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684access_token"] = "不合法的子菜单按钮个数"] = "\u4E0D\u5408\u6CD5\u7684access_token";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u83DC\u5355\u7C7B\u578B"] = "不合法的子菜单按钮类型"] = "\u4E0D\u5408\u6CD5\u7684\u83DC\u5355\u7C7B\u578B";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6309\u94AE\u4E2A\u65701"] = "不合法的子菜单按钮名字长度"] = "\u4E0D\u5408\u6CD5\u7684\u6309\u94AE\u4E2A\u65701";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6309\u94AE\u4E2A\u65702"] = "不合法的子菜单按钮KEY长度"] = "\u4E0D\u5408\u6CD5\u7684\u6309\u94AE\u4E2A\u65702";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6309\u94AE\u540D\u5B57\u957F\u5EA6"] = "不合法的子菜单按钮URL长度"] = "\u4E0D\u5408\u6CD5\u7684\u6309\u94AE\u540D\u5B57\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6309\u94AEKEY\u957F\u5EA6"] = "不合法的自定义菜单使用用户"] = "\u4E0D\u5408\u6CD5\u7684\u6309\u94AEKEY\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u6309\u94AEURL\u957F\u5EA6"] = "不合法的oauth_code"] = "\u4E0D\u5408\u6CD5\u7684\u6309\u94AEURL\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u83DC\u5355\u7248\u672C\u53F7"] = "不合法的refresh_token"] = "\u4E0D\u5408\u6CD5\u7684\u83DC\u5355\u7248\u672C\u53F7";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u7EA7\u6570"] = "不合法的openid列表"] = "\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u7EA7\u6570";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AE\u4E2A\u6570"] = "不合法的openid列表长度"] = "\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AE\u4E2A\u6570";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AE\u7C7B\u578B"] = "不合法的请求字符不能包含uxxxx格式的字符"] = "\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AE\u7C7B\u578B";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AE\u540D\u5B57\u957F\u5EA6"] = "不合法的参数"] = "\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AE\u540D\u5B57\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AEKEY\u957F\u5EA6"] = "template_id不正确"] = "\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AEKEY\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AEURL\u957F\u5EA6"] = "不合法的请求格式"] = "\u4E0D\u5408\u6CD5\u7684\u5B50\u83DC\u5355\u6309\u94AEURL\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u81EA\u5B9A\u4E49\u83DC\u5355\u4F7F\u7528\u7528\u6237"] = "不合法的URL长度"] = "\u4E0D\u5408\u6CD5\u7684\u81EA\u5B9A\u4E49\u83DC\u5355\u4F7F\u7528\u7528\u6237";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684oauth_code"] = "不合法的分组id"] = "\u4E0D\u5408\u6CD5\u7684oauth_code";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684refresh_token"] = "分组名字不合法"] = "\u4E0D\u5408\u6CD5\u7684refresh_token";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684openid\u5217\u8868"] = "appsecret不正确"] = "\u4E0D\u5408\u6CD5\u7684openid\u5217\u8868";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684openid\u5217\u8868\u957F\u5EA6"] = "小程序Appid不存在"] = "\u4E0D\u5408\u6CD5\u7684openid\u5217\u8868\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u8BF7\u6C42\u5B57\u7B26\u4E0D\u80FD\u5305\u542Buxxxx\u683C\u5F0F\u7684\u5B57\u7B26"] = "缺少access_token参数"] = "\u4E0D\u5408\u6CD5\u7684\u8BF7\u6C42\u5B57\u7B26\u4E0D\u80FD\u5305\u542Buxxxx\u683C\u5F0F\u7684\u5B57\u7B26";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u53C2\u6570"] = "缺少appid参数"] = "\u4E0D\u5408\u6CD5\u7684\u53C2\u6570";
    ReturnCode[ReturnCode["Template_id\u4E0D\u6B63\u786E"] = "缺少refresh_token参数"] = "Template_id\u4E0D\u6B63\u786E";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u8BF7\u6C42\u683C\u5F0F"] = "缺少secret参数"] = "\u4E0D\u5408\u6CD5\u7684\u8BF7\u6C42\u683C\u5F0F";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684URL\u957F\u5EA6"] = "缺少多媒体文件数据"] = "\u4E0D\u5408\u6CD5\u7684URL\u957F\u5EA6";
    ReturnCode[ReturnCode["\u4E0D\u5408\u6CD5\u7684\u5206\u7EC4id"] = "缺少media_id参数"] = "\u4E0D\u5408\u6CD5\u7684\u5206\u7EC4id";
    ReturnCode[ReturnCode["\u5206\u7EC4\u540D\u5B57\u4E0D\u5408\u6CD5"] = "缺少子菜单数据"] = "\u5206\u7EC4\u540D\u5B57\u4E0D\u5408\u6CD5";
    ReturnCode[ReturnCode["\u8F93\u5165\u53C2\u6570\u6709\u8BEF"] = "缺少oauth_code"] = "\u8F93\u5165\u53C2\u6570\u6709\u8BEF";
    ReturnCode[ReturnCode["Appsecret\u4E0D\u6B63\u786E"] = "缺少openid"] = "Appsecret\u4E0D\u6B63\u786E";
    ReturnCode[ReturnCode["\u5C0F\u7A0B\u5E8FAppid\u4E0D\u5B58\u5728"] = "form_id不正确_或者过期"] = "\u5C0F\u7A0B\u5E8FAppid\u4E0D\u5B58\u5728";
    ReturnCode[ReturnCode["\u7F3A\u5C11access_token\u53C2\u6570"] = "form_id已被使用"] = "\u7F3A\u5C11access_token\u53C2\u6570";
    ReturnCode[ReturnCode["\u7F3A\u5C11appid\u53C2\u6570"] = "page不正确"] = "\u7F3A\u5C11appid\u53C2\u6570";
    ReturnCode[ReturnCode["\u7F3A\u5C11refresh_token\u53C2\u6570"] = "access_token超时"] = "\u7F3A\u5C11refresh_token\u53C2\u6570";
    ReturnCode[ReturnCode["\u7F3A\u5C11secret\u53C2\u6570"] = "refresh_token超时"] = "\u7F3A\u5C11secret\u53C2\u6570";
    ReturnCode[ReturnCode["\u7F3A\u5C11\u591A\u5A92\u4F53\u6587\u4EF6\u6570\u636E"] = "oauth_code超时"] = "\u7F3A\u5C11\u591A\u5A92\u4F53\u6587\u4EF6\u6570\u636E";
    ReturnCode[ReturnCode["\u7F3A\u5C11media_id\u53C2\u6570"] = "需要GET请求"] = "\u7F3A\u5C11media_id\u53C2\u6570";
    ReturnCode[ReturnCode["\u7F3A\u5C11\u5B50\u83DC\u5355\u6570\u636E"] = "需要POST请求"] = "\u7F3A\u5C11\u5B50\u83DC\u5355\u6570\u636E";
    ReturnCode[ReturnCode["\u7F3A\u5C11oauth_code"] = "需要HTTPS请求"] = "\u7F3A\u5C11oauth_code";
    ReturnCode[ReturnCode["\u7F3A\u5C11openid"] = "需要接收者关注"] = "\u7F3A\u5C11openid";
    ReturnCode[ReturnCode["Form_id\u4E0D\u6B63\u786E_\u6216\u8005\u8FC7\u671F"] = "需要好友关系"] = "Form_id\u4E0D\u6B63\u786E_\u6216\u8005\u8FC7\u671F";
    ReturnCode[ReturnCode["Form_id\u5DF2\u88AB\u4F7F\u7528"] = "多媒体文件为空"] = "Form_id\u5DF2\u88AB\u4F7F\u7528";
    ReturnCode[ReturnCode["Page\u4E0D\u6B63\u786E"] = "POST的数据包为空"] = "Page\u4E0D\u6B63\u786E";
    ReturnCode[ReturnCode["Access_token\u8D85\u65F6"] = "图文消息内容为空"] = "Access_token\u8D85\u65F6";
    ReturnCode[ReturnCode["Refresh_token\u8D85\u65F6"] = "文本消息内容为空"] = "Refresh_token\u8D85\u65F6";
    ReturnCode[ReturnCode["Oauth_code\u8D85\u65F6"] = "多媒体文件大小超过限制"] = "Oauth_code\u8D85\u65F6";
    ReturnCode[ReturnCode["\u9700\u8981GET\u8BF7\u6C42"] = "消息内容超过限制"] = "\u9700\u8981GET\u8BF7\u6C42";
    ReturnCode[ReturnCode["\u9700\u8981POST\u8BF7\u6C42"] = "标题字段超过限制"] = "\u9700\u8981POST\u8BF7\u6C42";
    ReturnCode[ReturnCode["\u9700\u8981HTTPS\u8BF7\u6C42"] = "描述字段超过限制"] = "\u9700\u8981HTTPS\u8BF7\u6C42";
    ReturnCode[ReturnCode["\u9700\u8981\u63A5\u6536\u8005\u5173\u6CE8"] = "链接字段超过限制"] = "\u9700\u8981\u63A5\u6536\u8005\u5173\u6CE8";
    ReturnCode[ReturnCode["\u9700\u8981\u597D\u53CB\u5173\u7CFB"] = "图片链接字段超过限制"] = "\u9700\u8981\u597D\u53CB\u5173\u7CFB";
    ReturnCode[ReturnCode["\u6CA1\u6709\u6743\u9650"] = "语音播放时间超过限制"] = "\u6CA1\u6709\u6743\u9650";
    ReturnCode[ReturnCode["\u591A\u5A92\u4F53\u6587\u4EF6\u4E3A\u7A7A"] = "图文消息超过限制"] = "\u591A\u5A92\u4F53\u6587\u4EF6\u4E3A\u7A7A";
    ReturnCode[ReturnCode["POST\u7684\u6570\u636E\u5305\u4E3A\u7A7A"] = "接口调用超过限制"] = "POST\u7684\u6570\u636E\u5305\u4E3A\u7A7A";
    ReturnCode[ReturnCode["\u56FE\u6587\u6D88\u606F\u5185\u5BB9\u4E3A\u7A7A"] = "创建菜单个数超过限制"] = "\u56FE\u6587\u6D88\u606F\u5185\u5BB9\u4E3A\u7A7A";
    ReturnCode[ReturnCode["\u6587\u672C\u6D88\u606F\u5185\u5BB9\u4E3A\u7A7A"] = "回复时间超过限制"] = "\u6587\u672C\u6D88\u606F\u5185\u5BB9\u4E3A\u7A7A";
    ReturnCode[ReturnCode["\u591A\u5A92\u4F53\u6587\u4EF6\u5927\u5C0F\u8D85\u8FC7\u9650\u5236"] = "系统分组不允许修改"] = "\u591A\u5A92\u4F53\u6587\u4EF6\u5927\u5C0F\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u6D88\u606F\u5185\u5BB9\u8D85\u8FC7\u9650\u5236"] = "分组名字过长"] = "\u6D88\u606F\u5185\u5BB9\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u6807\u9898\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236"] = "分组数量超过上限"] = "\u6807\u9898\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u63CF\u8FF0\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236"] = "不存在媒体数据"] = "\u63CF\u8FF0\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u94FE\u63A5\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236"] = "不存在的菜单版本"] = "\u94FE\u63A5\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u56FE\u7247\u94FE\u63A5\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236"] = "不存在的菜单数据"] = "\u56FE\u7247\u94FE\u63A5\u5B57\u6BB5\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u8BED\u97F3\u64AD\u653E\u65F6\u95F4\u8D85\u8FC7\u9650\u5236"] = "解析JSON_XML内容错误"] = "\u8BED\u97F3\u64AD\u653E\u65F6\u95F4\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u56FE\u6587\u6D88\u606F\u8D85\u8FC7\u9650\u5236"] = "api功能未授权"] = "\u56FE\u6587\u6D88\u606F\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u63A5\u53E3\u8C03\u7528\u8D85\u8FC7\u9650\u5236"] = "用户未授权该api"] = "\u63A5\u53E3\u8C03\u7528\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u521B\u5EFA\u83DC\u5355\u4E2A\u6570\u8D85\u8FC7\u9650\u5236"] = "参数错误invalid_parameter"] = "\u521B\u5EFA\u83DC\u5355\u4E2A\u6570\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u56DE\u590D\u65F6\u95F4\u8D85\u8FC7\u9650\u5236"] = "无效客服账号invalid_kf_account"] = "\u56DE\u590D\u65F6\u95F4\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u7CFB\u7EDF\u5206\u7EC4\u4E0D\u5141\u8BB8\u4FEE\u6539"] = "客服帐号已存在kf_account_exsited"] = "\u7CFB\u7EDF\u5206\u7EC4\u4E0D\u5141\u8BB8\u4FEE\u6539";
    ReturnCode[ReturnCode["\u5206\u7EC4\u540D\u5B57\u8FC7\u957F"] = "客服帐号名长度超过限制"] = "\u5206\u7EC4\u540D\u5B57\u8FC7\u957F";
    ReturnCode[ReturnCode["\u5206\u7EC4\u6570\u91CF\u8D85\u8FC7\u4E0A\u9650"] = "客服帐号名包含非法字符"] = "\u5206\u7EC4\u6570\u91CF\u8D85\u8FC7\u4E0A\u9650";
    ReturnCode[ReturnCode["\u4E0D\u5B58\u5728\u5A92\u4F53\u6570\u636E"] = "客服帐号个数超过限制"] = "\u4E0D\u5B58\u5728\u5A92\u4F53\u6570\u636E";
    ReturnCode[ReturnCode["\u4E0D\u5B58\u5728\u7684\u83DC\u5355\u7248\u672C"] = "无效头像文件类型invalid_file_type"] = "\u4E0D\u5B58\u5728\u7684\u83DC\u5355\u7248\u672C";
    ReturnCode[ReturnCode["\u4E0D\u5B58\u5728\u7684\u83DC\u5355\u6570\u636E"] = "系统错误system_error"] = "\u4E0D\u5B58\u5728\u7684\u83DC\u5355\u6570\u636E";
    ReturnCode[ReturnCode["\u89E3\u6790JSON_XML\u5185\u5BB9\u9519\u8BEF"] = "日期格式错误"] = "\u89E3\u6790JSON_XML\u5185\u5BB9\u9519\u8BEF";
    ReturnCode[ReturnCode["Api\u529F\u80FD\u672A\u6388\u6743"] = "日期范围错误"] = "Api\u529F\u80FD\u672A\u6388\u6743";
    ReturnCode[ReturnCode["\u7528\u6237\u672A\u6388\u6743\u8BE5api"] = "发送消息失败_48小时内用户未互动"] = "\u7528\u6237\u672A\u6388\u6743\u8BE5api";
    ReturnCode[ReturnCode["\u6CD5\u4EBA\u59D3\u540D\u4E0E\u5FAE\u4FE1\u53F7\u4E0D\u4E00\u81F4"] = "发送消息失败_该用户已被加入黑名单_无法向此发送消息"] = "\u6CD5\u4EBA\u59D3\u540D\u4E0E\u5FAE\u4FE1\u53F7\u4E0D\u4E00\u81F4";
    ReturnCode[ReturnCode["\u7CFB\u7EDF\u9519\u8BEFsystem_error"] = "发送消息失败_对方关闭了接收消息"] = "\u7CFB\u7EDF\u9519\u8BEFsystem_error";
    ReturnCode[ReturnCode["\u53C2\u6570\u9519\u8BEFinvalid_parameter"] = "对方不是粉丝"] = "\u53C2\u6570\u9519\u8BEFinvalid_parameter";
    ReturnCode[ReturnCode["\u65E0\u6548\u5BA2\u670D\u8D26\u53F7invalid_kf_account"] = "没有留言权限"] = "\u65E0\u6548\u5BA2\u670D\u8D26\u53F7invalid_kf_account";
    ReturnCode[ReturnCode["\u5BA2\u670D\u5E10\u53F7\u5DF2\u5B58\u5728kf_account_exsited"] = "该图文不存在"] = "\u5BA2\u670D\u5E10\u53F7\u5DF2\u5B58\u5728kf_account_exsited";
    ReturnCode[ReturnCode["\u5BA2\u670D\u5E10\u53F7\u540D\u957F\u5EA6\u8D85\u8FC7\u9650\u5236"] = "文章存在敏感信息"] = "\u5BA2\u670D\u5E10\u53F7\u540D\u957F\u5EA6\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u5BA2\u670D\u5E10\u53F7\u540D\u5305\u542B\u975E\u6CD5\u5B57\u7B26"] = "精选评论数已达上限"] = "\u5BA2\u670D\u5E10\u53F7\u540D\u5305\u542B\u975E\u6CD5\u5B57\u7B26";
    ReturnCode[ReturnCode["\u5BA2\u670D\u5E10\u53F7\u4E2A\u6570\u8D85\u8FC7\u9650\u5236"] = "已被用户删除_无法精选"] = "\u5BA2\u670D\u5E10\u53F7\u4E2A\u6570\u8D85\u8FC7\u9650\u5236";
    ReturnCode[ReturnCode["\u65E0\u6548\u5934\u50CF\u6587\u4EF6\u7C7B\u578Binvalid_file_type"] = "已经回复过了"] = "\u65E0\u6548\u5934\u50CF\u6587\u4EF6\u7C7B\u578Binvalid_file_type";
    ReturnCode[ReturnCode["\u65E5\u671F\u683C\u5F0F\u9519\u8BEF"] = "回复超过长度限制或为0"] = "\u65E5\u671F\u683C\u5F0F\u9519\u8BEF";
    ReturnCode[ReturnCode["\u65E5\u671F\u8303\u56F4\u9519\u8BEF"] = "该评论不存在"] = "\u65E5\u671F\u8303\u56F4\u9519\u8BEF";
    ReturnCode[ReturnCode["\u53D1\u9001\u6D88\u606F\u5931\u8D25_\u8BE5\u7528\u6237\u5DF2\u88AB\u52A0\u5165\u9ED1\u540D\u5355_\u65E0\u6CD5\u5411\u6B64\u53D1\u9001\u6D88\u606F"] = "获取评论数目不合法"] = "\u53D1\u9001\u6D88\u606F\u5931\u8D25_\u8BE5\u7528\u6237\u5DF2\u88AB\u52A0\u5165\u9ED1\u540D\u5355_\u65E0\u6CD5\u5411\u6B64\u53D1\u9001\u6D88\u606F";
    ReturnCode[ReturnCode["\u95E8\u5E97\u4E0D\u5B58\u5728"] = "该公众号_小程序已经绑定了开放平台帐号"] = "\u95E8\u5E97\u4E0D\u5B58\u5728";
    ReturnCode[ReturnCode["\u8BE5\u95E8\u5E97\u72B6\u6001\u4E0D\u5141\u8BB8\u66F4\u65B0"] = "该主体已有任务执行中_距上次任务24h后再试"] = "\u8BE5\u95E8\u5E97\u72B6\u6001\u4E0D\u5141\u8BB8\u66F4\u65B0";
    ReturnCode[ReturnCode["\u6807\u7B7E\u683C\u5F0F\u9519\u8BEF"] = "内部错误"] = "\u6807\u7B7E\u683C\u5F0F\u9519\u8BEF";
    ReturnCode[ReturnCode["\u9875\u9762\u8DEF\u5F84\u9519\u8BEF"] = "无效微信号"] = "\u9875\u9762\u8DEF\u5F84\u9519\u8BEF";
    ReturnCode[ReturnCode["\u7C7B\u76EE\u586B\u5199\u9519\u8BEF"] = "法人姓名与微信号不一致"] = "\u7C7B\u76EE\u586B\u5199\u9519\u8BEF";
    ReturnCode[ReturnCode["\u5DF2\u7ECF\u6709\u6B63\u5728\u5BA1\u6838\u7684\u7248\u672C"] = "企业代码类型无效_请选择正确类型填写"] = "\u5DF2\u7ECF\u6709\u6B63\u5728\u5BA1\u6838\u7684\u7248\u672C";
    ReturnCode[ReturnCode["Item_list\u6709\u9879\u76EE\u4E3A\u7A7A"] = "未找到该任务"] = "Item_list\u6709\u9879\u76EE\u4E3A\u7A7A";
    ReturnCode[ReturnCode["\u6807\u9898\u586B\u5199\u9519\u8BEF"] = "待法人人脸核身校验"] = "\u6807\u9898\u586B\u5199\u9519\u8BEF";
    ReturnCode[ReturnCode["\u65E0\u6548\u7684\u5BA1\u6838id"] = "法人_企业信息一致性校验中"] = "\u65E0\u6548\u7684\u5BA1\u6838id";
    ReturnCode[ReturnCode["\u6CA1\u6709\u5BA1\u6838\u7248\u672C"] = "缺少参数"] = "\u6CA1\u6709\u5BA1\u6838\u7248\u672C";
    ReturnCode[ReturnCode["\u5BA1\u6838\u72B6\u6001\u672A\u6EE1\u8DB3\u53D1\u5E03"] = "第三方权限集不全_补全权限集全网发布后生效"] = "\u5BA1\u6838\u72B6\u6001\u672A\u6EE1\u8DB3\u53D1\u5E03";
    ReturnCode[ReturnCode["\u72B6\u6001\u4E0D\u53EF\u53D8"] = "已下发的模板消息法人并未确认且已超时_24h_未进行身份证校验"] = "\u72B6\u6001\u4E0D\u53EF\u53D8";
    ReturnCode[ReturnCode["Action\u975E\u6CD5"] = "已下发的模板消息法人并未确认且已超时_24h_未进行人脸识别校验"] = "Action\u975E\u6CD5";
    ReturnCode[ReturnCode["\u5BA1\u6838\u5217\u8868\u586B\u5199\u7684\u9879\u76EE\u6570\u4E0D\u57281\u52305\u4EE5\u5185"] = "已下发的模板消息法人并未确认且已超时_24h"] = "\u5BA1\u6838\u5217\u8868\u586B\u5199\u7684\u9879\u76EE\u6570\u4E0D\u57281\u52305\u4EE5\u5185";
    ReturnCode[ReturnCode["\u9700\u8981\u8865\u5145\u76F8\u5E94\u8D44\u6599_\u586B\u5199org_code\u548Cother_files\u53C2\u6570"] = "工商数据返回_企业已注销"] = "\u9700\u8981\u8865\u5145\u76F8\u5E94\u8D44\u6599_\u586B\u5199org_code\u548Cother_files\u53C2\u6570";
    ReturnCode[ReturnCode["\u7BA1\u7406\u5458\u624B\u673A\u767B\u8BB0\u6570\u91CF\u5DF2\u8D85\u8FC7\u4E0A\u9650"] = "工商数据返回_企业不存在或企业信息未更新"] = "\u7BA1\u7406\u5458\u624B\u673A\u767B\u8BB0\u6570\u91CF\u5DF2\u8D85\u8FC7\u4E0A\u9650";
    ReturnCode[ReturnCode["\u8BE5\u5FAE\u4FE1\u53F7\u5DF2\u7ED1\u5B9A5\u4E2A\u7BA1\u7406\u5458"] = "工商数据返回_企业法定代表人姓名不一致"] = "\u8BE5\u5FAE\u4FE1\u53F7\u5DF2\u7ED1\u5B9A5\u4E2A\u7BA1\u7406\u5458";
    ReturnCode[ReturnCode["\u7BA1\u7406\u5458\u8EAB\u4EFD\u8BC1\u5DF2\u767B\u8BB0\u8FC75\u6B21"] = "工商数据返回_企业法定代表人身份证号码不一致"] = "\u7BA1\u7406\u5458\u8EAB\u4EFD\u8BC1\u5DF2\u767B\u8BB0\u8FC75\u6B21";
    ReturnCode[ReturnCode["\u8BE5\u4E3B\u4F53\u767B\u8BB0\u6570\u91CF\u5DF2\u8D85\u8FC7\u4E0A\u9650"] = "法定代表人身份证号码_工商数据未更新_请5_15个工作日之后尝试"] = "\u8BE5\u4E3B\u4F53\u767B\u8BB0\u6570\u91CF\u5DF2\u8D85\u8FC7\u4E0A\u9650";
    ReturnCode[ReturnCode["\u5546\u5BB6\u540D\u79F0\u5DF2\u88AB\u5360\u7528"] = "工商数据返回_企业信息或法定代表人信息不一致"] = "\u5546\u5BB6\u540D\u79F0\u5DF2\u88AB\u5360\u7528";
    ReturnCode[ReturnCode["\u4E0D\u80FD\u4F7F\u7528\u8BE5\u540D\u79F0"] = "不是由第三方代小程序进行调用"] = "\u4E0D\u80FD\u4F7F\u7528\u8BE5\u540D\u79F0";
    ReturnCode[ReturnCode["\u8BE5\u540D\u79F0\u5728\u4FB5\u6743\u6295\u8BC9\u4FDD\u62A4\u671F"] = "不存在第三方的已经提交的代码"] = "\u8BE5\u540D\u79F0\u5728\u4FB5\u6743\u6295\u8BC9\u4FDD\u62A4\u671F";
    ReturnCode[ReturnCode["\u540D\u79F0\u5305\u542B\u8FDD\u89C4\u5185\u5BB9\u6216\u5FAE\u4FE1\u7B49\u4FDD\u7559\u5B57"] = "标签格式错误"] = "\u540D\u79F0\u5305\u542B\u8FDD\u89C4\u5185\u5BB9\u6216\u5FAE\u4FE1\u7B49\u4FDD\u7559\u5B57";
    ReturnCode[ReturnCode["\u5546\u5BB6\u540D\u79F0\u5728\u6539\u540D15\u5929\u4FDD\u62A4\u671F\u5185"] = "页面路径错误"] = "\u5546\u5BB6\u540D\u79F0\u5728\u6539\u540D15\u5929\u4FDD\u62A4\u671F\u5185";
    ReturnCode[ReturnCode["\u9700\u4E0E\u8BE5\u5E10\u53F7\u76F8\u540C\u4E3B\u4F53\u624D\u53EF\u7533\u8BF7"] = "类目填写错误"] = "\u9700\u4E0E\u8BE5\u5E10\u53F7\u76F8\u540C\u4E3B\u4F53\u624D\u53EF\u7533\u8BF7";
    ReturnCode[ReturnCode["\u4ECB\u7ECD\u4E2D\u542B\u6709\u865A\u5047\u6DF7\u6DC6\u5185\u5BB9"] = "已经有正在审核的版本"] = "\u4ECB\u7ECD\u4E2D\u542B\u6709\u865A\u5047\u6DF7\u6DC6\u5185\u5BB9";
    ReturnCode[ReturnCode["\u5934\u50CF\u6216\u8005\u7B80\u4ECB\u4FEE\u6539\u8FBE\u5230\u6BCF\u4E2A\u6708\u4E0A\u9650"] = "item_list有项目为空"] = "\u5934\u50CF\u6216\u8005\u7B80\u4ECB\u4FEE\u6539\u8FBE\u5230\u6BCF\u4E2A\u6708\u4E0A\u9650";
    ReturnCode[ReturnCode["\u6B63\u5728\u5BA1\u6838\u4E2D_\u8BF7\u52FF\u91CD\u590D\u63D0\u4EA4"] = "标题填写错误"] = "\u6B63\u5728\u5BA1\u6838\u4E2D_\u8BF7\u52FF\u91CD\u590D\u63D0\u4EA4";
    ReturnCode[ReturnCode["\u8BF7\u5148\u6210\u529F\u521B\u5EFA\u95E8\u5E97\u540E\u518D\u8C03\u7528"] = "无效的审核id"] = "\u8BF7\u5148\u6210\u529F\u521B\u5EFA\u95E8\u5E97\u540E\u518D\u8C03\u7528";
    ReturnCode[ReturnCode["\u4E34\u65F6mediaid\u65E0\u6548"] = "没有审核版本"] = "\u4E34\u65F6mediaid\u65E0\u6548";
    ReturnCode[ReturnCode["\u4E0D\u662F\u7531\u7B2C\u4E09\u65B9\u4EE3\u5C0F\u7A0B\u5E8F\u8FDB\u884C\u8C03\u7528"] = "审核状态未满足发布"] = "\u4E0D\u662F\u7531\u7B2C\u4E09\u65B9\u4EE3\u5C0F\u7A0B\u5E8F\u8FDB\u884C\u8C03\u7528";
    ReturnCode[ReturnCode["\u4E0D\u5B58\u5728\u7B2C\u4E09\u65B9\u7684\u5DF2\u7ECF\u63D0\u4EA4\u7684\u4EE3\u7801"] = "状态不可变"] = "\u4E0D\u5B58\u5728\u7B2C\u4E09\u65B9\u7684\u5DF2\u7ECF\u63D0\u4EA4\u7684\u4EE3\u7801";
    ReturnCode[ReturnCode["\u5C0F\u7A0B\u5E8F\u8FD8\u672A\u8BBE\u7F6E\u6635\u79F0_\u5934\u50CF_\u7B80\u4ECB_\u8BF7\u5148\u8BBE\u7F6E\u5B8C\u540E\u518D\u91CD\u65B0\u63D0\u4EA4"] = "action非法"] = "\u5C0F\u7A0B\u5E8F\u8FD8\u672A\u8BBE\u7F6E\u6635\u79F0_\u5934\u50CF_\u7B80\u4ECB_\u8BF7\u5148\u8BBE\u7F6E\u5B8C\u540E\u518D\u91CD\u65B0\u63D0\u4EA4";
    ReturnCode[ReturnCode["\u65E0\u6548\u5FAE\u4FE1\u53F7"] = "审核列表填写的项目数不在1到5以内"] = "\u65E0\u6548\u5FAE\u4FE1\u53F7";
    ReturnCode[ReturnCode["\u7B7E\u540D\u9519\u8BEF"] = "小程序还未设置昵称_头像_简介_请先设置完后再重新提交"] = "\u7B7E\u540D\u9519\u8BEF";
    ReturnCode[ReturnCode["\u5185\u5BB9\u542B\u6709\u8FDD\u6CD5\u8FDD\u89C4\u5185\u5BB9"] = "签名错误"] = "\u5185\u5BB9\u542B\u6709\u8FDD\u6CD5\u8FDD\u89C4\u5185\u5BB9";
    ReturnCode[ReturnCode["\u6CA1\u6709\u7559\u8A00\u6743\u9650"] = "内容含有违法违规内容"] = "\u6CA1\u6709\u7559\u8A00\u6743\u9650";
    ReturnCode[ReturnCode["\u8BE5\u56FE\u6587\u4E0D\u5B58\u5728"] = "POST参数非法"] = "\u8BE5\u56FE\u6587\u4E0D\u5B58\u5728";
    ReturnCode[ReturnCode["\u6587\u7AE0\u5B58\u5728\u654F\u611F\u4FE1\u606F"] = "该经营资质已添加_请勿重复添加"] = "\u6587\u7AE0\u5B58\u5728\u654F\u611F\u4FE1\u606F";
    ReturnCode[ReturnCode["\u7CBE\u9009\u8BC4\u8BBA\u6570\u5DF2\u8FBE\u4E0A\u9650"] = "附近地点添加数量达到上线_无法继续添加"] = "\u7CBE\u9009\u8BC4\u8BBA\u6570\u5DF2\u8FBE\u4E0A\u9650";
    ReturnCode[ReturnCode["\u5DF2\u88AB\u7528\u6237\u5220\u9664_\u65E0\u6CD5\u7CBE\u9009"] = "地点已被其它小程序占用"] = "\u5DF2\u88AB\u7528\u6237\u5220\u9664_\u65E0\u6CD5\u7CBE\u9009";
    ReturnCode[ReturnCode["\u5DF2\u7ECF\u56DE\u590D\u8FC7\u4E86"] = "附近功能被封禁"] = "\u5DF2\u7ECF\u56DE\u590D\u8FC7\u4E86";
    ReturnCode[ReturnCode["\u56DE\u590D\u8D85\u8FC7\u957F\u5EA6\u9650\u5236\u6216\u4E3A0"] = "地点正在审核中"] = "\u56DE\u590D\u8D85\u8FC7\u957F\u5EA6\u9650\u5236\u6216\u4E3A0";
    ReturnCode[ReturnCode["\u8BE5\u8BC4\u8BBA\u4E0D\u5B58\u5728"] = "地点正在展示小程序"] = "\u8BE5\u8BC4\u8BBA\u4E0D\u5B58\u5728";
    ReturnCode[ReturnCode["\u83B7\u53D6\u8BC4\u8BBA\u6570\u76EE\u4E0D\u5408\u6CD5"] = "地点审核失败"] = "\u83B7\u53D6\u8BC4\u8BBA\u6570\u76EE\u4E0D\u5408\u6CD5";
    ReturnCode[ReturnCode["\u8BE5\u516C\u4F17\u53F7_\u5C0F\u7A0B\u5E8F\u5DF2\u7ECF\u7ED1\u5B9A\u4E86\u5F00\u653E\u5E73\u53F0\u5E10\u53F7"] = "程序未展示在该地点"] = "\u8BE5\u516C\u4F17\u53F7_\u5C0F\u7A0B\u5E8F\u5DF2\u7ECF\u7ED1\u5B9A\u4E86\u5F00\u653E\u5E73\u53F0\u5E10\u53F7";
    ReturnCode[ReturnCode["\u5185\u90E8\u9519\u8BEF"] = "小程序未上架或不可见"] = "\u5185\u90E8\u9519\u8BEF";
    ReturnCode[ReturnCode["\u4F01\u4E1A\u4EE3\u7801\u7C7B\u578B\u65E0\u6548_\u8BF7\u9009\u62E9\u6B63\u786E\u7C7B\u578B\u586B\u5199"] = "地点不存在"] = "\u4F01\u4E1A\u4EE3\u7801\u7C7B\u578B\u65E0\u6548_\u8BF7\u9009\u62E9\u6B63\u786E\u7C7B\u578B\u586B\u5199";
    ReturnCode[ReturnCode["\u8BE5\u4E3B\u4F53\u5DF2\u6709\u4EFB\u52A1\u6267\u884C\u4E2D_\u8DDD\u4E0A\u6B21\u4EFB\u52A124h\u540E\u518D\u8BD5"] = "个人类型小程序不可用"] = "\u8BE5\u4E3B\u4F53\u5DF2\u6709\u4EFB\u52A1\u6267\u884C\u4E2D_\u8DDD\u4E0A\u6B21\u4EFB\u52A124h\u540E\u518D\u8BD5";
    ReturnCode[ReturnCode["\u672A\u627E\u5230\u8BE5\u4EFB\u52A1"] = "需要补充相应资料_填写org_code和other_files参数"] = "\u672A\u627E\u5230\u8BE5\u4EFB\u52A1";
    ReturnCode[ReturnCode["\u5F85\u6CD5\u4EBA\u4EBA\u8138\u6838\u8EAB\u6821\u9A8C"] = "管理员手机登记数量已超过上限"] = "\u5F85\u6CD5\u4EBA\u4EBA\u8138\u6838\u8EAB\u6821\u9A8C";
    ReturnCode[ReturnCode["\u6CD5\u4EBA_\u4F01\u4E1A\u4FE1\u606F\u4E00\u81F4\u6027\u6821\u9A8C\u4E2D"] = "该微信号已绑定5个管理员"] = "\u6CD5\u4EBA_\u4F01\u4E1A\u4FE1\u606F\u4E00\u81F4\u6027\u6821\u9A8C\u4E2D";
    ReturnCode[ReturnCode["\u7F3A\u5C11\u53C2\u6570"] = "管理员身份证已登记过5次"] = "\u7F3A\u5C11\u53C2\u6570";
    ReturnCode[ReturnCode["\u7B2C\u4E09\u65B9\u6743\u9650\u96C6\u4E0D\u5168_\u8865\u5168\u6743\u9650\u96C6\u5168\u7F51\u53D1\u5E03\u540E\u751F\u6548"] = "该主体登记数量已超过上限"] = "\u7B2C\u4E09\u65B9\u6743\u9650\u96C6\u4E0D\u5168_\u8865\u5168\u6743\u9650\u96C6\u5168\u7F51\u53D1\u5E03\u540E\u751F\u6548";
    ReturnCode[ReturnCode["\u8BE5\u7ECF\u8425\u8D44\u8D28\u5DF2\u6DFB\u52A0_\u8BF7\u52FF\u91CD\u590D\u6DFB\u52A0"] = "商家名称已被占用"] = "\u8BE5\u7ECF\u8425\u8D44\u8D28\u5DF2\u6DFB\u52A0_\u8BF7\u52FF\u91CD\u590D\u6DFB\u52A0";
    ReturnCode[ReturnCode["\u9644\u8FD1\u5730\u70B9\u6DFB\u52A0\u6570\u91CF\u8FBE\u5230\u4E0A\u7EBF_\u65E0\u6CD5\u7EE7\u7EED\u6DFB\u52A0"] = "不能使用该名称"] = "\u9644\u8FD1\u5730\u70B9\u6DFB\u52A0\u6570\u91CF\u8FBE\u5230\u4E0A\u7EBF_\u65E0\u6CD5\u7EE7\u7EED\u6DFB\u52A0";
    ReturnCode[ReturnCode["\u5730\u70B9\u5DF2\u88AB\u5176\u5B83\u5C0F\u7A0B\u5E8F\u5360\u7528"] = "该名称在侵权投诉保护期"] = "\u5730\u70B9\u5DF2\u88AB\u5176\u5B83\u5C0F\u7A0B\u5E8F\u5360\u7528";
    ReturnCode[ReturnCode["\u9644\u8FD1\u529F\u80FD\u88AB\u5C01\u7981"] = "名称包含违规内容或微信等保留字"] = "\u9644\u8FD1\u529F\u80FD\u88AB\u5C01\u7981";
    ReturnCode[ReturnCode["\u5730\u70B9\u6B63\u5728\u5BA1\u6838\u4E2D"] = "商家名称在改名15天保护期内"] = "\u5730\u70B9\u6B63\u5728\u5BA1\u6838\u4E2D";
    ReturnCode[ReturnCode["\u5730\u70B9\u6B63\u5728\u5C55\u793A\u5C0F\u7A0B\u5E8F"] = "需与该帐号相同主体才可申请"] = "\u5730\u70B9\u6B63\u5728\u5C55\u793A\u5C0F\u7A0B\u5E8F";
    ReturnCode[ReturnCode["\u5730\u70B9\u5BA1\u6838\u5931\u8D25"] = "介绍中含有虚假混淆内容"] = "\u5730\u70B9\u5BA1\u6838\u5931\u8D25";
    ReturnCode[ReturnCode["\u7A0B\u5E8F\u672A\u5C55\u793A\u5728\u8BE5\u5730\u70B9"] = "头像或者简介修改达到每个月上限"] = "\u7A0B\u5E8F\u672A\u5C55\u793A\u5728\u8BE5\u5730\u70B9";
    ReturnCode[ReturnCode["\u5C0F\u7A0B\u5E8F\u672A\u4E0A\u67B6\u6216\u4E0D\u53EF\u89C1"] = "没有权限"] = "\u5C0F\u7A0B\u5E8F\u672A\u4E0A\u67B6\u6216\u4E0D\u53EF\u89C1";
    ReturnCode[ReturnCode["\u5730\u70B9\u4E0D\u5B58\u5728"] = "正在审核中_请勿重复提交"] = "\u5730\u70B9\u4E0D\u5B58\u5728";
    ReturnCode[ReturnCode["\u4E2A\u4EBA\u7C7B\u578B\u5C0F\u7A0B\u5E8F\u4E0D\u53EF\u7528"] = "请先成功创建门店后再调用"] = "\u4E2A\u4EBA\u7C7B\u578B\u5C0F\u7A0B\u5E8F\u4E0D\u53EF\u7528";
    ReturnCode[ReturnCode["\u5DF2\u4E0B\u53D1\u7684\u6A21\u677F\u6D88\u606F\u6CD5\u4EBA\u5E76\u672A\u786E\u8BA4\u4E14\u5DF2\u8D85\u65F6_24h_\u672A\u8FDB\u884C\u8EAB\u4EFD\u8BC1\u6821\u9A8C"] = "临时mediaid无效"] = "\u5DF2\u4E0B\u53D1\u7684\u6A21\u677F\u6D88\u606F\u6CD5\u4EBA\u5E76\u672A\u786E\u8BA4\u4E14\u5DF2\u8D85\u65F6_24h_\u672A\u8FDB\u884C\u8EAB\u4EFD\u8BC1\u6821\u9A8C";
    ReturnCode[ReturnCode["\u5DF2\u4E0B\u53D1\u7684\u6A21\u677F\u6D88\u606F\u6CD5\u4EBA\u5E76\u672A\u786E\u8BA4\u4E14\u5DF2\u8D85\u65F6_24h_\u672A\u8FDB\u884C\u4EBA\u8138\u8BC6\u522B\u6821\u9A8C"] = "输入参数有误"] = "\u5DF2\u4E0B\u53D1\u7684\u6A21\u677F\u6D88\u606F\u6CD5\u4EBA\u5E76\u672A\u786E\u8BA4\u4E14\u5DF2\u8D85\u65F6_24h_\u672A\u8FDB\u884C\u4EBA\u8138\u8BC6\u522B\u6821\u9A8C";
    ReturnCode[ReturnCode["\u5DF2\u4E0B\u53D1\u7684\u6A21\u677F\u6D88\u606F\u6CD5\u4EBA\u5E76\u672A\u786E\u8BA4\u4E14\u5DF2\u8D85\u65F6_24h"] = "门店不存在"] = "\u5DF2\u4E0B\u53D1\u7684\u6A21\u677F\u6D88\u606F\u6CD5\u4EBA\u5E76\u672A\u786E\u8BA4\u4E14\u5DF2\u8D85\u65F6_24h";
    ReturnCode[ReturnCode["\u7CFB\u7EDF\u7E41\u5FD9\u6B64\u65F6\u8BF7\u5F00\u53D1\u8005\u7A0D\u5019\u518D\u8BD5"] = "该门店状态不允许更新"] = "\u7CFB\u7EDF\u7E41\u5FD9\u6B64\u65F6\u8BF7\u5F00\u53D1\u8005\u7A0D\u5019\u518D\u8BD5";
})(ReturnCode = exports.ReturnCode || (exports.ReturnCode = {}));
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
exports.SwaggerException = SwaggerException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        return rxjs_1.throwError(result);
    else
        return rxjs_1.throwError(new SwaggerException(message, status, response, headers, null));
}
function blobToText(blob) {
    return new rxjs_1.Observable(function (observer) {
        if (!blob) {
            observer.next("");
            observer.complete();
        }
        else {
            var reader = new FileReader();
            reader.onload = function (event) {
                observer.next(event.target.result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
