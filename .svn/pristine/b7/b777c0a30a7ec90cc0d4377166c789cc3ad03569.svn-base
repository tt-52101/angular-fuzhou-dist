import { Component, Injector, OnInit } from '@angular/core';
import * as _ from 'lodash';
import { appModuleAnimation } from '@shared/animations/routerTransition';
import { PagedListingComponentBase, PagedRequestDto } from '@shared/component-base/paged-listing-component-base';
import { TicketAccountServiceProxy, PagedResultDtoOfAccountListDto, AccountListDto, GetAccountsInput } from '@shared/service-proxies/service-proxies';
import { CreateOrEditAccountComponent } from './create-or-edit-account/create-or-edit-account.component';
// import { AppConsts } from '@shared/AppConsts';
//  import { FileDownloadService } from '@shared/utils/file-download.service';

@Component({
	templateUrl: './account.component.html',
	styleUrls: ['./account.component.less'],
	animations: [appModuleAnimation()],
})


export class AccountComponent extends PagedListingComponentBase < AccountListDto >
implements OnInit {

	constructor(
		injector: Injector,
		private _accountService: TicketAccountServiceProxy
		) {
		super(injector);
	}



    /**
     * 获取后端数据列表信息
     * @param request 请求的数据的dto 请求必需参数 skipCount: number; maxResultCount: number;
     * @param pageNumber 当前页码
     * @param finishedCallback 完成后回调函数
     */

     queryData = [];
     filterText = "";
     sorting = "";
     maxResultCount = 10;
     skipCount = 0;


     search(){
     	this.maxResultCount = 5;
     	this.refresh();
     }

     protected fetchDataList(request: PagedRequestDto, pageNumber: number, finishedCallback: Function): void {
     	const formdata = new GetAccountsInput();
     	formdata.queryData=this.queryData;
     	formdata.filterText=this.filterText
     	formdata.sorting=this.sorting
     	formdata.maxResultCount=this.maxResultCount;
     	formdata.skipCount=this.skipCount;

     	this._accountService.getPaged(formdata)
     	.finally(() => {
     		finishedCallback();
     	})
     	.subscribe(result => {
     		this.dataList = result.items;
     		this.showPaging(result);
     	});
     }

    /**
     * 新增或编辑DTO信息
     * @param id 当前DTO的Id
     */
     createOrEdit(id ? : number): void {
     	this.modalHelper.static(CreateOrEditAccountComponent, { id: id })
     	.subscribe(result => {
     		if (result) {
     			this.refresh();
     		}
     	});
     }


    /**
     * 删除功能
     * @param entity 角色的实体信息
     */
     delete(entity: AccountListDto): void {
     	this._accountService.delete(entity.id)
     	.subscribe(() => {
          /**
           * 刷新表格数据并跳转到第一页（`pageNumber = 1`）
           */
           this.refreshGoFirstPage();
           this.notify.success(this.l('SuccessfullyDeleted'));
       });
     }

    /**
     * 批量删除
     */
     batchDelete(): void {
     	const selectCount = this.selectedDataItems.length;
     	if (selectCount <= 0) {
     		abp.message.warn(this.l('PleaseSelectAtLeastOneItem'));
     		return;
     	}

     	abp.message.confirm(
     		this.l('ConfirmDeleteXItemsWarningMessage', selectCount),
     		res => {
     			if (res) {
     				const ids = _.map(this.selectedDataItems, 'id');
     				this._accountService.batchDelete(ids).subscribe(() => {
     					this.refreshGoFirstPage();
     					this.notify.success(this.l('SuccessfullyDeleted'));
     				});
     			}
     		},
     		);
     }


    /**
     * 导出为Excel表
     */
     exportToExcel(): void {
     	abp.message.error('功能开发中！！！！');
      // this._accountService.getAccountexportToExcel().subscribe(result => {
      // this._fileDownloadService.downloadTempFile(result);
      // });
  }

}
