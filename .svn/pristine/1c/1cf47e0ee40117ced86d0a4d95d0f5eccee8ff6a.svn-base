import { Component, OnInit, Injector, ViewChild } from '@angular/core';
import {
  PagedListingComponentBase,
  PagedRequestDto
} from '@shared/component-base/paged-listing-component-base';
import {
  UserListDto,
  UserServiceProxy,
  EntityDtoOfInt64,
  PagedResultDtoOfUserListDto
} from '@shared/service-proxies/service-proxies';
import { CreateOrEditUserComponent } from '@app/admin/users/create-or-edit-user/create-or-edit-user.component';
import { EditUserPermissionsComponent } from '@app/admin/users/edit-user-permissions/edit-user-permissions.component';
import { ActivatedRoute } from '@angular/router';
import { finalize } from 'rxjs/operators';

// import _ = require('../@types/lodash');
import * as _ from 'lodash';
import { AppConsts } from 'abpPro/AppConsts';
import { getBaseHref } from '../../../root.module';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styles: []
})
export class UsersComponent extends PagedListingComponentBase<UserListDto>
implements OnInit {
  // 模糊搜索
  filterText = '';
  isEmailConfirmed=undefined
  /**
   * 选中的权限过滤
   */
   selectedPermission: string[] = [];

  /**
   * 是否激活过滤
   */
   isActive: boolean = undefined;

  /**
   * 选中的角色Ids过滤
   */
   role: number[] = undefined;


   constructor(
    injector: Injector,
    private _userService: UserServiceProxy,
    private _activatedRoute: ActivatedRoute,
    ) {
    super(injector);
    this.filterText =
    this._activatedRoute.snapshot.queryParams['filterText'] || '';
  }

  // 搜索
  onSearch(): void {
    this.refresh();
  }




  /**
   * 添加信息模态框
   */
   create(): void {
    this.modalHelper
    .static(CreateOrEditUserComponent)
    .subscribe(res => {
      if (res) {
        this.refresh();
      }
    });
  }



  /**
   * 编辑信息模态框
   * @param id 需要修改实体信息的ID
   */
   edit(): void {
    const selectCount = this.selectedDataItems.length;
    if (selectCount <= 0) {
      abp.message.warn(this.l('PleaseSelectAtLeastOneItem'));
      return;
    }else if(selectCount >1){
      abp.message.warn(this.l('PleaseSelectAtLeastOneItem'));
      return;
    }
    this.modalHelper
    .static(CreateOrEditUserComponent, { id: this.selectedDataItems[0].id })
    .subscribe(res => {
      if (res) {
        this.refresh();
      }
    });
  }



  /**
   * 强制刷新
   */
   forceRefresh() {
    this.filterText = '';
    this.isEmailConfirmed = undefined;
    this.isActive = undefined;
    this.selectedPermission = undefined;
    this.role = undefined;
    this.refreshGoFirstPage();
  }

  /**
   * 获取远端数据
   * @param request
   * @param pageNumber
   * @param finishedCallback
   */
   protected fetchDataList(
    request: PagedRequestDto,
    pageNumber: number,
    finishedCallback: Function
    ): void {
    this._userService
    .getPaged(
      this.selectedPermission,
      this.role,
      this.isEmailConfirmed,
      this.isActive,
      undefined,
      this.filterText,
      request.sorting,
      request.maxResultCount,
      request.skipCount
      )
    .pipe(
      finalize(() => {
        finishedCallback();
      })
      )
    .subscribe((result: PagedResultDtoOfUserListDto) => {
      this.dataList = result.items;
        // this.dataList = result.items.concat(result.items).concat(result.items).concat(result.items).concat(result.items)
        // console.log(this.dataList)
        this.showPaging(result);
      });
  }

  /**
   * 批量删除
   */
   batchDelete(): void {
    const selectCount = this.selectedDataItems.length;
    if (selectCount <= 0) {
      abp.message.warn(this.l('PleaseSelectAtLeastOneItem'));
      // this.miniMessage.warning(this.l('PleaseSelectAtLeastOneItem'));
      return;
    }
    this.message.confirm(
      this.l('ConfirmDeleteXItemsWarningMessage', selectCount),
      res => {
        if (res) {
          const ids = _.map(this.selectedDataItems, 'id');
          this._userService.batchDelete(ids).subscribe(() => {
            this.refreshGoFirstPage();
            this.notify.success(this.l('SuccessfullyDeleted'));
          });
        }
      }
      );
  }


  /**
   * 删除功能
   * @param entity 实体信息：User
   */
   protected delete(entity: UserListDto): void {
    if (entity.userName === AppConsts.userManagement.defaultAdminUserName) {
      abp.message.warn(
        this.l(
          'XUserCannotBeDeleted',
          AppConsts.userManagement.defaultAdminUserName
          )
        );
      return;
    }

    this._userService.delete(entity.id).subscribe(() => {
      this.refreshGoFirstPage();
      this.notify.success(this.l('SuccessfullyDeleted'));
    });
  }

  refreshCheckStatus(entityList: any[]): void {
    // entityList.forEach(item => {
    //   if (item.userName === AppConsts.userManagement.defaultAdminUserName) {
    //     item.checked = false;
    //   }
    // });

    // 是否全部选中
    const allChecked = entityList.every(value => value.checked === true);
    // 是否全部未选中
    const allUnChecked = entityList.every(value => !value.checked);
    // 是否全选
    this.allChecked = allChecked;
    // 全选框样式控制
    this.checkboxIndeterminate = !allChecked && !allUnChecked;
    // 已选中数据
    this.selectedDataItems = entityList.filter(value => value.checked);
  }
}
