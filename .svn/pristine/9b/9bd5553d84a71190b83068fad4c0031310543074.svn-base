import { Component, OnInit, Injector, ViewChild } from '@angular/core';
import {
  PagedListingComponentBase,
  PagedRequestDto
} from '@shared/component-base/paged-listing-component-base';
import {
  UserListDto,
  UserServiceProxy,
  EntityDtoOfInt64,
  PagedResultDtoOfUserListDto
} from '@shared/service-proxies/service-proxies';
import { CreateOrEditUserComponent } from '@app/admin/users/create-or-edit-user/create-or-edit-user.component';

import { finalize } from 'rxjs/operators';

import * as _ from 'lodash';
import { AppConsts } from 'abpPro/AppConsts';
import { getBaseHref } from '../../../root.module';

@Component({
  selector: 'app-users',
  templateUrl: './users.component.html',
  styles: []
})
export class UsersComponent extends PagedListingComponentBase < UserListDto >
implements OnInit {


  isEmailConfirmed = false

  selectedPermission: string[] = [];

  isActive: boolean = undefined;

  role: number[] = undefined;



  constructor(
    injector: Injector,
    private _userService: UserServiceProxy,
    ) {
    super(injector);
  }

    // 搜索
    onSearch(): void {
      // this.refresh();
    }

    /**
     * 添加信息模态框
     */
     create(): void {
      this.modalHelper
      .static(CreateOrEditUserComponent)
      .subscribe(res => {
        if (res) {
            // this.refresh();
          }
        });
    }

    /**
     * 编辑信息模态框
     * @param id 需要修改实体信息的ID
     */
     edit(): void {
      const selectCount = this.selectedDataItems.length;
      if (selectCount <= 0) {
        abp.message.warn(this.l('PleaseSelectAtLeastOneItem'));
        return;
      } else if (selectCount > 1) {
        abp.message.warn(this.l('PleaseSelectAtLeastOneItem'));
        return;
      }
      this.modalHelper
      .static(CreateOrEditUserComponent, { id: this.selectedDataItems[0].id })
      .subscribe(res => {
        if (res) {
          this.refresh();
        }
      });
    }

    /**
     * 获取远端数据
     * @param request
     * @param pageNumber
     * @param finishedCallback
     */
     protected fetchDataList(
      request: PagedRequestDto,
      pageNumber: number,
      finishedCallback: Function
      ): void {
      this._userService
      .getPaged(
        this.selectedPermission,
        this.role,
        this.isEmailConfirmed,
        this.isActive,
        undefined,
        this.filterText,
        request.sorting,
        request.maxResultCount,
        request.skipCount
        )
      .pipe(
        finalize(() => {
          finishedCallback();
        })
        )
      .subscribe((result: PagedResultDtoOfUserListDto) => {
        this.dataList = result.items;
        this.showPaging(result);
      });
    }

    refreshCheckStatus(entityList: any[]): void {

      // 是否全部选中
      const allChecked = entityList.every(value => value.checked === true);
      // 是否全部未选中
      const allUnChecked = entityList.every(value => !value.checked);
      // 是否全选
      this.allChecked = allChecked;
      // 全选框样式控制
      this.checkboxIndeterminate = !allChecked && !allUnChecked;
      // 已选中数据
      this.selectedDataItems = entityList.filter(value => value.checked);
    }
  }
